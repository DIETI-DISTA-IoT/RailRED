[
    {
        "id": "e06bb183e61723db",
        "type": "tab",
        "label": "Flow 1",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "5e7f2b6f6bb048a1",
        "type": "tab",
        "label": "TCMS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a73f99817db4d19b",
        "type": "group",
        "z": "5e7f2b6f6bb048a1",
        "name": "Internal environmental control and management system",
        "style": {
            "label": true,
            "stroke": "#777777",
            "color": "#0070c0"
        },
        "nodes": [
            "cdc9998346b823b0",
            "dfabce3da39e7af5",
            "b830a5d903872e25",
            "4fde117dc62a2f20",
            "93ac06bc31fb80fc",
            "44274f7d47749b35",
            "a68d8c30ebb402ce",
            "fb9440896eec8fe2",
            "27373607da789134",
            "c5850bffa62505cb",
            "040be6149f1bc242",
            "303124544b4e10da",
            "9b5279255831bc6a",
            "d26f0b6e35b867bb",
            "024f25dc4a52ddff",
            "27816acf59c2efb2",
            "946c1512b19637cb",
            "5c321e6c77ddd120",
            "76300c4ed912369c",
            "362933845b2a33e7",
            "3894e24a68b1b670",
            "1c62afd523b406cd",
            "132cf4576db21d51",
            "cef6a54250ca6dfa",
            "b10a577522283d82",
            "6632d2e20db1a583",
            "178f5401143dcbeb",
            "2688558c467b9924",
            "82a9cb32e13e08e7"
        ],
        "x": 34,
        "y": 479,
        "w": 1652,
        "h": 502
    },
    {
        "id": "7342c789d8a8e2ed",
        "type": "group",
        "z": "5e7f2b6f6bb048a1",
        "name": "CCTV",
        "style": {
            "stroke": "#777777",
            "label": true,
            "color": "#ff0000"
        },
        "nodes": [
            "8f2c66708c047167",
            "e9aa5fa77aa00fb7",
            "ee48ec6e4d9dcf74",
            "5db6988f59f3f049",
            "ba1fd6a1dd32800f",
            "15a0cd1505475dec",
            "1e92d912d8255312",
            "7b0513642f675e1b",
            "e7dd2e5163da0b13",
            "323ba6faaded07fd",
            "3596792057b1378a",
            "7352ce7cdfefb561",
            "e5ba29111deace63",
            "1fd252162cd21482",
            "1678c30adc1c742e",
            "cb7bfe58f10d77f4",
            "fc726dac6e4b1e41",
            "7b75c6e245ec60ad",
            "e7aa8347e88543a9",
            "a6973bc2b65d7905",
            "08e36de9db41f63a",
            "2b4878b1355f41e5",
            "0b86e50fa487844b",
            "297299bf61d8bc3a",
            "2481723a4469a342",
            "0308bc6d541c8efa",
            "99cd72b58eb9243d"
        ],
        "x": 34,
        "y": 4439,
        "w": 2212,
        "h": 382
    },
    {
        "id": "c89af13838547824",
        "type": "group",
        "z": "5e7f2b6f6bb048a1",
        "name": "Doors",
        "style": {
            "label": true,
            "stroke": "#777777",
            "color": "#228B22"
        },
        "nodes": [
            "81377bb1a19beb13",
            "81c0a4984a066bd3",
            "3e7affe62da67961",
            "cb858b92a7f62927",
            "428bbe6fdfbb0954",
            "3ee9e7eef5e810ac",
            "c8458254838d4a5c",
            "fa70917803c481d4",
            "67c9b3038c62d727",
            "4a089cecd9cb69ea",
            "d47e781b7ce218b3",
            "7fc21f61ea5633b3",
            "6d0f2a721b6e56ca",
            "4ac90164f6754283",
            "331b6f044f22bc98",
            "b860a552ed02496a",
            "c3ec58fb41397b20",
            "a294408de7b6ddf7",
            "4d2221d1dc75be7d",
            "c2d3645b5ac50a6c",
            "46612114b3d42d3a",
            "7821fe3b34341a65",
            "567dcb6ccee512d7",
            "3512b6455cb7975f",
            "9c61dbfb5693801a",
            "c6c9757adfb2e8b9",
            "8f38c93d4d7bd47c",
            "7e8b5561fdeee34e",
            "b52bf5089f9ae6c0",
            "81b76c47cc9cbff8",
            "92b6f568652fdb92",
            "3ad230fc4da06b6b",
            "a437813d64ae1906",
            "e6b44bec994b1b97",
            "0d241b8931bf97c1"
        ],
        "x": 34,
        "y": 2019,
        "w": 2032,
        "h": 802
    },
    {
        "id": "3f53c70906b87c79",
        "type": "group",
        "z": "5e7f2b6f6bb048a1",
        "name": "PBS",
        "style": {
            "stroke": "#777777",
            "label": true,
            "color": "#964b00"
        },
        "nodes": [
            "cd97fbd2bfd02a7f",
            "dccd6e46045ea114",
            "f0161c6f.52901",
            "4a9d87e5.0c67d4",
            "446d629130739e68",
            "be7197cb9f348bc0",
            "c38b9943a839153a",
            "926d692e06bdc594",
            "11e275db50fbf6c6",
            "f8895f9c584c78ab",
            "b18acae00c1add85",
            "aa6407bd8c3a7b2e",
            "5f1d6b9f3e8ac8b4",
            "e363f73008c71b8f",
            "08a40d838d0b67d3",
            "4fb39d377378e75f"
        ],
        "x": 34,
        "y": 1099,
        "w": 1512,
        "h": 362
    },
    {
        "id": "db162c2f42040dd8",
        "type": "group",
        "z": "5e7f2b6f6bb048a1",
        "name": "PIS",
        "style": {
            "label": true,
            "stroke": "#777777",
            "color": "#ffbfbf"
        },
        "nodes": [
            "f3ff8e909aa72165",
            "e6dec8b84864699e",
            "55ffe37f65c92f61",
            "2ee10725a95074e2",
            "05eb2572b17656f9",
            "011d8e8a0eda6511",
            "3615a1b70fb63480",
            "09a59ec5d9fb1922",
            "3b19453665ce041b",
            "5a3dd2a43899f6ac",
            "ec89984726f2b64f",
            "e876fb603b939c9a",
            "5b80c6863c57503f",
            "0680e6034f9215f5",
            "6ef60241e32ab392",
            "b18357d64f5991a9",
            "cc921cafce48d2f7",
            "54245d13a6853f0c",
            "0e5c775ca8e3479b",
            "d5baf28de2dd5098",
            "b6a14f2b51b13c1b",
            "0dca18e5b81f514d",
            "6e0126cf0b72eafe",
            "a18fcd23f7fb86a6",
            "3149cf86906533c0",
            "3c96f5a8a89c7827",
            "26a559fb9c16180e",
            "807b63d769eee068",
            "8fba17ea881af01e",
            "c213cd0f172c4bdf",
            "aa74913ff81da371",
            "7f7c55c3fc8c5b2a",
            "c00a680a02aa4e94",
            "1353b095a4ac7c27"
        ],
        "x": 34,
        "y": 3299,
        "w": 1452,
        "h": 1022
    },
    {
        "id": "954cba7529ac09c6",
        "type": "group",
        "z": "5e7f2b6f6bb048a1",
        "name": "Auto-coupler",
        "style": {
            "label": true,
            "stroke": "#777777",
            "color": "#7fb7df"
        },
        "nodes": [
            "5875c0c9cd67d92f",
            "09ed15d97467b8ee",
            "2fed1fd94433ecba",
            "e7b28b0825deeb8e",
            "91d7a5da65aabf2a",
            "d56f5557e57d0fdd",
            "520c595ab49234b0",
            "d3aa25042a0cf765",
            "c9a37803a88d9568",
            "eba643afe0688b09",
            "5ac966d6d2bb6807",
            "741d2f7d0fd5690e",
            "e47a3c65ec5a9f5e",
            "4feeff97524f2c61",
            "28aee36726c85cbe",
            "2eba36d924e8c6ce"
        ],
        "x": 34,
        "y": 1579,
        "w": 1952,
        "h": 322
    },
    {
        "id": "9eff0cd9243fc0dc",
        "type": "group",
        "z": "5e7f2b6f6bb048a1",
        "name": "Power electronics",
        "style": {
            "label": true,
            "stroke": "#777777",
            "color": "#ffdf7f"
        },
        "nodes": [
            "d8dd5bb40cfb6dd5",
            "1f28eb4f0d139824",
            "7d934798cc2e5f08",
            "d7ca9aa7144d69c6",
            "ee325e59ccfd486d",
            "7b01e457fd08a07a",
            "deeaf0c570c00ad5",
            "c7f506437e053bb8",
            "2e56dabfdbbb0e90",
            "b9d36ddff2f21f7d",
            "5dce76f005afa789",
            "527beea1a99315df",
            "c414ddffdc2d0132",
            "ce767273b18ac962",
            "fe462acddafa0fd1",
            "1160a0274dd8c14c",
            "74900b4fd913654e",
            "146e0219e0f67937",
            "cd0ab8c5542af92b",
            "fa8daa89ab3b63b7",
            "3fbfa945f84d4978",
            "ae38ef5ac1a98063",
            "188e52fd9a0f998b",
            "dcb224741effe07b",
            "f6d1bf2acf29b91c",
            "1979d9fe60fa5423",
            "67da756b986ca567",
            "34355e46a1b2ae69",
            "0ced6b5e7ef310f6",
            "34019a06239ee52e",
            "ef5c9d5b22074d85",
            "8a037a34c5b85144",
            "ddcd20bc0c40ac75",
            "06a8dd31a90898b8",
            "984bb8992ed170e6",
            "46bc416045d96cac",
            "5e2aa25e615049c1",
            "e542ea8e2d765681",
            "827226f23f002288",
            "da35981283abd5ca",
            "01474cfe783ed03a",
            "fd9a5d2e9b5afe66",
            "58bdcbd1e7d2f40b",
            "ebfd46a637126295",
            "f2edcd562512dfd3",
            "244e8a968ac70d41",
            "5bfb7ad30dcf1aec",
            "84ce423e500c52ac",
            "c690d54ba9df5c68",
            "0ec0e2978323a79c"
        ],
        "x": 34,
        "y": 5479,
        "w": 1362,
        "h": 662
    },
    {
        "id": "651f9027a2a99147",
        "type": "group",
        "z": "5e7f2b6f6bb048a1",
        "name": "Wi-fi",
        "style": {
            "label": true,
            "stroke": "#777777",
            "color": "#ff0000"
        },
        "nodes": [
            "a15b86f029bb9f8f",
            "53fb1e3f720b8e11",
            "9dbe49c08a6c3ded",
            "e8752796d3397369",
            "966b3b67caa984d8",
            "66abbb8ab56d4ca1",
            "b1ee843777592ffe",
            "05b0b2b0277145b1",
            "9bc1580d988ce166",
            "47a966ed770e9738",
            "14fa212f859a6a20",
            "48bbd7f4d7c2c32d",
            "73d421bf660a7922",
            "077aa75b64fdadcb",
            "57162f19f5a1856d"
        ],
        "x": 34,
        "y": 4939,
        "w": 1452,
        "h": 422
    },
    {
        "id": "2c4fd2f10189163c",
        "type": "group",
        "z": "5e7f2b6f6bb048a1",
        "name": "VCU",
        "style": {
            "label": true,
            "stroke": "#777777",
            "color": "#ffbfbf"
        },
        "nodes": [
            "3354e1d867805456",
            "f535150a394f1266",
            "74f5ec594c0806fc",
            "5c01f1a17ed544b1",
            "9fdb91af62bc402f",
            "3084be6cae895cf0",
            "8f67de602d89aaaf",
            "0c2c3678b6085885",
            "39afc1b7407668c5",
            "bdd76147cb957da3",
            "a54243f40d5ffb7d"
        ],
        "x": 34,
        "y": 2939,
        "w": 1652,
        "h": 242
    },
    {
        "id": "94d4237ffed28447",
        "type": "group",
        "z": "5e7f2b6f6bb048a1",
        "name": "Humidity sensor",
        "style": {
            "label": true,
            "stroke": "#777777",
            "color": "#0070c0"
        },
        "nodes": [
            "5d96dfc4d720e4a9",
            "5f3b13e9532413fd",
            "8803e9b39de11412",
            "47f801285439f8c9",
            "bc5bf402ab45a6c0",
            "65ee172aa954a09f",
            "d506d4447b9e07e8"
        ],
        "x": 34,
        "y": 299,
        "w": 1112,
        "h": 142
    },
    {
        "id": "b813916fb46904a1",
        "type": "group",
        "z": "5e7f2b6f6bb048a1",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "48354775c418f8ad",
            "df843f263211a6f2",
            "1ebae996d1ed214a",
            "39131e14b75d9d2a",
            "eeca4a776e10895d",
            "16db3765874058e1",
            "5ae67fa14f73378a",
            "7a9ab4fc018b996f",
            "83912f9ff36f4226",
            "01eb51588076f380",
            "ac7ef0783d722b9f",
            "d8ade4e1c9f36651",
            "305b170dea065a88",
            "fa4ea7b5859f17d2",
            "33cf3bc20f44ccef",
            "97f859fd4d3f7188",
            "8014c80fb511d1cf",
            "5233ca40aedc0954",
            "929de6e50f2bd574",
            "abe07087c832712b",
            "7dc9f32dbf8c7b25",
            "ea8c9c84b5d230a2",
            "b7546e8c6084406a",
            "61eaf301dc665c0f",
            "7a1d52d9949d11e1",
            "6a06d80bf877bea8",
            "bf4b1c1f69965355",
            "3a99b5fb97bb87f8",
            "371bd5dc303e7da4",
            "77a09a61701db29b",
            "6cbc7c2f0ed9ad97",
            "7e6d2888a329d397",
            "f2173e474364da56",
            "65937d94bc037134",
            "d53b28595671895a",
            "4c22962514220ecf",
            "2c7e65075a478947",
            "62f453f973b844ce",
            "ce2959e661d76f5b",
            "51ce34f8d9d417a0",
            "908edde8b1257d61",
            "dfa0298ebc641e56",
            "2623ac87d8a27868",
            "add67000faeaa899",
            "c01aed3cb8635423",
            "9eb2b8eaa7b4f0a3",
            "c0349b1c41217963",
            "245eb9bb3684d235",
            "96eb54c117596cbe",
            "71d345c251d64248",
            "1a538fe285aed03d",
            "bc0a20141fe54bd3",
            "cc397c06286d5937",
            "11f441964e029833",
            "c6249a0946c492ce",
            "4998bb9467bea216",
            "16090ed78e544684",
            "974d7351ca44c752",
            "6d99de8d7b168cb9",
            "bc38ecc364ae9f54",
            "f96962b4a8e0655b",
            "279db857d50e0764",
            "8c0c047caf921dc3",
            "1326d5ba9fe8c7f8",
            "25ea8be05e9a8ef0",
            "8a09f4958e29dceb",
            "655ca2d6b54a563a",
            "58c7b22c392c23f4",
            "f8d1e14bc3058882",
            "1c1d16f46701e56d",
            "2302036ee699f8c5",
            "f79655dd0b6cdf1c",
            "a25536058d3a01f8",
            "95d62011428f47bc",
            "3d54ad1c5ecfde7d",
            "924b4135a10a72c5",
            "ec318f16f67d357f",
            "fc0a4d51a1603a00",
            "aed5a3a9347d1a92",
            "984c6abed82f78c5",
            "204e3750463fa12f",
            "4eb550272dc40b0d",
            "444b75d027f7c40a",
            "f066d558d62c799c",
            "595e8b14f111f2e5",
            "7e6ac3731ac7f21e",
            "c7cfb168a45493d2",
            "05b72d5c3542617c",
            "b9254eb40dc5d969",
            "378d247445ab12c0",
            "7154f1d33e6f7d6b",
            "5828436bde7a3329",
            "5193c298a3e9c065",
            "52cf694e5bccbd14",
            "f72e3ebdcc38bd28",
            "d8d1f7af9ee09300",
            "c5af1380fe21e54f",
            "fed8cad1deed8a97",
            "22a396786f48485c",
            "f5cc0c219499b989",
            "b17286d72fb401a2",
            "7fe7dcabceb45e59",
            "2f9a11ebc3872525",
            "60303fee445a5b41",
            "693ce1e372d40ff9",
            "fd3b7c8939a86053",
            "e78b11353dc91f2e",
            "bdadb497325b9959",
            "a3851533162c1d21",
            "3afa4d18acfab899",
            "91edd3e23a126ade",
            "eb39f5a62d6b3c7a",
            "c21d5aa219ead551",
            "90e7f8c1e6e5c9bc",
            "11c5dc03fc8821a5",
            "8c88d61c0e6671cc",
            "2a6647606a91be3b",
            "721e7dd35756e708",
            "7c509a07fe4b9164",
            "ce5465f6100ca48f",
            "6970eeba506dfd60",
            "fe969a70bfdc5565",
            "b464d6dc825f460a",
            "5ae663cb56a1e082",
            "cd26c7334a95ee24",
            "aca192b7abecf889",
            "9b4cedbd673d69e3",
            "3cfeac9962a2384c"
        ],
        "x": 34,
        "y": 6259,
        "w": 2492,
        "h": 1682
    },
    {
        "id": "78be386e3e43be7c",
        "type": "group",
        "z": "5e7f2b6f6bb048a1",
        "name": "Air production",
        "style": {
            "label": true,
            "stroke": "#777777",
            "color": "#6f2fa0"
        },
        "nodes": [
            "b437502f3630029d",
            "7995f7132d677d60",
            "274a335ad19c7b5b",
            "332824b1058cd8ea",
            "48f4b0dcd6f8e461",
            "77d12e131f81d090",
            "3b1c1aafff787e4c",
            "b97d3b8e350a1b04",
            "09a4fa062d437cb8",
            "fc9b0793b2532b99",
            "f1c18604d5cc3293",
            "d408a861df3e6792",
            "10f3ef9c077b7c06",
            "4c9141add671e16e",
            "661595f83fc6c604",
            "f3877a2e25d8022c",
            "53e3c1caacfadb03",
            "aa5f68abb9b7d4e7"
        ],
        "x": 2454,
        "y": 659,
        "w": 2352,
        "h": 262
    },
    {
        "id": "7e4f3f6309849cff",
        "type": "group",
        "z": "5e7f2b6f6bb048a1",
        "name": "HMI",
        "style": {
            "label": true,
            "stroke": "#777777",
            "color": "#ff7f7f"
        },
        "nodes": [
            "0ef91c4c3c88285a",
            "fb7bd483e68eea12",
            "e7d2d35b04a1649e",
            "6ed3242d8b160163",
            "bfc0a0527e4ad4e1",
            "453706ec6ebc7e1d",
            "558189b0012e5475",
            "9fc207dc49d59fa4",
            "167bc84078bf5927",
            "ef6e62decf47a5ab",
            "85c31a75c5f3be54",
            "e18d48063b3f109d",
            "5a9eca83a5364153",
            "b1a434aa04ef9ca5",
            "401e2366c1655a11",
            "cf00577cfd95e014",
            "3596dcd32acc33e6",
            "27e0b0c17d45e9ce",
            "82728f53a329d00d",
            "53e10f1eb9ecc569",
            "a942071ec59de175",
            "3c9dbb0d9ea2ab7b",
            "c9fa843427ed89bf",
            "ede536d45227b0dd",
            "ab6daadf1ac959a3",
            "b8316244d3d92008",
            "9921c7ee54ba50b4",
            "648a9041cb17a5e6",
            "3b222d618cb25f28",
            "15c20935dd38ff72",
            "c126a5d3.83e6f",
            "21b4d27e20e87f5b",
            "61177bbe79ba9b11",
            "5dd93132845977fe",
            "a34df5293ef1d7ea",
            "a07d3882b60cd443",
            "dbffa5609ea8c041",
            "5388f20b38f5e1c2",
            "693b70533f701c53",
            "178790d634025ad3",
            "aaf69a1fa72ab73c",
            "2e9ddaabdefd9da7",
            "820d46ef116e5a46",
            "b7772fb3cf66ac56",
            "cef826d3a058d253",
            "54559d0ffa0d5646",
            "31c73d5124c2fa83",
            "2b63adb404604628",
            "735d9934cc585299",
            "3a73154fbdd3beec",
            "d29d00e8f3fbbbdf",
            "572f47517004d6c0",
            "5b4fdece0c04170e",
            "369b201e0d458b02",
            "5962021a6a26480d",
            "b1bcb701a505ad27",
            "323076d4ea335e74",
            "73b73108829259db",
            "a049e9d0d370a860",
            "78b035a0c3940802",
            "b03e9ed7134b3e02",
            "a265fbfb6a4a71aa",
            "7867c1f0343fea1c",
            "2962578a7f093339",
            "85d86a6d782ae95c",
            "7bb31c85b9f1bfeb",
            "8633ac6e4b1781f7",
            "42107b274a5c3c12",
            "aae98969ca3f3ad4",
            "eaefe7f2554b687b",
            "2888b22b7e29d2a6",
            "07ac760f14453117",
            "a3ffff766f707ac2",
            "8fc16b15cd17aa0a",
            "ceb18ef3c7120a22",
            "e86bb0da823b036f",
            "9c4deaf7ddb55923",
            "e439000f6eaef153",
            "387ae679d5a189e1",
            "67ee186bba648ba2",
            "fc8a7d1692c3d447",
            "8f874728f2aa0550",
            "c5a593b5ae054463",
            "85fc0afa6cd2330e",
            "e3c928aeb6b3443e",
            "37813103d90dedac",
            "542d4fdbbe886f52",
            "7bcbcdcafd602c55",
            "3645fa9b6ffec486",
            "70861f5fb1974f48",
            "f1582910966f76c5",
            "7a90a7b0c5161b4d",
            "f7527a193ee0f812",
            "151f1fac6705d984",
            "162dfa04a697ee92",
            "ea887bbbab6e31a2",
            "e170bc7e1a07013f",
            "b660e702e20c9f6d",
            "2a069f62b0f2fbad",
            "2d3d712d516ccee4",
            "ce1ad9f6b7c52d45",
            "43f623aa92229439",
            "0f08f63f7cf70313",
            "76c004945109bac8",
            "3419d3043a1c8ab9",
            "58b4d777f8b371cf",
            "520a92c2e177ba7d",
            "c799cdc546a9d5c7",
            "b59c01a12845dfc2",
            "c2d5734c2a51be96",
            "c620abcecfe8b16b",
            "012d388af234874e",
            "b5fb764d54539491",
            "fc2269ca5b5670df",
            "7b1b0a9498febf9d",
            "8a75cbb2d01797c1",
            "a8b8b5c5683bd365",
            "b36a218d125ad567",
            "c50fd195ed23d865",
            "0311036c3547f7de",
            "a20d527ee50e772f",
            "ac256ba765121fb3",
            "d7db1309b43752d8",
            "7ed9abb02e3f0e0c",
            "351f41cd1501587d",
            "37fab4f4880a7989",
            "f29a90ded5325ed1",
            "397562cdeeeef760",
            "2c732aac52b67eb7",
            "c3ce183b7c417d4c",
            "a5f8568f25662390",
            "c6ded6b49ba36925",
            "6d89b85518e9b683",
            "4d3186df0e6a3d5d",
            "75b27f4430b8b954",
            "70227f888d637af7",
            "73113a6ee465048b",
            "1152011f3851e057",
            "6349b7c9d50ce2d9",
            "340f503cc3662068",
            "652633c34e356645",
            "c1268527a92de9ca",
            "39b90e9679250602",
            "9cc850e161fd1c2f",
            "51ae5d9e0904dfe9",
            "639e05e27432193e",
            "9c75d10089f42659",
            "12aa2d07ca2488c8",
            "7d3ccb899c7b75e5",
            "7be645fa6f7724fc",
            "49861c163b73ae78",
            "f98545c0480cb347",
            "36fc556b538c69ae",
            "244f8d7eb20d2c27",
            "570f22a86713166f",
            "a303bda4d1dac189",
            "aaee660759854b90",
            "0edd458cb9bfb906",
            "624b6a5248d34dd9",
            "36e562eec0b59e7c",
            "c58aa712007a9a25",
            "01f2105f680398a9",
            "79d6b59d0eef2fe3",
            "c483d3b259aaddd3",
            "9f0ec6dad8dc345f",
            "220f1967cfd3438b",
            "30d2a34dd315f660",
            "15c0762e997d2760",
            "d0204ae8212888bb",
            "41ec75701fb29729",
            "3a806ab04bbd9b52",
            "5ad7703e4f33e528",
            "ae2ba489ea6170f7",
            "c3c3be33c28c6a4d",
            "748f87f24e67e3e8",
            "3e56d4134320d2c4",
            "3bd894f2bd407773",
            "a20ecb8624109985",
            "8c194bfe5caf37f8",
            "eeece0f3b70823b3",
            "1e215b33f6386c76",
            "79f197394d1c30cb",
            "212e58795e77524b",
            "b089042b3f8b2104",
            "3ea38f0c5cd4c5e1",
            "1f414f2318187144",
            "065d25e8aa331a19",
            "46c37a6e43e9eb3f",
            "37dee64d030b9996",
            "e4184983db84fb83",
            "d0b88366a2e29c11",
            "86b65248a2aca3b7",
            "98ebf8b004f4819d",
            "946cafbc412a76e3",
            "a0be0526d215622e",
            "3985cf389df375a5",
            "d4c00b7e86d47dbe",
            "19e6487778d23585",
            "6198ed142e62b4f4",
            "1b2572506ec444b6",
            "bf82e9d9ffed31d6",
            "ea12976b4682d615",
            "9c4e3bd07b19053f",
            "0c63d37c1b3140b2",
            "84b8edc99991c936",
            "7fdb0b63ca3852f3",
            "ea00fbe0ba0a7e64",
            "308d9070f6f1f31f",
            "bd3a16bc3cb762d7",
            "c33bf8a15f199a2a",
            "1356e21a122388c2",
            "72932f8e66a52549",
            "b6fe7bd2349cec36"
        ],
        "x": 3064,
        "y": 1319,
        "w": 1302,
        "h": 4662
    },
    {
        "id": "7765436fbbe8a965",
        "type": "group",
        "z": "5e7f2b6f6bb048a1",
        "name": "Temperature sensor",
        "style": {
            "label": true,
            "color": "#0070c0",
            "stroke": "#777777"
        },
        "nodes": [
            "cc9ca46e7c81045e",
            "44f6578a4ae260a8",
            "9bf139dbb452a9b9",
            "38ab279076eb3e29",
            "9fbd660d07c48fd0"
        ],
        "x": 34,
        "y": 119,
        "w": 812,
        "h": 142
    },
    {
        "id": "cf0c9798be082d1a",
        "type": "group",
        "z": "5e7f2b6f6bb048a1",
        "name": "Diagnostics",
        "style": {
            "label": true
        },
        "nodes": [
            "c7c8dbb16f1f5b2c",
            "d9430381471aac8e",
            "a872ba83b45e33f3",
            "4e137e6a47cd98ea",
            "1b71f73988f24db3",
            "4a537b2694b1cc3a",
            "be5748077cb7583c",
            "e1a3e8a7c04edc08",
            "b1de2768eb2742ce",
            "26718c96190b28c8",
            "0341ea0557ae9337",
            "9f7475e1dbf82be4",
            "90b669b808e71ead",
            "8941647a53c361e5",
            "438a83da7987b399",
            "4fa80c9d15e60839",
            "fcb3fae59d9f7a2d",
            "cd8abd674b42fae7",
            "4948a5407b280ba5"
        ],
        "x": 2554,
        "y": 7239,
        "w": 2212,
        "h": 322
    },
    {
        "id": "bbef09f611251efb",
        "type": "mqtt-broker",
        "name": "",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "8a1d4c2228817683",
        "type": "tls-config",
        "name": "MyTLSOpenSSL",
        "cert": "/data/cert.pem",
        "key": "/data/key.pem",
        "ca": "/data/ca.pem",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "7be4bf338dc7386f",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "passenger_information_system",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "node",
        "passwordFieldType": "str"
    },
    {
        "id": "599d7d1a7facb952",
        "type": "ui_group",
        "name": "Temperature Overview",
        "tab": "37e2be5facaaa577",
        "order": 1,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "7b415ff669cd3403",
        "type": "ui_group",
        "name": "Humidity Overview",
        "tab": "37e2be5facaaa577",
        "order": 2,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "9018a94ed6884ab5",
        "type": "ui_group",
        "name": "System Overview",
        "tab": "37e2be5facaaa577",
        "order": 3,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "d58e4e07fba5af45",
        "type": "ui_group",
        "name": "Pneumatic Braking Overview",
        "tab": "ab7baeace1a995c2",
        "order": 1,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "89c8a130fbd067f1",
        "type": "ui_group",
        "name": "RPM Overview",
        "tab": "ab7baeace1a995c2",
        "order": 2,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "13cbda8ff63e70c5",
        "type": "ui_group",
        "name": "Speed Overview",
        "tab": "8b1e5b0357b30d0c",
        "order": 2,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "a87d64bdb0c1bc60",
        "type": "ui_group",
        "name": "Auto-coupler management",
        "tab": "8b1e5b0357b30d0c",
        "order": 1,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d4095cf81953d8b9",
        "type": "ui_group",
        "name": "Door management",
        "tab": "a8756c1d2012945d",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "81e056cf673794fd",
        "type": "ui_group",
        "name": "Pressure Overview_main line",
        "tab": "e42bf81db7e029d6",
        "order": 1,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f9f8dc884bcc8fcc",
        "type": "ui_group",
        "name": "Pressure Overview_support line",
        "tab": "e42bf81db7e029d6",
        "order": 2,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6691048acf6a3919",
        "type": "ui_group",
        "name": "VCU Overview",
        "tab": "5e6c86171925631b",
        "order": 1,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3630ee068fe34406",
        "type": "ui_group",
        "name": "PIS Overview",
        "tab": "0dbc79b2d4805957",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bac6ca666f5e3653",
        "type": "ui_group",
        "name": "Send",
        "tab": "a078cd2210b78120",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c828b9b019b02772",
        "type": "ui_group",
        "name": "Receive",
        "tab": "a078cd2210b78120",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "11b187cbd12b964a",
        "type": "ui_group",
        "name": "Power On/Off",
        "tab": "7dc2571c6599fd33",
        "order": 2,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "71249e75214acc0b",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "gateway_db",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "node",
        "passwordFieldType": "str"
    },
    {
        "id": "4ad79a99c47cbbaf",
        "type": "ui_group",
        "name": "HVAC",
        "tab": "be5c3f9d93a2d30b",
        "order": 1,
        "disp": true,
        "width": "5",
        "collapse": true,
        "className": ""
    },
    {
        "id": "91b579e883a9a9f5",
        "type": "ui_group",
        "name": "Air production",
        "tab": "be5c3f9d93a2d30b",
        "order": 3,
        "disp": true,
        "width": "5",
        "collapse": true,
        "className": ""
    },
    {
        "id": "83dcd5883c77cd62",
        "type": "ui_group",
        "name": "PBS",
        "tab": "be5c3f9d93a2d30b",
        "order": 2,
        "disp": true,
        "width": "5",
        "collapse": true,
        "className": ""
    },
    {
        "id": "6c896ecd924d01ba",
        "type": "ui_group",
        "name": "CCTV",
        "tab": "be5c3f9d93a2d30b",
        "order": 4,
        "disp": true,
        "width": "5",
        "collapse": true,
        "className": ""
    },
    {
        "id": "37e2be5facaaa577",
        "type": "ui_tab",
        "name": "HVAC",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ab7baeace1a995c2",
        "type": "ui_tab",
        "name": "PBS",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "8b1e5b0357b30d0c",
        "type": "ui_tab",
        "name": "Auto-coupler",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a8756c1d2012945d",
        "type": "ui_tab",
        "name": "Doors",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e42bf81db7e029d6",
        "type": "ui_tab",
        "name": "Air production",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5e6c86171925631b",
        "type": "ui_tab",
        "name": "VCU",
        "icon": "dashboard",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "0dbc79b2d4805957",
        "type": "ui_tab",
        "name": "PIS",
        "icon": "dashboard",
        "order": 8,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a078cd2210b78120",
        "type": "ui_tab",
        "name": "Wi-fi",
        "icon": "dashboard",
        "order": 9,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7dc2571c6599fd33",
        "type": "ui_tab",
        "name": "Power electronics",
        "icon": "dashboard",
        "order": 10,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "be5c3f9d93a2d30b",
        "type": "ui_tab",
        "name": "Gateway",
        "icon": "dashboard",
        "order": 11,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1fdb77c02145e68b",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "cc9ca46e7c81045e",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "7765436fbbe8a965",
        "name": "Temperature sensor",
        "func": "//Function that generates a random temperature based on a normal distribution with a specified mean (average) and standard deviation\nfunction getRandTemp(mean, stdDev, min, max) {\n    //Box-Muller algorithm for generating random numbers with normal distribution\n    var u1 = Math.random();         //Generates a random number between 0 and 1 (excluding 1)\n    var u2 = Math.random();         //Generates a random number between 0 and 1 (excluding 1)\n    var z = Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);\n\n    //Scale the generated value to fit the desired standard deviation and mean\n    var temp = z * stdDev + mean;\n\n    //Make sure the temperature remains between the desired minimum and maximum\n    temp = Math.min(max, Math.max(min, temp));\n\n    //Round the number to two decimal places\n    var roundedTemp = temp.toFixed(2);\n\n    return roundedTemp;\n}\n\nconst meanTemp = 20;            //Average temperature\nconst stdDevTemp = 6;           //Standard deviation of temperature\nconst minTemp = -10;            //Minimum temperature measured\nconst maxTemp = 40;             //Maximum temperature measured\n\nconst randTemp = getRandTemp(meanTemp, stdDevTemp, minTemp, maxTemp);               //Generates a random temperature between minTemp and maxTemp\n\n// Get the current timestamp\nconst currentTimestamp = new Date();\n\n// Separate date, hour, minute, second, and milliseconds\nconst currentDate = currentTimestamp.toISOString().split('T')[0]; // Extracts date part\nconst currentHour = currentTimestamp.getHours(); // Extracts hour\nconst currentMinute = currentTimestamp.getMinutes(); // Extracts minute\nconst currentSecond = currentTimestamp.getSeconds(); // Extracts second\nconst currentMilliseconds = currentTimestamp.getMilliseconds(); // Extracts milliseconds\n\n// Concatenate hour, minute, and second into \"hh:mm:ss\" format\nconst currentTime = currentHour + ':' + currentMinute + ':' + currentSecond;\n\n// Message object 1: Contains temperature, date, time, and milliseconds\nvar msg1 = {\n    payload: {\n        temperature: randTemp.toString(), // Set the random temperature value as a string\n        date: currentDate, // Set the date part of the timestamp\n        hour: currentHour, // Set the hour part of the timestamp\n        minute: currentMinute, // Set the minute part of the timestamp\n        second: currentSecond, // Set the second part of the timestamp\n        time: currentTime, // Set the time as \"hh:mm:ss\"\n        milliseconds: currentMilliseconds // Set the milliseconds\n    }\n};\n\n// Message object 2: Contains only the temperature\nvar msg2 = {\n    payload: randTemp.toString() // Return only the temperature\n};\n\nreturn [msg1, msg2]; // Return an array containing both messages",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 160,
        "wires": [
            [
                "6d3b02028d65373d"
            ],
            [
                "9bf139dbb452a9b9",
                "38ab279076eb3e29"
            ]
        ]
    },
    {
        "id": "5d96dfc4d720e4a9",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "94d4237ffed28447",
        "name": "Humidity sensor",
        "func": "//Function that generates a random humidity value considering the temperature\nfunction getHumidity(temperature) {\n    \n    //Define the correlation between temperature and humidity\n    var baseHumidity = 50;                      //Base humidity\n    var humidityIncreasePerDegree = 0.2;        //Humidity increase per degree Celsius\n\n    //Convert temperature to a number (in case it's a string)\n    temperature = parseFloat(temperature);\n\n    //Calculate humidity based on temperature\n    var humidity = baseHumidity + (temperature * humidityIncreasePerDegree);\n\n    //Introduce a random variation in humidity to make it more realistic\n    var randomVariation = Math.random() * 16 - 8;       //Random variation between -8 and +8\n    humidity += randomVariation;\n\n    //Ensure humidity remains between 0 and 100 %\n    humidity = Math.max(0, Math.min(100, humidity));\n\n    //Round humidity to two decimal places\n    humidity = parseFloat(humidity.toFixed(2));\n\n    return humidity.toString();         //Convert the number into a string\n}\n\n//Get the temperature from msg.payload and convert it to a number\nvar temperature = parseFloat(msg.payload);\n\n//Generate humidity based on the obtained temperature\nvar humidity = getHumidity(temperature);\n\n//Construct the message to be sent\nvar msg = {\n    payload: humidity       //The numeric value of humidity\n};\n\n//Return the message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 340,
        "wires": [
            [
                "5f3b13e9532413fd",
                "65ee172aa954a09f"
            ]
        ]
    },
    {
        "id": "5f3b13e9532413fd",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "94d4237ffed28447",
        "name": "OutHum",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 400,
        "wires": []
    },
    {
        "id": "44f6578a4ae260a8",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "7765436fbbe8a965",
        "name": "tempOut_MQTT",
        "topic": "train/HVAC/sensors/temperature",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 740,
        "y": 160,
        "wires": []
    },
    {
        "id": "8803e9b39de11412",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "94d4237ffed28447",
        "name": "tempIn_MQTT",
        "topic": "train/HVAC/sensors/temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 340,
        "wires": [
            [
                "bc5bf402ab45a6c0"
            ]
        ]
    },
    {
        "id": "cdc9998346b823b0",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "tempIn_MQTT",
        "topic": "train/HVAC/sensors/temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 640,
        "wires": [
            [
                "3894e24a68b1b670"
            ]
        ]
    },
    {
        "id": "9bf139dbb452a9b9",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "7765436fbbe8a965",
        "name": "OutTemp",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 220,
        "wires": []
    },
    {
        "id": "47f801285439f8c9",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "94d4237ffed28447",
        "name": "humOut_MQTT",
        "topic": "train/HVAC/sensors/humidity",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 1040,
        "y": 340,
        "wires": []
    },
    {
        "id": "dfabce3da39e7af5",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "g": "a73f99817db4d19b",
        "name": "OutDecryptTemp2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 580,
        "wires": []
    },
    {
        "id": "b830a5d903872e25",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "humIn_MQTT",
        "topic": "train/HVAC/sensors/humidity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 900,
        "wires": [
            [
                "27816acf59c2efb2"
            ]
        ]
    },
    {
        "id": "4fde117dc62a2f20",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "g": "a73f99817db4d19b",
        "name": "OutDecryptHum",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 840,
        "wires": []
    },
    {
        "id": "93ac06bc31fb80fc",
        "type": "switch",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "tempSwitch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "btwn",
                "v": "-10",
                "vt": "num",
                "v2": "19",
                "v2t": "num"
            },
            {
                "t": "btwn",
                "v": "19.01",
                "vt": "num",
                "v2": "24",
                "v2t": "num"
            },
            {
                "t": "btwn",
                "v": "24.01",
                "vt": "num",
                "v2": "40",
                "v2t": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 790,
        "y": 640,
        "wires": [
            [
                "44274f7d47749b35",
                "040be6149f1bc242",
                "a68d8c30ebb402ce"
            ],
            [
                "a68d8c30ebb402ce",
                "9b5279255831bc6a",
                "d26f0b6e35b867bb"
            ],
            [
                "fb9440896eec8fe2",
                "303124544b4e10da",
                "a68d8c30ebb402ce"
            ]
        ]
    },
    {
        "id": "44274f7d47749b35",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "tempToStringON",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ON",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 560,
        "wires": [
            [
                "cef6a54250ca6dfa"
            ]
        ]
    },
    {
        "id": "a68d8c30ebb402ce",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "tempToStringON",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ON",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 520,
        "wires": [
            [
                "132cf4576db21d51"
            ]
        ]
    },
    {
        "id": "fb9440896eec8fe2",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "tempToStringOFF",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "OFF",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 640,
        "wires": [
            [
                "cef6a54250ca6dfa"
            ]
        ]
    },
    {
        "id": "27373607da789134",
        "type": "switch",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "humSwitch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "60",
                "vt": "num"
            },
            {
                "t": "lt",
                "v": "60",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 900,
        "wires": [
            [
                "c5850bffa62505cb"
            ],
            [
                "024f25dc4a52ddff"
            ]
        ]
    },
    {
        "id": "c5850bffa62505cb",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "humToStringON",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ON",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 860,
        "wires": [
            [
                "2688558c467b9924"
            ]
        ]
    },
    {
        "id": "795091d7539a8389",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "name": "HVAC",
        "info": "",
        "x": 110,
        "y": 80,
        "wires": []
    },
    {
        "id": "1522e5cdacd6a60f",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "name": "CCTV",
        "info": "",
        "x": 110,
        "y": 4400,
        "wires": []
    },
    {
        "id": "b437502f3630029d",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "78be386e3e43be7c",
        "name": "AirPressureGenerator_1",
        "func": "// Variable to track whether to generate random values between 8 and 9\nvar generateSpecialRandom = false;\n\n// Function to generate a random value between a minimum and maximum value with two decimal places\nfunction generateRandomValue(min, max) {\n    // Check if we should generate special random value\n    if (generateSpecialRandom) {\n        // Generate a random value between 8.00 and 9.00\n        return (Math.random() * (9 - 8) + 8).toFixed(2);\n    } else {\n        // Generate a random value between min and max (10.00 and 12.00)\n        return (Math.random() * (max - min) + min).toFixed(2);\n    }\n}\n\n// Function to simulate the production of compressed air\nfunction simulateAirPressure() {\n    // Toggle generating special random value based on probability\n    if (Math.random() < 0.3) { // Adjust the probability as needed\n        generateSpecialRandom = !generateSpecialRandom; // Toggle the state\n    }\n\n    // Always return a random value\n    return generateRandomValue(10, 12);\n}\n\n// Execute the simulation and obtain the air pressure value\nvar airPressureValue = simulateAirPressure();\n\n// Return the air pressure value for the next node in Node-RED\nreturn { payload: airPressureValue };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2690,
        "y": 760,
        "wires": [
            [
                "274a335ad19c7b5b",
                "7995f7132d677d60",
                "b97d3b8e350a1b04"
            ]
        ]
    },
    {
        "id": "7995f7132d677d60",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "78be386e3e43be7c",
        "name": "OutPres",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2680,
        "y": 700,
        "wires": []
    },
    {
        "id": "1ebf626b94f46cca",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "name": "Doors",
        "info": "",
        "x": 110,
        "y": 1980,
        "wires": []
    },
    {
        "id": "a15b86f029bb9f8f",
        "type": "tcp in",
        "z": "5e7f2b6f6bb048a1",
        "g": "651f9027a2a99147",
        "name": "",
        "server": "server",
        "host": "",
        "port": "2000",
        "datamode": "stream",
        "datatype": "buffer",
        "newline": "",
        "topic": "",
        "trim": false,
        "base64": false,
        "tls": "",
        "x": 140,
        "y": 5180,
        "wires": [
            [
                "e8752796d3397369"
            ]
        ]
    },
    {
        "id": "53fb1e3f720b8e11",
        "type": "tcp out",
        "z": "5e7f2b6f6bb048a1",
        "g": "651f9027a2a99147",
        "name": "",
        "host": "",
        "port": "",
        "beserver": "reply",
        "base64": false,
        "end": false,
        "tls": "",
        "x": 530,
        "y": 5180,
        "wires": []
    },
    {
        "id": "9dbe49c08a6c3ded",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "651f9027a2a99147",
        "name": "Server 2000",
        "info": "",
        "x": 130,
        "y": 5120,
        "wires": []
    },
    {
        "id": "e8752796d3397369",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "651f9027a2a99147",
        "name": "Send message",
        "func": "//Send answer with line break\nmsg.payload = \"This is server 2000\\n\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 5180,
        "wires": [
            [
                "53fb1e3f720b8e11"
            ]
        ]
    },
    {
        "id": "966b3b67caa984d8",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "651f9027a2a99147",
        "name": "Server 2001",
        "info": "",
        "x": 130,
        "y": 5260,
        "wires": []
    },
    {
        "id": "66abbb8ab56d4ca1",
        "type": "tcp in",
        "z": "5e7f2b6f6bb048a1",
        "g": "651f9027a2a99147",
        "name": "",
        "server": "server",
        "host": "",
        "port": "2001",
        "datamode": "stream",
        "datatype": "buffer",
        "newline": "",
        "topic": "",
        "trim": false,
        "base64": false,
        "tls": "",
        "x": 140,
        "y": 5320,
        "wires": [
            [
                "05b0b2b0277145b1"
            ]
        ]
    },
    {
        "id": "b1ee843777592ffe",
        "type": "tcp out",
        "z": "5e7f2b6f6bb048a1",
        "g": "651f9027a2a99147",
        "name": "",
        "host": "",
        "port": "",
        "beserver": "reply",
        "base64": false,
        "end": false,
        "tls": "",
        "x": 530,
        "y": 5320,
        "wires": []
    },
    {
        "id": "05b0b2b0277145b1",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "651f9027a2a99147",
        "name": "Send message",
        "func": "//Send answer with line break\nmsg.payload = \"This is server 2001\\n\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 5320,
        "wires": [
            [
                "b1ee843777592ffe"
            ]
        ]
    },
    {
        "id": "9bc1580d988ce166",
        "type": "tcp request",
        "z": "5e7f2b6f6bb048a1",
        "g": "651f9027a2a99147",
        "name": "",
        "server": "",
        "port": "",
        "out": "time",
        "ret": "string",
        "splitc": "0",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 870,
        "y": 5040,
        "wires": [
            [
                "077aa75b64fdadcb"
            ]
        ]
    },
    {
        "id": "47a966ed770e9738",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "651f9027a2a99147",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "port",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "host",
                "pt": "msg",
                "to": "localhost",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 5040,
        "wires": [
            [
                "9bc1580d988ce166"
            ]
        ]
    },
    {
        "id": "14fa212f859a6a20",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "651f9027a2a99147",
        "name": "Client",
        "info": "",
        "x": 110,
        "y": 4980,
        "wires": []
    },
    {
        "id": "cd97fbd2bfd02a7f",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "3f53c70906b87c79",
        "name": "Speed sensor",
        "func": "//Extract the slider value from the message payload\nvar sliderValue = msg.payload;\n\n//Define the maximum RPM (Revolutions Per Minute)\nvar maxRPM = 1200;\n\n//Calculate the current RPM based on the slider value. The RPM decreases linearly as the slider value increases\nvar currentRPM = maxRPM * (100 - sliderValue) / 100;\n\n//Convert the current RPM to a string\nvar currentRPMString = currentRPM.toString();\n\n//Create a message object to output the current RPM string\nvar msgOut = {\n    payload: currentRPMString                           //Set the current RPM string as the payload of the message\n};\n\n//Return the message containing the current RPM string\nreturn msgOut;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1200,
        "wires": [
            [
                "dccd6e46045ea114",
                "b18acae00c1add85"
            ]
        ]
    },
    {
        "id": "dccd6e46045ea114",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "3f53c70906b87c79",
        "name": "OutSpeed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 1140,
        "wires": []
    },
    {
        "id": "040be6149f1bc242",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "tempToStringOFF",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "OFF",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 720,
        "wires": [
            [
                "6632d2e20db1a583"
            ]
        ]
    },
    {
        "id": "303124544b4e10da",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "tempToStringON",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ON",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 600,
        "wires": [
            [
                "6632d2e20db1a583"
            ]
        ]
    },
    {
        "id": "9b5279255831bc6a",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "tempToStringOFF",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "OFF",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 680,
        "wires": [
            [
                "cef6a54250ca6dfa"
            ]
        ]
    },
    {
        "id": "d26f0b6e35b867bb",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "tempToStringOFF",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "OFF",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 760,
        "wires": [
            [
                "6632d2e20db1a583"
            ]
        ]
    },
    {
        "id": "024f25dc4a52ddff",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "humToStringOFF",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "OFF",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 940,
        "wires": [
            [
                "2688558c467b9924"
            ]
        ]
    },
    {
        "id": "81377bb1a19beb13",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "DoorStatus",
        "func": "var door1;      //Variable to store the state of door1\nvar door2;      //Variable to store the state of door2\nvar temp;       //Temporary variable to store the action to be performed (Open/Close)\n\nvar random = Math.random();     //Generate a random number between 0 and 1\n\n//Check if the received message payload is \"Open\" and the random number is greater than 0.3\nif (msg.payload === \"Open\" && random > 0.3) {\n    door1 = 1;\n    door2 = 1;\n} \n\n//Check if the received message payload is \"Open\" and the random number is less than or equal to 0.3 but greater than 0.2\nelse if (msg.payload === \"Open\" && random <= 0.3 && random > 0.2) {\n    door1 = 0;\n    door2 = 1;\n} \n\n//Check if the received message payload is \"Open\" and the random number is less than or equal to 0.2 but greater than 0.1\nelse if (msg.payload === \"Open\" && random <= 0.2 && random > 0.1) {\n    door1 = 1;\n    door2 = 0;\n} \n\n//Check if the received message payload is \"Open\" and the random number is less than or equal to 0.1\nelse if (msg.payload === \"Open\" && random <= 0.1) {\n    door1 = 0;\n    door2 = 0;\n    temp = \"Open\";\n}\n\n//Check if the received message payload is \"Close\" and the random number is greater than 0.3\nif (msg.payload === \"Close\" && random > 0.3) {\n    door1 = 0;\n    door2 = 0;\n} \n\n//Check if the received message payload is \"Close\" and the random number is less than or equal to 0.3 but greater than 0.2\nelse if (msg.payload === \"Close\" && random <= 0.3 && random > 0.2) {\n    door1 = 0;\n    door2 = 1;\n} \n\n//Check if the received message payload is \"Close\" and the random number is less than or equal to 0.2 but greater than 0.1\nelse if (msg.payload === \"Close\" && random <= 0.2 && random > 0.1) {\n    door1 = 1;\n    door2 = 0;\n} \n\n//Check if the received message payload is \"Close\" and the random number is less than or equal to 0.1\nelse if (msg.payload === \"Close\" && random <= 0.1) {\n    door1 = 1;\n    door2 = 1;\n    temp = \"Close\";\n}\n\n//Create an object to store the door states\nvar payloadObject = { d1: door1, d2: door2 };\n\n//If there's a temporary variable indicating an action (Open/Close), add it to the payload object\nif (temp) {\n    payloadObject.temp = temp;\n}\n\n//Return the payload object\nreturn { payload: payloadObject };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2120,
        "wires": [
            [
                "3e7affe62da67961",
                "cb858b92a7f62927"
            ]
        ]
    },
    {
        "id": "81c0a4984a066bd3",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "OutDoors2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 2060,
        "wires": []
    },
    {
        "id": "3e7affe62da67961",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "DoorState",
        "func": "//Function to verify the state of the doors based on the payload received\nfunction verificaStatoPorte(payload) {\n   \n    //Extracting door states and temporary action from the payload\n    var d1 = payload.d1;\n    var d2 = payload.d2;\n    var temp = payload.temp;\n\n    //Checking if the temporary action is \"Open\" and both doors are closed\n    if (temp === \"Open\" && d1 === 0 && d2 === 0) {\n        return \"Warning! Opening or closing of the doors not done correctly\"; // Return warning message\n    }\n    \n    //Checking if the temporary action is \"Close\" and both doors are opened \n    else if (temp === \"Close\" && d1 === 1 && d2 === 1) {\n        return \"Warning! Opening or closing of the doors not done correctly\"; // Return warning message\n    } \n    \n    //Checking if both doors are opened\n    else if (d1 === 1 && d2 === 1){\n        return \"Doors opened correctly\"; // Return success message\n    } \n    \n    //Checking if both doors are closed\n    else if (d1 === 0 && d2 === 0) {\n        return \"Doors closed correctly\"; // Return success message\n    } \n    \n    //If none of the above conditions are met, return a warning message\n    else{\n        return \"Warning! Opening or closing of the doors not done correctly\";\n    }\n}\n\n//Call the verificaStatoPorte function with the payload and store the result in 'output'\nvar output = verificaStatoPorte(msg.payload);\n\n//Return the output as payload object\nreturn { payload: output };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 2120,
        "wires": [
            [
                "81c0a4984a066bd3",
                "428bbe6fdfbb0954"
            ]
        ]
    },
    {
        "id": "cb858b92a7f62927",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "OutDoors1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 2060,
        "wires": []
    },
    {
        "id": "428bbe6fdfbb0954",
        "type": "switch",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "doorSwitch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Doors opened correctly",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Doors closed correctly",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Warning! Opening or closing of the doors not done correctly",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1090,
        "y": 2120,
        "wires": [
            [
                "3ee9e7eef5e810ac"
            ],
            [
                "c8458254838d4a5c"
            ],
            [
                "fa70917803c481d4"
            ]
        ]
    },
    {
        "id": "3ee9e7eef5e810ac",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "doorToStringOPEN",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "OPEN",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1310,
        "y": 2060,
        "wires": [
            [
                "331b6f044f22bc98",
                "92b6f568652fdb92"
            ]
        ]
    },
    {
        "id": "c8458254838d4a5c",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "doorToStringCLOSE",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "CLOSE",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 2120,
        "wires": [
            [
                "c3ec58fb41397b20",
                "92b6f568652fdb92"
            ]
        ]
    },
    {
        "id": "fa70917803c481d4",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "doorToStringWARNING",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "WARNING",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1330,
        "y": 2180,
        "wires": [
            [
                "a294408de7b6ddf7",
                "92b6f568652fdb92"
            ]
        ]
    },
    {
        "id": "67c9b3038c62d727",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "setTimeoutReset",
        "func": "//Check if the payload of the message is \"Reset\"\nif (msg.payload === \"Reset\") {\n\n    //Return a new Promise that resolves after a delay of 3000 milliseconds (3 seconds)\n    return new Promise(resolve => {\n\n        //setTimeout function is used to delay execution of the code inside the function\n        setTimeout(function() {\n\n            //Inside the setTimeout function, resolve the Promise with an object containing the payload \"Resetting\"\n            resolve({ payload: \"Resetting\" });\n\n        }, 3000);       //Delay set to 3000 milliseconds (3 seconds)\n    });\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2320,
        "wires": [
            [
                "4a089cecd9cb69ea",
                "d47e781b7ce218b3"
            ]
        ]
    },
    {
        "id": "4a089cecd9cb69ea",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "OutResetting",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 2320,
        "wires": []
    },
    {
        "id": "d47e781b7ce218b3",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "doorToStringRESET",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "RESET",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 2380,
        "wires": [
            [
                "46612114b3d42d3a",
                "92b6f568652fdb92"
            ]
        ]
    },
    {
        "id": "7fc21f61ea5633b3",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "checkWarning",
        "func": "//Check if the payload of the message is either \"OPEN\" or \"CLOSE\"\nif (msg.payload === \"OPEN\" || msg.payload === \"CLOSE\") {\n    msg.enabled = false;\n} \n\n//Check if the payload of the message is \"WARNING\"\nelse if (msg.payload === \"WARNING\"){\n    msg.enabled = true;\n}\n\n//Return the modified message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 2720,
        "wires": [
            [
                "a437813d64ae1906"
            ]
        ]
    },
    {
        "id": "6d0f2a721b6e56ca",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "checkReset",
        "func": "//Check if the payload of the message is \"WARNING\"\nif (msg.payload === \"WARNING\") {\n    msg.enabled = false;\n} \n\n//Check if the payload of the message is \"RESET\"\nelse if (msg.payload === \"RESET\"){\n    msg.enabled = true;\n}\n\n//Return the modified message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 2520,
        "wires": [
            [
                "7e8b5561fdeee34e",
                "8f38c93d4d7bd47c"
            ]
        ]
    },
    {
        "id": "4ac90164f6754283",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "LinkOPENIn",
        "links": [
            "331b6f044f22bc98"
        ],
        "x": 75,
        "y": 2660,
        "wires": [
            [
                "7fc21f61ea5633b3"
            ]
        ]
    },
    {
        "id": "331b6f044f22bc98",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "LinkOPENOut",
        "mode": "link",
        "links": [
            "9c61dbfb5693801a",
            "567dcb6ccee512d7",
            "4ac90164f6754283"
        ],
        "x": 1475,
        "y": 2060,
        "wires": []
    },
    {
        "id": "b860a552ed02496a",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "LinkCLOSEIn",
        "links": [
            "c3ec58fb41397b20"
        ],
        "x": 75,
        "y": 2720,
        "wires": [
            [
                "7fc21f61ea5633b3"
            ]
        ]
    },
    {
        "id": "c3ec58fb41397b20",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "LinkCLOSEOut",
        "mode": "link",
        "links": [
            "b860a552ed02496a",
            "9c61dbfb5693801a",
            "567dcb6ccee512d7"
        ],
        "x": 1575,
        "y": 2080,
        "wires": []
    },
    {
        "id": "a294408de7b6ddf7",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "LinkWARNINGOut",
        "mode": "link",
        "links": [
            "4d2221d1dc75be7d",
            "c2d3645b5ac50a6c"
        ],
        "x": 1515,
        "y": 2180,
        "wires": []
    },
    {
        "id": "4d2221d1dc75be7d",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "LinkWARNINGIn",
        "links": [
            "a294408de7b6ddf7"
        ],
        "x": 75,
        "y": 2780,
        "wires": [
            [
                "7fc21f61ea5633b3"
            ]
        ]
    },
    {
        "id": "c2d3645b5ac50a6c",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "LinkWARNINGIn",
        "links": [
            "a294408de7b6ddf7"
        ],
        "x": 75,
        "y": 2460,
        "wires": [
            [
                "6d0f2a721b6e56ca"
            ]
        ]
    },
    {
        "id": "46612114b3d42d3a",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "LinkRESETOut",
        "mode": "link",
        "links": [
            "7821fe3b34341a65"
        ],
        "x": 1115,
        "y": 2380,
        "wires": []
    },
    {
        "id": "7821fe3b34341a65",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "LinkRESETIn",
        "links": [
            "46612114b3d42d3a"
        ],
        "x": 75,
        "y": 2580,
        "wires": [
            [
                "6d0f2a721b6e56ca"
            ]
        ]
    },
    {
        "id": "567dcb6ccee512d7",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "LinkOPENIn",
        "links": [
            "331b6f044f22bc98",
            "c3ec58fb41397b20"
        ],
        "x": 125,
        "y": 2440,
        "wires": [
            [
                "3512b6455cb7975f"
            ]
        ]
    },
    {
        "id": "3512b6455cb7975f",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "checkOpen",
        "func": "// Check if the payload of the incoming message is \"OPEN\"\nif (msg.payload === \"OPEN\") {\n    // If the payload is \"OPEN\", set the 'enabled' property of the message object to false\n    msg.enabled = false;\n} \n\n// If the payload is not \"OPEN\", check if it's \"CLOSE\"\nelse if (msg.payload === \"CLOSE\"){\n    // If the payload is \"CLOSE\", set the 'enabled' property of the message object to true\n    msg.enabled = true;\n}\n\n// Return the modified message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 2440,
        "wires": [
            [
                "8f38c93d4d7bd47c"
            ]
        ]
    },
    {
        "id": "9c61dbfb5693801a",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "LinkCLOSEIn",
        "links": [
            "331b6f044f22bc98",
            "c3ec58fb41397b20"
        ],
        "x": 125,
        "y": 2600,
        "wires": [
            [
                "c6c9757adfb2e8b9"
            ]
        ]
    },
    {
        "id": "c6c9757adfb2e8b9",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "checkClose",
        "func": "// Check if the payload of the incoming message is \"CLOSE\"\nif (msg.payload === \"CLOSE\") {\n    // If the payload is \"CLOSE\", set the 'enabled' property of the message object to false\n    msg.enabled = false;\n} \n\n// If the payload is not \"CLOSE\", check if it's \"OPEN\"\nelse if (msg.payload === \"OPEN\"){\n    // If the payload is \"OPEN\", set the 'enabled' property of the message object to true\n    msg.enabled = true;\n}\n\n// Return the modified message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 2600,
        "wires": [
            [
                "7e8b5561fdeee34e"
            ]
        ]
    },
    {
        "id": "f0161c6f.52901",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "3f53c70906b87c79",
        "name": "Pressure sensor",
        "func": "//Retrieve the slider value from the message payload\nvar sliderValue = msg.payload;\n\n//Convert the slider value to pressure by dividing it by 10 and rounding to 2 decimal places\nvar pressure = parseFloat((sliderValue / 10).toFixed(2));\n\n//Convert the pressure value to a string\nvar pressureString = pressure.toString();\n\n//Construct the message object to send\nvar message = {\n    payload: pressureString                                     //Assign the pressure value as a string to the payload of the message\n};\n\n//Return the message object containing the pressure value as a string\nreturn message;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1360,
        "wires": [
            [
                "4a9d87e5.0c67d4",
                "5f1d6b9f3e8ac8b4"
            ]
        ]
    },
    {
        "id": "4a9d87e5.0c67d4",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "3f53c70906b87c79",
        "name": "OutPres",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 1420,
        "wires": []
    },
    {
        "id": "f3ff8e909aa72165",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "Create Table",
        "query": "CREATE TABLE train_PIS (\n    id SERIAL PRIMARY KEY,\n    train_id VARCHAR(50) NOT NULL,\n    destination VARCHAR(100),\n    departure_time TIME,\n    arrival_time TIME,  \n    distance_in_km INTEGER,\n    seats_available INTEGER\n);",
        "postgreSQLConfig": "7be4bf338dc7386f",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 590,
        "y": 3360,
        "wires": [
            [
                "55ffe37f65c92f61"
            ]
        ]
    },
    {
        "id": "e6dec8b84864699e",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Set",
        "payloadType": "str",
        "x": 150,
        "y": 3360,
        "wires": [
            [
                "f3ff8e909aa72165"
            ]
        ]
    },
    {
        "id": "55ffe37f65c92f61",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "g": "db162c2f42040dd8",
        "name": "OutTable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 3460,
        "wires": []
    },
    {
        "id": "2ee10725a95074e2",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "Create Table Manually",
        "info": "",
        "x": 360,
        "y": 3340,
        "wires": []
    },
    {
        "id": "05eb2572b17656f9",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "Drop Table",
        "query": "DROP TABLE train_PIS;",
        "postgreSQLConfig": "7be4bf338dc7386f",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 590,
        "y": 3460,
        "wires": [
            [
                "55ffe37f65c92f61"
            ]
        ]
    },
    {
        "id": "011d8e8a0eda6511",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Remove",
        "payloadType": "str",
        "x": 140,
        "y": 3460,
        "wires": [
            [
                "05eb2572b17656f9"
            ]
        ]
    },
    {
        "id": "3615a1b70fb63480",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "Delete Table Manually",
        "info": "",
        "x": 360,
        "y": 3440,
        "wires": []
    },
    {
        "id": "09a59ec5d9fb1922",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "Insert Row",
        "query": "INSERT INTO train_PIS (train_id, destination, departure_time, arrival_time, distance_in_km, seats_available) \nVALUES ('T456', 'Milano', TIME '14:00:00', NULL, 0, NULL);\n\nINSERT INTO train_PIS (train_id, destination, departure_time, arrival_time, distance_in_km, seats_available) \nVALUES ('T456', 'Bologna', TIME '15:10:00', TIME '15:04:00', 215, NULL);\n\nINSERT INTO train_PIS (train_id, destination, departure_time, arrival_time, distance_in_km, seats_available) \nVALUES ('T456', 'Roma', TIME '16:50:00', TIME '16:43:00', 525, NULL);\n\nINSERT INTO train_PIS (train_id, destination, departure_time, arrival_time, distance_in_km, seats_available) \nVALUES ('T456', 'Napoli', NULL, TIME '17:47:00', 715, NULL);",
        "postgreSQLConfig": "7be4bf338dc7386f",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 590,
        "y": 3560,
        "wires": [
            [
                "55ffe37f65c92f61"
            ]
        ]
    },
    {
        "id": "3b19453665ce041b",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Set",
        "payloadType": "str",
        "x": 150,
        "y": 3560,
        "wires": [
            [
                "09a59ec5d9fb1922"
            ]
        ]
    },
    {
        "id": "5a3dd2a43899f6ac",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "Set Row Manually",
        "info": "",
        "x": 350,
        "y": 3540,
        "wires": []
    },
    {
        "id": "ec89984726f2b64f",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "Read All Data",
        "query": "SELECT * FROM train_PIS ORDER BY id;",
        "postgreSQLConfig": "7be4bf338dc7386f",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 3660,
        "wires": [
            [
                "b6a14f2b51b13c1b"
            ]
        ]
    },
    {
        "id": "e876fb603b939c9a",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Set",
        "payloadType": "str",
        "x": 150,
        "y": 3660,
        "wires": [
            [
                "ec89984726f2b64f"
            ]
        ]
    },
    {
        "id": "5b80c6863c57503f",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "Read All",
        "info": "",
        "x": 360,
        "y": 3640,
        "wires": []
    },
    {
        "id": "274a335ad19c7b5b",
        "type": "switch",
        "z": "5e7f2b6f6bb048a1",
        "g": "78be386e3e43be7c",
        "name": "presSwitch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "9",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2930,
        "y": 760,
        "wires": [
            [
                "332824b1058cd8ea"
            ],
            [
                "48f4b0dcd6f8e461"
            ]
        ]
    },
    {
        "id": "332824b1058cd8ea",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "78be386e3e43be7c",
        "name": "pressToStringINPRESSURE",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "IN PRESSURE",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3180,
        "y": 700,
        "wires": [
            [
                "fc9b0793b2532b99",
                "77d12e131f81d090"
            ]
        ]
    },
    {
        "id": "48f4b0dcd6f8e461",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "78be386e3e43be7c",
        "name": "pressToStringALERT",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ALERT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3160,
        "y": 820,
        "wires": [
            [
                "77d12e131f81d090",
                "fc9b0793b2532b99"
            ]
        ]
    },
    {
        "id": "0c6ee290bad1d1fa",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "name": "Pneumatic Braking System",
        "info": "",
        "x": 170,
        "y": 1060,
        "wires": []
    },
    {
        "id": "559559f94d87a45a",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "name": "PIS",
        "info": "",
        "x": 110,
        "y": 3260,
        "wires": []
    },
    {
        "id": "446d629130739e68",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "3f53c70906b87c79",
        "name": "Temperature sensor",
        "func": "//Extract the slider value from the message payload\nvar sliderValue = msg.payload;\n\n//Variable to store the calculated temperature increase\nvar temperatureIncrease;\n\n//Calculate the temperature increase based on the slider value\nif (sliderValue <= 65) {\n    //If slider value is less than or equal to 65, calculate temperature increase using the formula\n    temperatureIncrease = (sliderValue * 6) + 20; \n} \nelse {\n    //If slider value is greater than 65, calculate temperature increase using a different formula\n    temperatureIncrease = ((65 * 6) + 20) + ((sliderValue - 65) * 10);  \n}\n\n//Create a message object with the calculated temperature increase\nvar message = {\n    payload: temperatureIncrease.toFixed(2)     //Limit temperature increase to two decimal places\n};\n\n//Return the message with the temperature increase value\nreturn message;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1280,
        "wires": [
            [
                "be7197cb9f348bc0",
                "08a40d838d0b67d3"
            ]
        ]
    },
    {
        "id": "be7197cb9f348bc0",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "3f53c70906b87c79",
        "name": "OutTemp",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 1240,
        "wires": []
    },
    {
        "id": "77d12e131f81d090",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "78be386e3e43be7c",
        "name": "AirPressureGenerator_2",
        "func": "//Function to generate a random value between a minimum and maximum value with two decimal places\nfunction generateRandomValue(min, max) {\n    var randomValue = Math.random() * (max - min) + min;        //Generates a random number between min and max\n    return randomValue.toFixed(2);      //Return the result with two decimal places\n}\n\n//Function to simulate the production of compressed air\nfunction simulateAirPressure(shouldProduceRandomNumbers) {\n    if (shouldProduceRandomNumbers === \"ALERT\") {\n        //Generate a random value between 10.00 and 12.00\n        return generateRandomValue(10, 12);\n    } else if (shouldProduceRandomNumbers === \"IN PRESSURE\"){\n        return \"\";\n    }\n}\n\n// Retrieve the switch state from msg.payload\nvar switchState = msg.payload;\n\n// Execute the simulation and obtain the air pressure value based on the switch state\nvar airPressureValue = simulateAirPressure(switchState);\n\n// Return the air pressure value for the next node in Node-RED\nreturn { payload: airPressureValue };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3470,
        "y": 820,
        "wires": [
            [
                "d408a861df3e6792",
                "53e3c1caacfadb03"
            ]
        ]
    },
    {
        "id": "3b1c1aafff787e4c",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "78be386e3e43be7c",
        "name": "pressToStringINPRESSURE",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "IN PRESSURE",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 4000,
        "y": 800,
        "wires": [
            [
                "4c9141add671e16e"
            ]
        ]
    },
    {
        "id": "8652a1373b0ab88b",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "name": "Auto-coupler",
        "info": "",
        "x": 130,
        "y": 1540,
        "wires": []
    },
    {
        "id": "5875c0c9cd67d92f",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "954cba7529ac09c6",
        "name": "Speed sensor",
        "func": "//Generate a random speed between 0 and 300\nvar speed = Math.random() * 300; \n\n//Check if the speed is greater than 5\nif (speed > 5) {\n    //If speed is greater than 5, set 'enabled' property of 'msg' to false\n    msg.enabled = false; \n} else {\n    //If speed is not greater than 5, set 'enabled' property of 'msg' to true\n    msg.enabled = true;  \n}\n\n//Limit the number of decimal places to two for the speed\nspeed = speed.toFixed(2);\n\n//Create separate message objects for speed and enabled status\nvar msgSpeed = { payload: speed };                          //Message object for speed\nvar msgEnabled = { enabled: msg.enabled };                  //Message object for enabled status\n\n//Return an array containing both message objects\nreturn [msgSpeed, msgEnabled];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1680,
        "wires": [
            [
                "09ed15d97467b8ee",
                "c9a37803a88d9568"
            ],
            [
                "5ac966d6d2bb6807"
            ]
        ]
    },
    {
        "id": "09ed15d97467b8ee",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "g": "954cba7529ac09c6",
        "name": "OutSpeed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 230,
        "y": 1620,
        "wires": []
    },
    {
        "id": "2fed1fd94433ecba",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "954cba7529ac09c6",
        "name": "couplerToStringCOUPLED",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "COUPLED",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1240,
        "y": 1740,
        "wires": [
            [
                "4feeff97524f2c61"
            ]
        ]
    },
    {
        "id": "e7b28b0825deeb8e",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "954cba7529ac09c6",
        "name": "couplerToStringUNCOUPLED",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "UNCOUPLED",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1250,
        "y": 1800,
        "wires": [
            [
                "4feeff97524f2c61"
            ]
        ]
    },
    {
        "id": "91d7a5da65aabf2a",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "954cba7529ac09c6",
        "name": "CouplerSensorChecker",
        "func": "//Function to generate sensor data based on the previous node value\nfunction generateSensorData(msg) {\n    //Save the value received in the message payload to a variable\n    var previousNodeValue = msg.payload;\n\n    //Generate randomly either 0 or 1 for proximity sensor\n    var proximityValue = Math.round(Math.random());\n    console.log(proximityValue);\n\n    //Function to simulate air pressure production\n    function simulateAirPressure() {\n        var value;\n        //Generate a random value using the Box-Muller algorithm limited between 0 and 150, with a mean of 90 and a standard deviation of 50\n        do {\n            var u1 = Math.random();\n            var u2 = Math.random();\n            var z0 = Math.sqrt(-2.0 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);\n            value = z0 * 50 + 90;\n        } while (value < 0 || value > 150);\n\n        //Limit the value to two decimal places\n        return parseFloat(value.toFixed(2));\n    }\n\n    //Execute the simulation and obtain the air pressure value\n    var airPressureValue = simulateAirPressure();\n    console.log(airPressureValue);\n\n    //Check conditions based on the previous node value\n    if (previousNodeValue === \"Coupled\") {\n        //If the previous value is \"Coupled\", check the conditions\n        if (airPressureValue >= 100 && proximityValue === 0) {\n            var result = \"Coupled correctly\";\n        } else {\n            var result = \"Error! Inconsistent pressure value or inconsistent proximity state\";\n        }\n    } else if (previousNodeValue === \"Uncoupled\"){\n        //If the previous value is \"Uncoupled\", check the conditions\n        if (airPressureValue < 100 && proximityValue === 1) {\n            var result = \"Uncoupled correctly\";\n        } else {\n            var result = \"Error! Inconsistent pressure value or inconsistent proximity state\";\n        }\n    }\n\n    //Return the previous node value and the result\n    return {\n        previousValue: previousNodeValue,\n        payload: result\n    };\n}\n\n//Execute the function to generate sensor data\nvar sensorData = generateSensorData(msg);\n\n//Return the sensor data message\nreturn sensorData;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1800,
        "wires": [
            [
                "d56f5557e57d0fdd",
                "520c595ab49234b0"
            ]
        ]
    },
    {
        "id": "d56f5557e57d0fdd",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "954cba7529ac09c6",
        "name": "OutCheck",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 1740,
        "wires": []
    },
    {
        "id": "d5a10bd27cd37e57",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "name": "Power electronics",
        "info": "",
        "x": 150,
        "y": 5440,
        "wires": []
    },
    {
        "id": "25023b8ad31a538e",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "name": "VCU",
        "info": "",
        "x": 110,
        "y": 2900,
        "wires": []
    },
    {
        "id": "520c595ab49234b0",
        "type": "switch",
        "z": "5e7f2b6f6bb048a1",
        "g": "954cba7529ac09c6",
        "name": "couplerSwitch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Coupled correctly",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Uncoupled correctly",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Error! Inconsistent pressure value or inconsistent proximity state",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 980,
        "y": 1800,
        "wires": [
            [
                "2fed1fd94433ecba"
            ],
            [
                "e7b28b0825deeb8e"
            ],
            [
                "d3aa25042a0cf765"
            ]
        ]
    },
    {
        "id": "d3aa25042a0cf765",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "954cba7529ac09c6",
        "name": "couplerToStringERROR",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ERROR",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1230,
        "y": 1860,
        "wires": [
            [
                "4feeff97524f2c61"
            ]
        ]
    },
    {
        "id": "d8dd5bb40cfb6dd5",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "LinkHVACOut",
        "mode": "link",
        "links": [
            "3596dcd32acc33e6",
            "41ec75701fb29729",
            "48748e11e5de8dfa",
            "9fc207dc49d59fa4",
            "a2851de75a5a54ea",
            "6f79bb7d99ee77c7",
            "c3578962cae66d75"
        ],
        "x": 1235,
        "y": 5560,
        "wires": []
    },
    {
        "id": "3354e1d867805456",
        "type": "switch",
        "z": "5e7f2b6f6bb048a1",
        "g": "2c4fd2f10189163c",
        "name": "VCUSwitch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 3060,
        "wires": [
            [
                "f535150a394f1266",
                "5c01f1a17ed544b1"
            ],
            [
                "74f5ec594c0806fc",
                "9fdb91af62bc402f"
            ]
        ]
    },
    {
        "id": "f535150a394f1266",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "2c4fd2f10189163c",
        "name": "readPositiveSlider",
        "func": "//Read the slider value\nvar sliderValue = msg.payload;\n\n//Set the payload to the slider value\nmsg.payload = sliderValue.toString();       //Convert the slider value to a string\n\n//Return the message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 3020,
        "wires": [
            [
                "0c2c3678b6085885"
            ]
        ]
    },
    {
        "id": "74f5ec594c0806fc",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "2c4fd2f10189163c",
        "name": "readNegativeSlider",
        "func": "//Read the slider value\nvar sliderValue = msg.payload;\n\n//Take the absolute value of the slider value\nsliderValue = Math.abs(sliderValue);\n\n//Convert the absolute value to a string\nsliderValue = sliderValue.toString();\n\n//Set the payload to the absolute value of the slider\nmsg.payload = sliderValue;\n\n//Return the message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 3100,
        "wires": [
            [
                "a54243f40d5ffb7d"
            ]
        ]
    },
    {
        "id": "5c01f1a17ed544b1",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "2c4fd2f10189163c",
        "name": "VCUToNumber0",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 2980,
        "wires": [
            [
                "a54243f40d5ffb7d"
            ]
        ]
    },
    {
        "id": "9fdb91af62bc402f",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "2c4fd2f10189163c",
        "name": "VCUToNumber0",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 3140,
        "wires": [
            [
                "0c2c3678b6085885"
            ]
        ]
    },
    {
        "id": "6ef60241e32ab392",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "NextDestinationRemainingTime",
        "func": "function calculateTimeRemaining(currentKilometer, totalDistance, averageSpeed) {\n    var kilometersRemaining;\n    var nextDestination;\n\n    //Switch statement to determine the next destination based on the current kilometer\n    switch (true) {\n        case (currentKilometer === 0):\n            kilometersRemaining = 215 - currentKilometer;\n            nextDestination = \"Current stop: Milano. Next stop: Bologna. Expected arrival in \" + calculateTime(kilometersRemaining, averageSpeed);\n            break;\n        case (currentKilometer < 215):\n            kilometersRemaining = 215 - currentKilometer;\n            nextDestination = \"Next stop: Bologna. Expected arrival in \" + calculateTime(kilometersRemaining, averageSpeed);\n            break;\n        case (currentKilometer === 215):\n            kilometersRemaining = 525 - currentKilometer;\n            nextDestination = \"Current stop: Bologna. Next stop: Roma. Expected arrival in \" + calculateTime(kilometersRemaining, averageSpeed);\n            break;\n        case (currentKilometer < 525):\n            kilometersRemaining = 525 - currentKilometer;\n            nextDestination = \"Next stop: Roma. Expected arrival in \" + calculateTime(kilometersRemaining, averageSpeed);\n            break;\n        case (currentKilometer === 525):\n            kilometersRemaining = 715 - currentKilometer;\n            nextDestination = \"Current stop: Roma. Next stop: Napoli. Expected arrival in \" + calculateTime(kilometersRemaining, averageSpeed);\n            break;\n        case (currentKilometer < 715):\n            kilometersRemaining = 715 - currentKilometer;\n            nextDestination = \"Next stop: Napoli. Expected arrival in  \" + calculateTime(kilometersRemaining, averageSpeed);\n            break;\n        case (currentKilometer >= 715):\n            kilometersRemaining = 0;\n            nextDestination = \"Final stop: Napoli\";\n        //default:\n\n    }\n\n    return nextDestination;     //Return the next destination with expected arrival time\n}\n\nfunction calculateTime(kilometersRemaining, averageSpeed) {\n    var hoursRemaining = Math.floor(kilometersRemaining / averageSpeed);\n    var minutesRemaining = Math.round((kilometersRemaining / averageSpeed - hoursRemaining) * 60);\n\n    //Check if minutes exceed 60 and convert part of the minutes to hours\n    if (minutesRemaining >= 60) {\n        var additionalHours = Math.floor(minutesRemaining / 60);\n        hoursRemaining += additionalHours;\n        minutesRemaining -= additionalHours * 60;\n    }\n\n    return hoursRemaining + \" hours and \" + minutesRemaining + \" minutes\";      //Return the remaining time as hours and minutes\n}\n\n//Retrieve current kilometer from msg.payload\nvar currentKilometer = parseFloat(msg.payload);\n\n//Configuration variables\nvar totalDistance = 715;        //Total distance of the journey in kilometers\nvar averageSpeed = 200;         //Average speed of the journey in km/h\n\n//Calculate the next destination and expected arrival time\nvar nextDestination = calculateTimeRemaining(currentKilometer, totalDistance, averageSpeed);\n\n//Set the payload of the message to the next destination with expected arrival time\nmsg.payload = nextDestination;\n\n//Return the modified message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 4220,
        "wires": [
            [
                "0680e6034f9215f5",
                "a18fcd23f7fb86a6",
                "3c96f5a8a89c7827"
            ]
        ]
    },
    {
        "id": "0680e6034f9215f5",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "OutDestinationTime",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 4160,
        "wires": []
    },
    {
        "id": "1f28eb4f0d139824",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "LinkVCUOut",
        "mode": "link",
        "links": [
            "3419d3043a1c8ab9",
            "c2d5734c2a51be96",
            "c3d5e733eb9e343b",
            "ca278afe04671750",
            "22ea7ec1e45148b3",
            "36ab6804098e85fa"
        ],
        "x": 815,
        "y": 5720,
        "wires": []
    },
    {
        "id": "7d934798cc2e5f08",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "LinkPBSOut",
        "mode": "link",
        "links": [
            "15c20935dd38ff72",
            "42b224a610e51650",
            "5388f20b38f5e1c2",
            "7ca756cbd0ef1063",
            "9eed03cee27e9be4",
            "5c89c0be1283a8eb"
        ],
        "x": 815,
        "y": 5640,
        "wires": []
    },
    {
        "id": "8f2c66708c047167",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "RandomPresenceDeparture",
        "func": "//Generate a random number between 1 and 80 to simulate the number of people present\nvar numPresence = Math.floor(Math.random() * 80) + 1; \n\n//Generate a random number between 1 and half of the number of people present to simulate departures\nvar numDepartures = Math.floor(Math.random() * Math.floor(numPresence / 2)) + 1; \n\n//Array to hold the simulated presence and departure data\nvar simulatedData = [];\n\n//Simulate presence by adding objects with 'presenceDetected' set to true to the array\nfor (var i = 0; i < numPresence; i++) {\n    simulatedData.push({ presenceDetected: true });\n}\n\n//Simulate departures by adding objects with 'presenceDetected' set to false to the array\nfor (var j = 0; j < numDepartures; j++) {\n    simulatedData.push({ presenceDetected: false });\n}\n\n//Set the payload of the message to the simulated data\nmsg.payload = simulatedData;\n\n//Return the modified message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 4580,
        "wires": [
            [
                "e9aa5fa77aa00fb7"
            ]
        ]
    },
    {
        "id": "e9aa5fa77aa00fb7",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "PresenceDetectorMilano",
        "func": "//Initialize a variable to count the number of people detected\nvar personCount = 0;\n\n//Iterate through each data object in the payload array\nmsg.payload.forEach(function (data) {\n    //If presence is detected in the current data object\n    if (data.presenceDetected) {\n        //Increment the person count by 1, limiting it to a maximum of 100\n        personCount = Math.min(personCount + 1, 100);\n    } else {\n        //If no presence is detected, decrement the person count by 1, but not less than 0\n        personCount = Math.max(personCount - 1, 0);\n    }\n});\n\n//Convert the person count to a string\nvar personCountString = personCount.toString();\n\n//Create a new message object containing the updated person count\nvar newMsg = { payload: personCountString };\n\n//Return the new message object\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 4580,
        "wires": [
            [
                "ee48ec6e4d9dcf74",
                "fc726dac6e4b1e41"
            ]
        ]
    },
    {
        "id": "ee48ec6e4d9dcf74",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "OutMilano",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 4580,
        "wires": []
    },
    {
        "id": "21dca98e33c9e8ee",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "name": "Wi-fi",
        "info": "",
        "x": 110,
        "y": 4900,
        "wires": []
    },
    {
        "id": "5db6988f59f3f049",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "CurrentStopControl",
        "func": "//Function to check if the input matches any of the specified formats\nfunction checkDestinationFormat(inputText) {\n    //Array of expected formats with corresponding return strings\n    const expectedFormats = {\n        \"Current stop: Milano. Next stop: Bologna. Expected arrival in\": \"Milano\",\n        \"Current stop: Bologna. Next stop: Roma. Expected arrival in\": \"Bologna\",\n        \"Current stop: Roma. Next stop: Napoli. Expected arrival in\": \"Roma\",\n        \"Final stop: Napoli\": \"Napoli\"\n    };\n\n    //Check if the input matches any of the expected formats\n    for (const format of Object.keys(expectedFormats)) {\n        if (inputText.includes(format)) {\n            return expectedFormats[format];\n        }\n    }\n    return null;        \n}\n\n//Retrieve input text from msg.payload\nvar inputText = msg.payload;\n\n//Check if the input matches any of the specified formats\nvar result = checkDestinationFormat(inputText);\n\n//Set the payload of the message\nmsg.payload = result;\n\n//Return the modified message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 4620,
        "wires": [
            [
                "ba1fd6a1dd32800f"
            ]
        ]
    },
    {
        "id": "ba1fd6a1dd32800f",
        "type": "switch",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "currentStopSwitch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Milano",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Napoli",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Bologna",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Roma",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 930,
        "y": 4620,
        "wires": [
            [
                "8f2c66708c047167"
            ],
            [
                "15a0cd1505475dec"
            ],
            [
                "323ba6faaded07fd"
            ],
            [
                "7b0513642f675e1b"
            ],
            [
                "0b86e50fa487844b"
            ]
        ]
    },
    {
        "id": "15a0cd1505475dec",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "ZeroGenerator",
        "func": "//Define a function named 'alwaysZero' that returns 0\nfunction alwaysZero() {\n    return 0;\n}\n\n//Call the 'alwaysZero' function and store the result in the 'result' variable\nvar result = alwaysZero();\n\n//Convert the result to a string\nvar resultString = result.toString();\n\n//Set the payload of the message to the value returned by the 'alwaysZero' function\nmsg.payload = resultString;\n\n//Return the modified message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 4540,
        "wires": [
            [
                "cb7bfe58f10d77f4"
            ]
        ]
    },
    {
        "id": "b18357d64f5991a9",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "UpdateMilanoTable",
        "query": "UPDATE train_PIS SET seats_available = 100 - {{msg.payload}} WHERE destination = 'Milano';",
        "postgreSQLConfig": "7be4bf338dc7386f",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 750,
        "y": 3760,
        "wires": [
            [
                "d5baf28de2dd5098"
            ]
        ]
    },
    {
        "id": "1e92d912d8255312",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "PresenceDetectorRoma",
        "func": "//Initialize a variable to count the number of people detected\nvar personCount = 0;\n\n//Iterate through each data object in the payload array\nmsg.payload.forEach(function (data) {\n    //If presence is detected in the current data object\n    if (data.presenceDetected) {\n        //Increment the person count by 1, limiting it to a maximum of 100\n        personCount = Math.min(personCount + 1, 100);\n    } else {\n        //If no presence is detected, decrement the person count by 1, but not less than 0\n        personCount = Math.max(personCount - 1, 0);\n    }\n});\n\n//Convert the person count to a string\nvar personCountString = personCount.toString();\n\n//Create a new message object containing the updated person count\nvar newMsg = { payload: personCountString };\n\n//Return the new message object\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 4680,
        "wires": [
            [
                "e7dd2e5163da0b13",
                "08e36de9db41f63a"
            ]
        ]
    },
    {
        "id": "7b0513642f675e1b",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "RandomPresenceDeparture",
        "func": "//Generate a random number between 1 and 80 to simulate the number of people present\nvar numPresence = Math.floor(Math.random() * 80) + 1; \n\n//Generate a random number between 1 and half of the number of people present to simulate departures\nvar numDepartures = Math.floor(Math.random() * Math.floor(numPresence / 2)) + 1; \n\n//Array to hold the simulated presence and departure data\nvar simulatedData = [];\n\n//Simulate presence by adding objects with 'presenceDetected' set to true to the array\nfor (var i = 0; i < numPresence; i++) {\n    simulatedData.push({ presenceDetected: true });\n}\n\n//Simulate departures by adding objects with 'presenceDetected' set to false to the array\nfor (var j = 0; j < numDepartures; j++) {\n    simulatedData.push({ presenceDetected: false });\n}\n\n//Set the payload of the message to the simulated data\nmsg.payload = simulatedData;\n\n//Return the modified message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 4680,
        "wires": [
            [
                "1e92d912d8255312"
            ]
        ]
    },
    {
        "id": "cc921cafce48d2f7",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "UpdateNapoliTable",
        "query": "UPDATE train_PIS SET seats_available = 100 - {{msg.payload}} WHERE destination = 'Napoli';",
        "postgreSQLConfig": "7be4bf338dc7386f",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 750,
        "y": 4080,
        "wires": [
            [
                "d5baf28de2dd5098"
            ]
        ]
    },
    {
        "id": "54245d13a6853f0c",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "UpdateRomaTable",
        "query": "UPDATE train_PIS SET seats_available = 100 - {{msg.payload}} WHERE destination = 'Roma';",
        "postgreSQLConfig": "7be4bf338dc7386f",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 750,
        "y": 3980,
        "wires": [
            [
                "d5baf28de2dd5098"
            ]
        ]
    },
    {
        "id": "e7dd2e5163da0b13",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "OutRoma",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 4780,
        "wires": []
    },
    {
        "id": "323ba6faaded07fd",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "RandomPresenceDeparture",
        "func": "//Generate a random number between 1 and 80 to simulate the number of people present\nvar numPresence = Math.floor(Math.random() * 80) + 1;\n\n//Generate a random number between 1 and half of the number of people present to simulate departures\nvar numDepartures = Math.floor(Math.random() * Math.floor(numPresence / 2)) + 1;\n\n//Array to hold the simulated presence and departure data\nvar simulatedData = [];\n\n//Simulate presence by adding objects with 'presenceDetected' set to true to the array\nfor (var i = 0; i < numPresence; i++) {\n    simulatedData.push({ presenceDetected: true });\n}\n\n//Simulate departures by adding objects with 'presenceDetected' set to false to the array\nfor (var j = 0; j < numDepartures; j++) {\n    simulatedData.push({ presenceDetected: false });\n}\n\n//Set the payload of the message to the simulated data\nmsg.payload = simulatedData;\n\n//Return the modified message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 4640,
        "wires": [
            [
                "3596792057b1378a"
            ]
        ]
    },
    {
        "id": "3596792057b1378a",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "PresenceDetectorBologna",
        "func": "//Initialize a variable to count the number of people detected\nvar personCount = 0;\n\n//Iterate through each data object in the payload array\nmsg.payload.forEach(function (data) {\n    //If presence is detected in the current data object\n    if (data.presenceDetected) {\n        //Increment the person count by 1, limiting it to a maximum of 100\n        personCount = Math.min(personCount + 1, 100);\n    } else {\n        //If no presence is detected, decrement the person count by 1, but not less than 0\n        personCount = Math.max(personCount - 1, 0);\n    }\n});\n\n//Convert the person count to a string\nvar personCountString = personCount.toString();\n\n//Create a new message object containing the updated person count\nvar newMsg = { payload: personCountString };\n\n//Return the new message object\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 4640,
        "wires": [
            [
                "7352ce7cdfefb561",
                "e7aa8347e88543a9"
            ]
        ]
    },
    {
        "id": "0e5c775ca8e3479b",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "UpdateBolognaTable",
        "query": "UPDATE train_PIS SET seats_available = 100 - {{msg.payload}} WHERE destination = 'Bologna';",
        "postgreSQLConfig": "7be4bf338dc7386f",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 760,
        "y": 3860,
        "wires": [
            [
                "d5baf28de2dd5098"
            ]
        ]
    },
    {
        "id": "7352ce7cdfefb561",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "OutBologna",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 4680,
        "wires": []
    },
    {
        "id": "d5baf28de2dd5098",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "g": "db162c2f42040dd8",
        "name": "OutUpdate",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 3920,
        "wires": []
    },
    {
        "id": "d7ca9aa7144d69c6",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "LinkPISOut",
        "mode": "link",
        "links": [
            "ac256ba765121fb3",
            "b36a218d125ad567",
            "ca8f94f614fcd80e",
            "6e9034d05df6fae9",
            "e1d6aa7dc96583a8",
            "a457f10d59d01482",
            "b6785d1893f3db79",
            "cd0ff77db60295ef",
            "db75adf8180d98bf"
        ],
        "x": 815,
        "y": 5780,
        "wires": []
    },
    {
        "id": "ee325e59ccfd486d",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "LinkDoorsOut",
        "mode": "link",
        "links": [
            "42107b274a5c3c12",
            "c5a593b5ae054463",
            "ceb18ef3c7120a22",
            "a00c7732a9b3edb2",
            "05ccccf8fe245349",
            "e9a3b734e1c07a30",
            "d58d79ba43db132e",
            "ac306dfa218c2a0d",
            "38a29d38800ceb95"
        ],
        "x": 825,
        "y": 5600,
        "wires": []
    },
    {
        "id": "7b01e457fd08a07a",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "LinkWi-fiOut",
        "mode": "link",
        "links": [
            "4d3186df0e6a3d5d",
            "5b8a8d6ac5ac91f4",
            "670fb3056433401d",
            "a5f8568f25662390",
            "e3fb63446ae68c8f",
            "010b3ff26449768e"
        ],
        "x": 815,
        "y": 5840,
        "wires": []
    },
    {
        "id": "deeaf0c570c00ad5",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "checkON/OFF",
        "func": "if (msg.payload === \"OFF\") {\n    msg.enabled = false;\n    msg.payload = \"\";\n} \n\nelse if(msg.payload === \"ON\"){\n    msg.enabled = true;\n    msg.payload = \"\";\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 5840,
        "wires": [
            [
                "7b01e457fd08a07a"
            ]
        ]
    },
    {
        "id": "c7f506437e053bb8",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "checkON/OFF",
        "func": "if (msg.payload === \"OFF\") {\n    msg.enabled = false;\n    msg.payload = \"\";\n} \n\nelse if(msg.payload === \"ON\"){\n    msg.enabled = true;\n    msg.payload = \"\";\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 5780,
        "wires": [
            [
                "d7ca9aa7144d69c6"
            ]
        ]
    },
    {
        "id": "2e56dabfdbbb0e90",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "checkON/OFF",
        "func": "if (msg.payload === \"OFF\") {\n    msg.enabled = false;\n    msg.payload = 0;\n} \n\nelse if(msg.payload === \"ON\"){\n    msg.enabled = true;\n    msg.payload = 0;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 5720,
        "wires": [
            [
                "1f28eb4f0d139824"
            ]
        ]
    },
    {
        "id": "b9d36ddff2f21f7d",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "checkON/OFF",
        "func": "if (msg.payload === \"OFF\") {\n    msg.enabled = false;\n    msg.payload = 0;\n    return [msg, null, null]; \n} \n\nelse if (msg.payload === \"ON\") {\n    msg.enabled = true;\n    return [\n        { enabled: true, payload: 0 }, \n        { enabled: true, payload: 20 }, \n        { enabled: true, payload: 1200 } \n    ];\n}",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 5660,
        "wires": [
            [
                "7d934798cc2e5f08"
            ],
            [
                "c690d54ba9df5c68"
            ],
            [
                "0ec0e2978323a79c"
            ]
        ]
    },
    {
        "id": "5dce76f005afa789",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "checkON/OFF",
        "func": "if (msg.payload === \"OFF\") {\n    msg.enabled = false;\n    msg.payload = \"\";\n} \n\nelse if(msg.payload === \"ON\"){\n    msg.enabled = true;\n    msg.payload = \"RESET\";\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 5600,
        "wires": [
            [
                "ee325e59ccfd486d"
            ]
        ]
    },
    {
        "id": "38ab279076eb3e29",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7765436fbbe8a965",
        "name": "RabbitencryptTemp",
        "algorithm": "Rabbit",
        "key": "secretTemp",
        "x": 510,
        "y": 160,
        "wires": [
            [
                "44f6578a4ae260a8"
            ]
        ]
    },
    {
        "id": "bc5bf402ab45a6c0",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "94d4237ffed28447",
        "name": "RabbitdecryptTemp",
        "algorithm": "Rabbit",
        "key": "secretTemp",
        "x": 350,
        "y": 340,
        "wires": [
            [
                "5d96dfc4d720e4a9",
                "d506d4447b9e07e8"
            ]
        ]
    },
    {
        "id": "0ef91c4c3c88285a",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "tempIn_MQTT",
        "topic": "train/HVAC/sensors/temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3170,
        "y": 1460,
        "wires": [
            [
                "fb7bd483e68eea12"
            ]
        ]
    },
    {
        "id": "fb7bd483e68eea12",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitdecryptTemp",
        "algorithm": "Rabbit",
        "key": "secretTemp",
        "x": 3390,
        "y": 1460,
        "wires": [
            [
                "bfc0a0527e4ad4e1",
                "167bc84078bf5927"
            ]
        ]
    },
    {
        "id": "65ee172aa954a09f",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "94d4237ffed28447",
        "name": "RabbitencryptTemp",
        "algorithm": "Rabbit",
        "key": "secretHum",
        "x": 810,
        "y": 340,
        "wires": [
            [
                "47f801285439f8c9"
            ]
        ]
    },
    {
        "id": "e7d2d35b04a1649e",
        "type": "ui_chart",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Temperature trend",
        "group": "599d7d1a7facb952",
        "order": 2,
        "width": 7,
        "height": 6,
        "label": "Temperature trend",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-10",
        "ymax": "40",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 3850,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "6ed3242d8b160163",
        "type": "ui_gauge",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Temperature pointer",
        "group": "599d7d1a7facb952",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Temperature pointer",
        "label": "degrees °C",
        "format": "{{value}}",
        "min": "-10",
        "max": "40",
        "colors": [
            "#002db3",
            "#32e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 3860,
        "y": 1400,
        "wires": []
    },
    {
        "id": "bfc0a0527e4ad4e1",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "StringToNumber",
        "func": "//Extract the temperature value from the incoming message and parse it as a float\nvar temperature = parseFloat(msg.payload);\n\n//Get the current timestamp\nvar currentTimestamp = new Date();\n\n//Separate date and time components from the current timestamp\nvar currentDate = currentTimestamp.toISOString().split('T')[0]; // Extracts the date part\nvar currentHour = currentTimestamp.getHours(); // Extracts hour\nvar currentMinute = currentTimestamp.getMinutes(); // Extracts minute\nvar currentSecond = currentTimestamp.getSeconds(); // Extracts second\nvar milliseconds = currentTimestamp.getMilliseconds(); // Extracts milliseconds\n\n// Concatenate hour, minute, and second into \"hh:mm:ss\" format\nvar currentTime = currentHour + ':' + currentMinute + ':' + currentSecond;\n\n//Create message object 1: Contains only the temperature\nvar msg1 = {\n    payload: temperature.toString() // Convert the temperature value to a string and set it as the payload\n};\n\n//Create message object 2: Contains temperature, date, time, and milliseconds\nvar msg2 = {\n    payload: {\n        temperature: temperature.toString(), // Convert the temperature value to a string\n        date: currentDate, // Set the date part of the timestamp\n        time: currentTime, // Set the time part of the timestamp in \"hh:mm:ss\" format\n        hour: currentHour, // Set the hour part of the timestamp\n        minute: currentMinute, // Set the minute part of the timestamp\n        second: currentSecond, // Set the second part of the timestamp\n        milliseconds: milliseconds // Set the milliseconds\n    }\n};\n\n//Return an array containing both message objects\nreturn [msg1, msg2];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3620,
        "y": 1460,
        "wires": [
            [
                "e7d2d35b04a1649e",
                "6ed3242d8b160163",
                "453706ec6ebc7e1d"
            ],
            [
                "175364d8eb692b6c"
            ]
        ]
    },
    {
        "id": "453706ec6ebc7e1d",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "OutTempNumber2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3590,
        "y": 1400,
        "wires": []
    },
    {
        "id": "27816acf59c2efb2",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "RabbitdecryptHum",
        "algorithm": "Rabbit",
        "key": "secretHum",
        "x": 340,
        "y": 900,
        "wires": [
            [
                "946c1512b19637cb",
                "4fde117dc62a2f20"
            ]
        ]
    },
    {
        "id": "946c1512b19637cb",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "StringToNumber",
        "func": "//Parse the payload value from the incoming message as a floating-point number\nvar numero = parseFloat(msg.payload);\n\n//Create a new message object with the parsed payload\nvar nuovoMsg = {\n    payload: numero\n};\n\n//Return the new message object\nreturn nuovoMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 900,
        "wires": [
            [
                "27373607da789134",
                "362933845b2a33e7"
            ]
        ]
    },
    {
        "id": "5c321e6c77ddd120",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "StringToNumber",
        "func": "//Parse the payload value from the incoming message as a floating-point number\nvar numero = parseFloat(msg.payload);\n\n//Create a new message object with the parsed payload\nvar msg = {\n    payload: numero    \n};\n\n//Return the new message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 640,
        "wires": [
            [
                "93ac06bc31fb80fc",
                "76300c4ed912369c"
            ]
        ]
    },
    {
        "id": "558189b0012e5475",
        "type": "ui_gauge",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Humidity Pointer",
        "group": "7b415ff669cd3403",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Humidity Pointer",
        "label": "percentage % ",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "40",
        "seg2": "60",
        "diff": false,
        "className": "",
        "x": 3600,
        "y": 1640,
        "wires": []
    },
    {
        "id": "9fc207dc49d59fa4",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkHVACIn",
        "links": [
            "d8dd5bb40cfb6dd5",
            "dd087b67f2b2098f",
            "d56b5d0c6d352c24"
        ],
        "x": 3445,
        "y": 1700,
        "wires": [
            [
                "558189b0012e5475"
            ]
        ]
    },
    {
        "id": "d506d4447b9e07e8",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "g": "94d4237ffed28447",
        "name": "OutDecryptTemp",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 400,
        "wires": []
    },
    {
        "id": "76300c4ed912369c",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "OutTempNumber",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 580,
        "wires": []
    },
    {
        "id": "362933845b2a33e7",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "OutHumNumber",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 840,
        "wires": []
    },
    {
        "id": "167bc84078bf5927",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "g": "7e4f3f6309849cff",
        "name": "OutDecryptTemp3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3390,
        "y": 1520,
        "wires": []
    },
    {
        "id": "3894e24a68b1b670",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "RabbitdecryptTemp",
        "algorithm": "Rabbit",
        "key": "secretTemp",
        "x": 350,
        "y": 640,
        "wires": [
            [
                "5c321e6c77ddd120",
                "dfabce3da39e7af5"
            ]
        ]
    },
    {
        "id": "5e5e10b9c68509c6",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "name": "HMI",
        "info": "",
        "x": 3150,
        "y": 1280,
        "wires": []
    },
    {
        "id": "ef6e62decf47a5ab",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "humIn_MQTT",
        "topic": "train/HVAC/sensors/humidity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3170,
        "y": 1640,
        "wires": [
            [
                "85c31a75c5f3be54"
            ]
        ]
    },
    {
        "id": "85c31a75c5f3be54",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitdecryptHum",
        "algorithm": "Rabbit",
        "key": "secretHum",
        "x": 3380,
        "y": 1640,
        "wires": [
            [
                "e18d48063b3f109d",
                "558189b0012e5475"
            ]
        ]
    },
    {
        "id": "e18d48063b3f109d",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "OutDecryptHum2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3390,
        "y": 1580,
        "wires": []
    },
    {
        "id": "3596dcd32acc33e6",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkHVACIn",
        "links": [
            "d8dd5bb40cfb6dd5",
            "dd087b67f2b2098f",
            "d56b5d0c6d352c24"
        ],
        "x": 3425,
        "y": 1980,
        "wires": [
            [
                "b1a434aa04ef9ca5",
                "5a9eca83a5364153",
                "401e2366c1655a11",
                "cf00577cfd95e014"
            ]
        ]
    },
    {
        "id": "b1a434aa04ef9ca5",
        "type": "ui_text",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "group": "9018a94ed6884ab5",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Heating system",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 3620,
        "y": 1920,
        "wires": []
    },
    {
        "id": "5a9eca83a5364153",
        "type": "ui_text",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "group": "9018a94ed6884ab5",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Ventilation System",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 3710,
        "y": 1820,
        "wires": []
    },
    {
        "id": "401e2366c1655a11",
        "type": "ui_text",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "group": "9018a94ed6884ab5",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Cooling System",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 3620,
        "y": 2040,
        "wires": []
    },
    {
        "id": "cf00577cfd95e014",
        "type": "ui_text",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "group": "9018a94ed6884ab5",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "Dehumidification system",
        "label": "Dehumidification system",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 3730,
        "y": 2140,
        "wires": []
    },
    {
        "id": "1c62afd523b406cd",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "ventOut_MQTT",
        "topic": "train/HVAC/control_systems/ventilation",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 1500,
        "y": 520,
        "wires": []
    },
    {
        "id": "132cf4576db21d51",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "RabbitencryptVentilation",
        "algorithm": "Rabbit",
        "key": "secretVent",
        "x": 1250,
        "y": 520,
        "wires": [
            [
                "1c62afd523b406cd"
            ]
        ]
    },
    {
        "id": "cef6a54250ca6dfa",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "RabbitencryptHeating",
        "algorithm": "Rabbit",
        "key": "secretHeat",
        "x": 1260,
        "y": 640,
        "wires": [
            [
                "b10a577522283d82"
            ]
        ]
    },
    {
        "id": "b10a577522283d82",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "heatOut_MQTT",
        "topic": "train/HVAC/control_systems/heating",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 1500,
        "y": 640,
        "wires": []
    },
    {
        "id": "6632d2e20db1a583",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "RabbitencryptCooling",
        "algorithm": "Rabbit",
        "key": "secretCool",
        "x": 1260,
        "y": 760,
        "wires": [
            [
                "178f5401143dcbeb"
            ]
        ]
    },
    {
        "id": "178f5401143dcbeb",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "coolOut_MQTT",
        "topic": "train/HVAC/control_systems/cooling",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 1500,
        "y": 760,
        "wires": []
    },
    {
        "id": "2688558c467b9924",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "RabbitencryptDehumidification",
        "algorithm": "Rabbit",
        "key": "secretDehum",
        "x": 1290,
        "y": 900,
        "wires": [
            [
                "82a9cb32e13e08e7"
            ]
        ]
    },
    {
        "id": "82a9cb32e13e08e7",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "a73f99817db4d19b",
        "name": "dehumOut_MQTT",
        "topic": "train/HVAC/control_systems/dehumidification",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 1570,
        "y": 900,
        "wires": []
    },
    {
        "id": "27e0b0c17d45e9ce",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "ventIn_MQTT",
        "topic": "train/HVAC/control_systems/ventilation",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3170,
        "y": 1820,
        "wires": [
            [
                "3c9dbb0d9ea2ab7b"
            ]
        ]
    },
    {
        "id": "82728f53a329d00d",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "heatIn_MQTT",
        "topic": "train/HVAC/control_systems/heating",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3170,
        "y": 1920,
        "wires": [
            [
                "c9fa843427ed89bf"
            ]
        ]
    },
    {
        "id": "53e10f1eb9ecc569",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "coolIn_MQTT",
        "topic": "train/HVAC/control_systems/cooling",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3170,
        "y": 2040,
        "wires": [
            [
                "ab6daadf1ac959a3"
            ]
        ]
    },
    {
        "id": "a942071ec59de175",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "dehumIn_MQTT",
        "topic": "train/HVAC/control_systems/dehumidification",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3180,
        "y": 2140,
        "wires": [
            [
                "ede536d45227b0dd"
            ]
        ]
    },
    {
        "id": "3c9dbb0d9ea2ab7b",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitdecryptVentilation",
        "algorithm": "Rabbit",
        "key": "secretVent",
        "x": 3410,
        "y": 1820,
        "wires": [
            [
                "5a9eca83a5364153",
                "b8316244d3d92008"
            ]
        ]
    },
    {
        "id": "c9fa843427ed89bf",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitdecryptHeating",
        "algorithm": "Rabbit",
        "key": "secretHeat",
        "x": 3400,
        "y": 1920,
        "wires": [
            [
                "b1a434aa04ef9ca5",
                "9921c7ee54ba50b4"
            ]
        ]
    },
    {
        "id": "ab6daadf1ac959a3",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitdecryptCooling",
        "algorithm": "Rabbit",
        "key": "secretCool",
        "x": 3400,
        "y": 2040,
        "wires": [
            [
                "401e2366c1655a11",
                "648a9041cb17a5e6"
            ]
        ]
    },
    {
        "id": "ede536d45227b0dd",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitdecryptDehumidification",
        "algorithm": "Rabbit",
        "key": "secretDehum",
        "x": 3450,
        "y": 2140,
        "wires": [
            [
                "cf00577cfd95e014",
                "3b222d618cb25f28"
            ]
        ]
    },
    {
        "id": "b8316244d3d92008",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "OutdecryptVent",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3400,
        "y": 1760,
        "wires": []
    },
    {
        "id": "9921c7ee54ba50b4",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "OutdecryptHeat",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3400,
        "y": 1860,
        "wires": []
    },
    {
        "id": "648a9041cb17a5e6",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "OutdecryptCool",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3400,
        "y": 2100,
        "wires": []
    },
    {
        "id": "3b222d618cb25f28",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "OutdecryptDehum",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3430,
        "y": 2200,
        "wires": []
    },
    {
        "id": "058326476f05a87f",
        "type": "file",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "name": "",
        "filename": "/data/DT.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 780,
        "y": 80,
        "wires": [
            [
                "df830809d36ebb38"
            ]
        ]
    },
    {
        "id": "df830809d36ebb38",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "name": "OutTempTimestamp",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 80,
        "wires": []
    },
    {
        "id": "6d3b02028d65373d",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "name": "TemperatureToCSV",
        "func": "// Extract temperature, date, time, hour, minute, second, and milliseconds from the message payload\nvar temperature = msg.payload.temperature;\nvar date = msg.payload.date;\nvar hour = msg.payload.hour;\nvar minute = msg.payload.minute;\nvar second = msg.payload.second;\nvar milliseconds = msg.payload.milliseconds;\nvar time = msg.payload.time; // Aggiunta dell'orario completo\n\n// Define the separator used in the CSV file\nvar separator = \";\";\n\n// Format the data into a CSV row with temperature, date, time, hour, minute, second, and milliseconds separated by the defined separator\nvar csvRow = temperature + separator + date + separator + time + separator + hour + separator + minute + separator + second + separator + milliseconds;\n\n// Update the message payload to contain the CSV row\nmsg.payload = csvRow;\n\n// Return the updated message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 80,
        "wires": [
            [
                "058326476f05a87f"
            ]
        ]
    },
    {
        "id": "f0f0923ad94a53ce",
        "type": "file",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "name": "",
        "filename": "/data/DT.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 4110,
        "y": 1280,
        "wires": [
            [
                "4535b010b1feb97d"
            ]
        ]
    },
    {
        "id": "4535b010b1feb97d",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "name": "OutTempTimestamp2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4400,
        "y": 1280,
        "wires": []
    },
    {
        "id": "175364d8eb692b6c",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "name": "TemperatureToCSV",
        "func": "// Extract temperature, date, time, and milliseconds from the message payload\nvar temperature = msg.payload.temperature;\nvar date = msg.payload.date;\nvar time = msg.payload.time;\nvar hour = msg.payload.hour;\nvar minute = msg.payload.minute;\nvar second = msg.payload.second;\nvar milliseconds = msg.payload.milliseconds;\n\n// Define the separator used in the CSV file\nvar separator = \";\";\n\n// Format the data into a CSV row with temperature, date, time, hour, minute, second, and milliseconds separated by the defined separator\nvar csvRow = separator + temperature + separator + date + separator + time + separator + hour + separator + minute + separator + second + separator + milliseconds;\n\n// Update the message payload to contain the CSV row\nmsg.payload = csvRow;\n\n// Return the updated message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3830,
        "y": 1280,
        "wires": [
            [
                "f0f0923ad94a53ce"
            ]
        ]
    },
    {
        "id": "c126a5d3.83e6f",
        "type": "ui_slider",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Brake",
        "label": "Brake",
        "tooltip": "",
        "group": "d58e4e07fba5af45",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "",
        "topicType": "str",
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "x": 3230,
        "y": 2340,
        "wires": [
            [
                "a07d3882b60cd443"
            ]
        ]
    },
    {
        "id": "15c20935dd38ff72",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkPBSIn",
        "links": [
            "7d934798cc2e5f08",
            "55326d6c3a19023a",
            "4e131c63959c88a8"
        ],
        "x": 3115,
        "y": 2340,
        "wires": [
            [
                "c126a5d3.83e6f"
            ]
        ]
    },
    {
        "id": "21b4d27e20e87f5b",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "HVAC",
        "info": "",
        "x": 3150,
        "y": 1360,
        "wires": []
    },
    {
        "id": "61177bbe79ba9b11",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "PBS",
        "info": "",
        "x": 3150,
        "y": 2280,
        "wires": []
    },
    {
        "id": "5dd93132845977fe",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "brakeOut_MQTT",
        "topic": "train/PBS/system/brake",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 3890,
        "y": 2340,
        "wires": []
    },
    {
        "id": "a34df5293ef1d7ea",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitencryptBrake",
        "algorithm": "Rabbit",
        "key": "secretBrake",
        "x": 3650,
        "y": 2340,
        "wires": [
            [
                "5dd93132845977fe"
            ]
        ]
    },
    {
        "id": "a07d3882b60cd443",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "NumberToString",
        "func": "//Convert the payload to a string\nmsg.payload = msg.payload.toString();\n\n//Return the modified message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3420,
        "y": 2340,
        "wires": [
            [
                "a34df5293ef1d7ea"
            ]
        ]
    },
    {
        "id": "c38b9943a839153a",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "3f53c70906b87c79",
        "name": "brakeIn_MQTT",
        "topic": "train/PBS/system/brake",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 1280,
        "wires": [
            [
                "926d692e06bdc594"
            ]
        ]
    },
    {
        "id": "926d692e06bdc594",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "3f53c70906b87c79",
        "name": "RabbitdecryptBrake",
        "algorithm": "Rabbit",
        "key": "secretBrake",
        "x": 370,
        "y": 1280,
        "wires": [
            [
                "11e275db50fbf6c6"
            ]
        ]
    },
    {
        "id": "11e275db50fbf6c6",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "3f53c70906b87c79",
        "name": "StringToNumber",
        "func": "//Parse the payload value from the incoming message as a floating-point number\nvar numero = parseFloat(msg.payload);\n\n//Create a new message object with the parsed payload\nvar msg = {\n    payload: numero    \n};\n\n//Return the new message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1280,
        "wires": [
            [
                "f8895f9c584c78ab",
                "cd97fbd2bfd02a7f",
                "446d629130739e68",
                "f0161c6f.52901"
            ]
        ]
    },
    {
        "id": "f8895f9c584c78ab",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "3f53c70906b87c79",
        "name": "OutBrakeNumber",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 1340,
        "wires": []
    },
    {
        "id": "5388f20b38f5e1c2",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkPBSIn",
        "links": [
            "7d934798cc2e5f08",
            "55326d6c3a19023a",
            "4e131c63959c88a8"
        ],
        "x": 3305,
        "y": 2600,
        "wires": [
            [
                "693b70533f701c53",
                "308d9070f6f1f31f",
                "178790d634025ad3"
            ]
        ]
    },
    {
        "id": "178790d634025ad3",
        "type": "ui_gauge",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Temperature pointer",
        "group": "d58e4e07fba5af45",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Temperature pointer",
        "label": "°C",
        "format": "{{value}}",
        "min": "20",
        "max": "1000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 3740,
        "y": 2480,
        "wires": []
    },
    {
        "id": "dbffa5609ea8c041",
        "type": "ui_gauge",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RPM indicator",
        "group": "89c8a130fbd067f1",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "donut",
        "title": "RPM indicator",
        "label": "RPM",
        "format": "{{msg.payload}}",
        "min": "0",
        "max": "1500",
        "colors": [
            "#002db3",
            "#32e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 3720,
        "y": 2420,
        "wires": []
    },
    {
        "id": "693b70533f701c53",
        "type": "ui_gauge",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Pressure pointer",
        "group": "d58e4e07fba5af45",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Pressure pointer",
        "label": "bar",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 3720,
        "y": 2540,
        "wires": []
    },
    {
        "id": "b18acae00c1add85",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "3f53c70906b87c79",
        "name": "RabbitencryptSpeedRPM",
        "algorithm": "Rabbit",
        "key": "secretSpeedRPM",
        "x": 1070,
        "y": 1200,
        "wires": [
            [
                "aa6407bd8c3a7b2e"
            ]
        ]
    },
    {
        "id": "aa6407bd8c3a7b2e",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "3f53c70906b87c79",
        "name": "speedRPMOut_MQTT",
        "topic": "train/PBS/sensors/speed",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 1340,
        "y": 1200,
        "wires": []
    },
    {
        "id": "5f1d6b9f3e8ac8b4",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "3f53c70906b87c79",
        "name": "RabbitencryptPressure",
        "algorithm": "Rabbit",
        "key": "secretPressure",
        "x": 1060,
        "y": 1360,
        "wires": [
            [
                "e363f73008c71b8f"
            ]
        ]
    },
    {
        "id": "e363f73008c71b8f",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "3f53c70906b87c79",
        "name": "pressureOut_MQTT",
        "topic": "train/PBS/sensors/pressure",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 1320,
        "y": 1360,
        "wires": []
    },
    {
        "id": "08a40d838d0b67d3",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "3f53c70906b87c79",
        "name": "RabbitencryptTemperature",
        "algorithm": "Rabbit",
        "key": "secretTemperature",
        "x": 1120,
        "y": 1280,
        "wires": [
            [
                "4fb39d377378e75f"
            ]
        ]
    },
    {
        "id": "4fb39d377378e75f",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "3f53c70906b87c79",
        "name": "temperatureOut_MQTT",
        "topic": "train/PBS/sensors/temperature",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 1410,
        "y": 1280,
        "wires": []
    },
    {
        "id": "aaf69a1fa72ab73c",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "speedRPMIn_MQTT",
        "topic": "train/PBS/sensors/speed",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3190,
        "y": 2420,
        "wires": [
            [
                "b7772fb3cf66ac56"
            ]
        ]
    },
    {
        "id": "2e9ddaabdefd9da7",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "temperatureIn_MQTT",
        "topic": "train/PBS/sensors/temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3200,
        "y": 2480,
        "wires": [
            [
                "cef826d3a058d253"
            ]
        ]
    },
    {
        "id": "820d46ef116e5a46",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "pressureIn_MQTT",
        "topic": "train/PBS/sensors/pressure",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3190,
        "y": 2540,
        "wires": [
            [
                "54559d0ffa0d5646"
            ]
        ]
    },
    {
        "id": "b7772fb3cf66ac56",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitdecryptSpeedRPM",
        "algorithm": "Rabbit",
        "key": "secretSpeedRPM",
        "x": 3450,
        "y": 2420,
        "wires": [
            [
                "dbffa5609ea8c041"
            ]
        ]
    },
    {
        "id": "cef826d3a058d253",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitdecryptTemperature",
        "algorithm": "Rabbit",
        "key": "secretTemperature",
        "x": 3480,
        "y": 2480,
        "wires": [
            [
                "178790d634025ad3",
                "31c73d5124c2fa83"
            ]
        ]
    },
    {
        "id": "54559d0ffa0d5646",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitdecryptPressure",
        "algorithm": "Rabbit",
        "key": "secretPressure",
        "x": 3440,
        "y": 2540,
        "wires": [
            [
                "693b70533f701c53"
            ]
        ]
    },
    {
        "id": "31c73d5124c2fa83",
        "type": "switch",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "tempSwitch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "710",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3710,
        "y": 2600,
        "wires": [
            [
                "2b63adb404604628"
            ]
        ]
    },
    {
        "id": "2b63adb404604628",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "tempToStringCAUTION",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Caution! High brake temperature",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3950,
        "y": 2600,
        "wires": [
            [
                "735d9934cc585299",
                "3a73154fbdd3beec"
            ]
        ]
    },
    {
        "id": "735d9934cc585299",
        "type": "ui_toast",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "position": "top right",
        "displayTime": "10",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "CAUTION",
        "name": "Warning notification",
        "x": 4210,
        "y": 2600,
        "wires": []
    },
    {
        "id": "3a73154fbdd3beec",
        "type": "ui_audio",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Caution",
        "group": "d58e4e07fba5af45",
        "voice": "Microsoft Zira Desktop - English (United States)",
        "always": "",
        "x": 3960,
        "y": 2660,
        "wires": []
    },
    {
        "id": "d29d00e8f3fbbbdf",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Auto-coupler",
        "info": "",
        "x": 3170,
        "y": 2740,
        "wires": []
    },
    {
        "id": "572f47517004d6c0",
        "type": "ui_gauge",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Speed pointer",
        "group": "13cbda8ff63e70c5",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Speed pointer",
        "label": "Km/h",
        "format": "{{value}}",
        "min": 0,
        "max": "300",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 3860,
        "y": 2800,
        "wires": []
    },
    {
        "id": "c9a37803a88d9568",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "954cba7529ac09c6",
        "name": "RabbitencryptSpeed",
        "algorithm": "Rabbit",
        "key": "secretSpeed",
        "x": 470,
        "y": 1680,
        "wires": [
            [
                "eba643afe0688b09"
            ]
        ]
    },
    {
        "id": "eba643afe0688b09",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "954cba7529ac09c6",
        "name": "speedOut_MQTT",
        "topic": "train/autoCoupler/sensors/speed",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 710,
        "y": 1680,
        "wires": []
    },
    {
        "id": "5b4fdece0c04170e",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "speedIn_MQTT",
        "topic": "train/autoCoupler/sensors/speed",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3180,
        "y": 2800,
        "wires": [
            [
                "369b201e0d458b02",
                "7a90a7b0c5161b4d"
            ]
        ]
    },
    {
        "id": "369b201e0d458b02",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitdecryptSpeed",
        "algorithm": "Rabbit",
        "key": "secretSpeed",
        "x": 3420,
        "y": 2800,
        "wires": [
            [
                "3645fa9b6ffec486",
                "70861f5fb1974f48"
            ]
        ]
    },
    {
        "id": "5ac966d6d2bb6807",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "954cba7529ac09c6",
        "name": "LinkSpeedAutoCouplerOut",
        "mode": "link",
        "links": [
            "323076d4ea335e74",
            "fe2331dd2d83815d"
        ],
        "x": 385,
        "y": 1740,
        "wires": []
    },
    {
        "id": "5962021a6a26480d",
        "type": "ui_button",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Uncouple",
        "group": "a87d64bdb0c1bc60",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Uncouple",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Uncoupled",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 3240,
        "y": 2940,
        "wires": [
            [
                "73b73108829259db"
            ]
        ]
    },
    {
        "id": "b1bcb701a505ad27",
        "type": "ui_button",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Couple",
        "group": "a87d64bdb0c1bc60",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Couple",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Coupled",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 3240,
        "y": 2860,
        "wires": [
            [
                "73b73108829259db"
            ]
        ]
    },
    {
        "id": "323076d4ea335e74",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkSpeedAutoCouplerIn",
        "links": [
            "5ac966d6d2bb6807",
            "9dd5e65c43e39c5c"
        ],
        "x": 3115,
        "y": 2900,
        "wires": [
            [
                "5962021a6a26480d",
                "b1bcb701a505ad27"
            ]
        ]
    },
    {
        "id": "73b73108829259db",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitencryptButtonCoupler",
        "algorithm": "Rabbit",
        "key": "secretButtonCoupler",
        "x": 3500,
        "y": 2900,
        "wires": [
            [
                "a049e9d0d370a860"
            ]
        ]
    },
    {
        "id": "a049e9d0d370a860",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "buttonCouplerOut_MQTT",
        "topic": "train/autoCoupler/system/buttonCoupler",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 3770,
        "y": 2900,
        "wires": []
    },
    {
        "id": "741d2f7d0fd5690e",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "954cba7529ac09c6",
        "name": "buttonCouplerIn_MQTT",
        "topic": "train/autoCoupler/system/buttonCoupler",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 1800,
        "wires": [
            [
                "e47a3c65ec5a9f5e"
            ]
        ]
    },
    {
        "id": "e47a3c65ec5a9f5e",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "954cba7529ac09c6",
        "name": "RabbitdecryptButtonCoupler",
        "algorithm": "Rabbit",
        "key": "secretButtonCoupler",
        "x": 440,
        "y": 1800,
        "wires": [
            [
                "91d7a5da65aabf2a"
            ]
        ]
    },
    {
        "id": "4feeff97524f2c61",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "954cba7529ac09c6",
        "name": "RabbitencryptCouplerStatus",
        "algorithm": "Rabbit",
        "key": "secretCouplerStatus",
        "x": 1560,
        "y": 1800,
        "wires": [
            [
                "28aee36726c85cbe"
            ]
        ]
    },
    {
        "id": "28aee36726c85cbe",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "954cba7529ac09c6",
        "name": "couplerStatusOut_MQTT",
        "topic": "train/autoCoupler/system/couplerStatus",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 1850,
        "y": 1800,
        "wires": []
    },
    {
        "id": "78b035a0c3940802",
        "type": "ui_text",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "group": "a87d64bdb0c1bc60",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Coupler status",
        "label": "Coupler status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 3720,
        "y": 3000,
        "wires": []
    },
    {
        "id": "b03e9ed7134b3e02",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "couplerStatusIn_MQTT",
        "topic": "train/autoCoupler/system/couplerStatus",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3200,
        "y": 3000,
        "wires": [
            [
                "a265fbfb6a4a71aa"
            ]
        ]
    },
    {
        "id": "a265fbfb6a4a71aa",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitdecryptCouplerStatus",
        "algorithm": "Rabbit",
        "key": "secretCouplerStatus",
        "x": 3480,
        "y": 3000,
        "wires": [
            [
                "78b035a0c3940802",
                "2962578a7f093339"
            ]
        ]
    },
    {
        "id": "7867c1f0343fea1c",
        "type": "ui_toast",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "position": "top right",
        "displayTime": "8",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "ERROR",
        "name": "Error notification",
        "x": 4200,
        "y": 3060,
        "wires": []
    },
    {
        "id": "2962578a7f093339",
        "type": "switch",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "couplerStatusSwitch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ERROR",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3740,
        "y": 3060,
        "wires": [
            [
                "85d86a6d782ae95c"
            ]
        ]
    },
    {
        "id": "85d86a6d782ae95c",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "ErrorNotification",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Error! Inconsistent pressure value or inconsistent proximity state",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3980,
        "y": 3060,
        "wires": [
            [
                "7867c1f0343fea1c"
            ]
        ]
    },
    {
        "id": "7bb31c85b9f1bfeb",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Doors",
        "info": "",
        "x": 3150,
        "y": 3140,
        "wires": []
    },
    {
        "id": "8f38c93d4d7bd47c",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "LinkCheckDoorsOpeningOut",
        "mode": "link",
        "links": [
            "eaefe7f2554b687b",
            "d3d5ae61fa521bec"
        ],
        "x": 385,
        "y": 2480,
        "wires": []
    },
    {
        "id": "7e8b5561fdeee34e",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "LinkCheckDoorsClosingOut",
        "mode": "link",
        "links": [
            "2888b22b7e29d2a6",
            "17ec5fa3a6243eeb"
        ],
        "x": 385,
        "y": 2560,
        "wires": []
    },
    {
        "id": "8633ac6e4b1781f7",
        "type": "ui_button",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "",
        "group": "d4095cf81953d8b9",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Doors opening",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Open",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 3320,
        "y": 3200,
        "wires": [
            [
                "07ac760f14453117"
            ]
        ]
    },
    {
        "id": "42107b274a5c3c12",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkDoorsIn",
        "links": [
            "ee325e59ccfd486d",
            "07ed8085a89d0b18",
            "23035be4654cd0e9"
        ],
        "x": 3165,
        "y": 3240,
        "wires": [
            [
                "8633ac6e4b1781f7",
                "aae98969ca3f3ad4"
            ]
        ]
    },
    {
        "id": "aae98969ca3f3ad4",
        "type": "ui_button",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "",
        "group": "d4095cf81953d8b9",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Doors closing",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Close",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 3320,
        "y": 3280,
        "wires": [
            [
                "07ac760f14453117"
            ]
        ]
    },
    {
        "id": "eaefe7f2554b687b",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkCheckDoorsOpeningIn",
        "links": [
            "8f38c93d4d7bd47c",
            "d6d9f0a932a0072b"
        ],
        "x": 3115,
        "y": 3200,
        "wires": [
            [
                "8633ac6e4b1781f7"
            ]
        ]
    },
    {
        "id": "2888b22b7e29d2a6",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkCheckDoorsClosingIn",
        "links": [
            "7e8b5561fdeee34e",
            "64d04b9aaedb2b0e"
        ],
        "x": 3115,
        "y": 3280,
        "wires": [
            [
                "aae98969ca3f3ad4"
            ]
        ]
    },
    {
        "id": "07ac760f14453117",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitencryptDoorsButton",
        "algorithm": "Rabbit",
        "key": "secretDoorsButton",
        "x": 3580,
        "y": 3240,
        "wires": [
            [
                "a3ffff766f707ac2"
            ]
        ]
    },
    {
        "id": "a3ffff766f707ac2",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "buttonDoorsOut_MQTT",
        "topic": "train/doors/system/buttonDoors",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 3850,
        "y": 3240,
        "wires": []
    },
    {
        "id": "b52bf5089f9ae6c0",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "buttonDoorsIn_MQTT",
        "topic": "train/doors/system/buttonDoors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 2120,
        "wires": [
            [
                "81b76c47cc9cbff8"
            ]
        ]
    },
    {
        "id": "81b76c47cc9cbff8",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "RabbitdecryptDoorsButton",
        "algorithm": "Rabbit",
        "key": "secretDoorsButton",
        "x": 440,
        "y": 2120,
        "wires": [
            [
                "81377bb1a19beb13"
            ]
        ]
    },
    {
        "id": "92b6f568652fdb92",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "RabbitencryptDoorsState",
        "algorithm": "Rabbit",
        "key": "secretDoorsState",
        "x": 1670,
        "y": 2120,
        "wires": [
            [
                "3ad230fc4da06b6b"
            ]
        ]
    },
    {
        "id": "3ad230fc4da06b6b",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "doorsStateOut_MQTT",
        "topic": "train/doors/system/doorsState",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 1940,
        "y": 2120,
        "wires": []
    },
    {
        "id": "8fc16b15cd17aa0a",
        "type": "ui_text",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "group": "d4095cf81953d8b9",
        "order": 10,
        "width": 0,
        "height": 0,
        "name": "Door status",
        "label": "Door status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 3690,
        "y": 3400,
        "wires": []
    },
    {
        "id": "ceb18ef3c7120a22",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkDoorsIn",
        "links": [
            "ee325e59ccfd486d",
            "07ed8085a89d0b18",
            "23035be4654cd0e9"
        ],
        "x": 3545,
        "y": 3340,
        "wires": [
            [
                "8fc16b15cd17aa0a"
            ]
        ]
    },
    {
        "id": "e86bb0da823b036f",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "doorsStateIn_MQTT",
        "topic": "train/doors/system/doorsState",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3190,
        "y": 3400,
        "wires": [
            [
                "9c4deaf7ddb55923"
            ]
        ]
    },
    {
        "id": "9c4deaf7ddb55923",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitdecryptDoorsState",
        "algorithm": "Rabbit",
        "key": "secretDoorsState",
        "x": 3450,
        "y": 3400,
        "wires": [
            [
                "8fc16b15cd17aa0a",
                "e439000f6eaef153"
            ]
        ]
    },
    {
        "id": "e439000f6eaef153",
        "type": "switch",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "doorsStatusSwitch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "WARNING",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3710,
        "y": 3460,
        "wires": [
            [
                "fc8a7d1692c3d447"
            ]
        ]
    },
    {
        "id": "387ae679d5a189e1",
        "type": "ui_audio",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Warning",
        "group": "d4095cf81953d8b9",
        "voice": "Microsoft Zira Desktop - English (United States)",
        "always": "",
        "x": 3940,
        "y": 3520,
        "wires": []
    },
    {
        "id": "67ee186bba648ba2",
        "type": "ui_toast",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "position": "top right",
        "displayTime": "10",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "WARNING",
        "name": "Warning notification",
        "x": 4190,
        "y": 3460,
        "wires": []
    },
    {
        "id": "fc8a7d1692c3d447",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "WarningNotification",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Warning! Opening or closing of the doors not done correctly",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3950,
        "y": 3460,
        "wires": [
            [
                "67ee186bba648ba2",
                "387ae679d5a189e1"
            ]
        ]
    },
    {
        "id": "a437813d64ae1906",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "LinkCheckWarningOut",
        "mode": "link",
        "links": [
            "85fc0afa6cd2330e",
            "bfb7242bbacaed79"
        ],
        "x": 385,
        "y": 2720,
        "wires": []
    },
    {
        "id": "8f874728f2aa0550",
        "type": "ui_button",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "",
        "group": "d4095cf81953d8b9",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Reset",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 3230,
        "y": 3600,
        "wires": [
            [
                "e3c928aeb6b3443e"
            ]
        ]
    },
    {
        "id": "c5a593b5ae054463",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkDoorsIn",
        "links": [
            "ee325e59ccfd486d",
            "07ed8085a89d0b18",
            "23035be4654cd0e9"
        ],
        "x": 3115,
        "y": 3640,
        "wires": [
            [
                "8f874728f2aa0550"
            ]
        ]
    },
    {
        "id": "85fc0afa6cd2330e",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkCheckWarningIn",
        "links": [
            "a437813d64ae1906",
            "13e80d90f0e0b393"
        ],
        "x": 3115,
        "y": 3560,
        "wires": [
            [
                "8f874728f2aa0550"
            ]
        ]
    },
    {
        "id": "e3c928aeb6b3443e",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitencryptDoorsReset",
        "algorithm": "Rabbit",
        "key": "secretDoorsReset",
        "x": 3450,
        "y": 3600,
        "wires": [
            [
                "37813103d90dedac"
            ]
        ]
    },
    {
        "id": "37813103d90dedac",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "resetDoorsOut_MQTT",
        "topic": "train/doors/system/resetDoors",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 3720,
        "y": 3600,
        "wires": []
    },
    {
        "id": "e6b44bec994b1b97",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "resetDoorsIn_MQTT",
        "topic": "train/doors/system/resetDoors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 2320,
        "wires": [
            [
                "0d241b8931bf97c1"
            ]
        ]
    },
    {
        "id": "0d241b8931bf97c1",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "c89af13838547824",
        "name": "RabbitdecryptDoorsReset",
        "algorithm": "Rabbit",
        "key": "secretDoorsReset",
        "x": 430,
        "y": 2320,
        "wires": [
            [
                "67c9b3038c62d727"
            ]
        ]
    },
    {
        "id": "b97d3b8e350a1b04",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "78be386e3e43be7c",
        "name": "RabbitencryptAirPressure1",
        "algorithm": "Rabbit",
        "key": "secretAirPressure1",
        "x": 2700,
        "y": 880,
        "wires": [
            [
                "09a4fa062d437cb8"
            ]
        ]
    },
    {
        "id": "09a4fa062d437cb8",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "78be386e3e43be7c",
        "name": "airPressure1Out_MQTT",
        "topic": "train/airProduction/system/airPressureGenerator1",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 2990,
        "y": 880,
        "wires": []
    },
    {
        "id": "542d4fdbbe886f52",
        "type": "ui_gauge",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Pressure pointer",
        "group": "81e056cf673794fd",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Pressure pointer",
        "label": "bar",
        "format": "{{value}}",
        "min": 0,
        "max": "15",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 3720,
        "y": 3780,
        "wires": []
    },
    {
        "id": "a9ec8dec5166cffb",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "name": "Air production",
        "info": "",
        "x": 2550,
        "y": 620,
        "wires": []
    },
    {
        "id": "7bcbcdcafd602c55",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Air production",
        "info": "",
        "x": 3170,
        "y": 3720,
        "wires": []
    },
    {
        "id": "3645fa9b6ffec486",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3550,
        "y": 2740,
        "wires": []
    },
    {
        "id": "70861f5fb1974f48",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "StringToNumber",
        "func": "//Extract the payload value from the incoming message\nvar numero = parseFloat(msg.payload);\n\n//Create a new message object with the parsed payload\nvar nuovoMsg = {\n    payload: numero\n};\n\n//Return the new message object\nreturn nuovoMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3640,
        "y": 2800,
        "wires": [
            [
                "572f47517004d6c0",
                "f1582910966f76c5"
            ]
        ]
    },
    {
        "id": "f1582910966f76c5",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3750,
        "y": 2740,
        "wires": []
    },
    {
        "id": "7a90a7b0c5161b4d",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3340,
        "y": 2740,
        "wires": []
    },
    {
        "id": "f7527a193ee0f812",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "airPressure1In_MQTT",
        "topic": "train/airProduction/system/airPressureGenerator1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3200,
        "y": 3780,
        "wires": [
            [
                "151f1fac6705d984"
            ]
        ]
    },
    {
        "id": "151f1fac6705d984",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitdecryptAirPressure1",
        "algorithm": "Rabbit",
        "key": "secretAirPressure1",
        "x": 3480,
        "y": 3780,
        "wires": [
            [
                "542d4fdbbe886f52"
            ]
        ]
    },
    {
        "id": "fc9b0793b2532b99",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "78be386e3e43be7c",
        "name": "RabbitencryptAirPressureStatus1",
        "algorithm": "Rabbit",
        "key": "secretAirPressureStatus1",
        "x": 3500,
        "y": 760,
        "wires": [
            [
                "f1c18604d5cc3293"
            ]
        ]
    },
    {
        "id": "f1c18604d5cc3293",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "78be386e3e43be7c",
        "name": "airPressureStatus1Out_MQTT",
        "topic": "train/airProduction/system/airPressureStatus1",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 3830,
        "y": 760,
        "wires": []
    },
    {
        "id": "162dfa04a697ee92",
        "type": "ui_text",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "group": "81e056cf673794fd",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Pressure status",
        "label": "Pressure status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 3800,
        "y": 3860,
        "wires": []
    },
    {
        "id": "ea887bbbab6e31a2",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "airPressureStatus1In_MQTT",
        "topic": "train/airProduction/system/airPressureStatus1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3220,
        "y": 3860,
        "wires": [
            [
                "e170bc7e1a07013f"
            ]
        ]
    },
    {
        "id": "e170bc7e1a07013f",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitdecryptAirPressureStatus1",
        "algorithm": "Rabbit",
        "key": "secretAirPressureStatus1",
        "x": 3540,
        "y": 3860,
        "wires": [
            [
                "162dfa04a697ee92"
            ]
        ]
    },
    {
        "id": "b660e702e20c9f6d",
        "type": "ui_gauge",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Pressure pointer",
        "group": "f9f8dc884bcc8fcc",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Pressure pointer",
        "label": "bar",
        "format": "{{value}}",
        "min": 0,
        "max": "15",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 3720,
        "y": 3940,
        "wires": []
    },
    {
        "id": "d408a861df3e6792",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "78be386e3e43be7c",
        "name": "RabbitencryptAirPressure2",
        "algorithm": "Rabbit",
        "key": "secretAirPressure2",
        "x": 3480,
        "y": 880,
        "wires": [
            [
                "10f3ef9c077b7c06"
            ]
        ]
    },
    {
        "id": "10f3ef9c077b7c06",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "78be386e3e43be7c",
        "name": "airPressure2Out_MQTT",
        "topic": "train/airProduction/system/airPressureGenerator2",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 3770,
        "y": 880,
        "wires": []
    },
    {
        "id": "2a069f62b0f2fbad",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "airPressure2In_MQTT",
        "topic": "train/airProduction/system/airPressureGenerator2",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3200,
        "y": 3940,
        "wires": [
            [
                "2d3d712d516ccee4"
            ]
        ]
    },
    {
        "id": "2d3d712d516ccee4",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitdecryptAirPressure2",
        "algorithm": "Rabbit",
        "key": "secretAirPressure2",
        "x": 3480,
        "y": 3940,
        "wires": [
            [
                "b660e702e20c9f6d"
            ]
        ]
    },
    {
        "id": "ce1ad9f6b7c52d45",
        "type": "ui_text",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "group": "f9f8dc884bcc8fcc",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Pressure status",
        "label": "Pressure status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 3800,
        "y": 4020,
        "wires": []
    },
    {
        "id": "4c9141add671e16e",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "78be386e3e43be7c",
        "name": "RabbitencryptAirPressureStatus2",
        "algorithm": "Rabbit",
        "key": "secretAirPressureStatus2",
        "x": 4320,
        "y": 800,
        "wires": [
            [
                "661595f83fc6c604"
            ]
        ]
    },
    {
        "id": "661595f83fc6c604",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "78be386e3e43be7c",
        "name": "airPressureStatus2Out_MQTT",
        "topic": "train/airProduction/system/airPressureStatus2",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 4650,
        "y": 800,
        "wires": []
    },
    {
        "id": "43f623aa92229439",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "airPressureStatus2In_MQTT",
        "topic": "train/airProduction/system/airPressureStatus2",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3220,
        "y": 4020,
        "wires": [
            [
                "0f08f63f7cf70313"
            ]
        ]
    },
    {
        "id": "0f08f63f7cf70313",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitdecryptAirPressureStatus2",
        "algorithm": "Rabbit",
        "key": "secretAirPressureStatus2",
        "x": 3540,
        "y": 4020,
        "wires": [
            [
                "ce1ad9f6b7c52d45"
            ]
        ]
    },
    {
        "id": "76c004945109bac8",
        "type": "ui_slider",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Throttle lever",
        "label": "Throttle lever",
        "tooltip": "",
        "group": "6691048acf6a3919",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "min": "-100",
        "max": "100",
        "step": 1,
        "className": "",
        "x": 3260,
        "y": 4160,
        "wires": [
            [
                "520a92c2e177ba7d"
            ]
        ]
    },
    {
        "id": "3419d3043a1c8ab9",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkVCUIn",
        "links": [
            "1f28eb4f0d139824",
            "ecaa8e1cf0e0d200",
            "992d3ec32cdf0f84"
        ],
        "x": 3115,
        "y": 4160,
        "wires": [
            [
                "76c004945109bac8"
            ]
        ]
    },
    {
        "id": "58b4d777f8b371cf",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "VCU",
        "info": "",
        "x": 3150,
        "y": 4100,
        "wires": []
    },
    {
        "id": "520a92c2e177ba7d",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "NumberToString",
        "func": "//Convert the payload to a string\nmsg.payload = msg.payload.toString();\n\n//Return the modified message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3460,
        "y": 4160,
        "wires": [
            [
                "b59c01a12845dfc2"
            ]
        ]
    },
    {
        "id": "c799cdc546a9d5c7",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "ThrottleLeverOut_MQTT",
        "topic": "train/VCU/system/ThrottleLever",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 3990,
        "y": 4160,
        "wires": []
    },
    {
        "id": "b59c01a12845dfc2",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitencryptThrottleLever",
        "algorithm": "Rabbit",
        "key": "secretThrottleLever",
        "x": 3720,
        "y": 4160,
        "wires": [
            [
                "c799cdc546a9d5c7"
            ]
        ]
    },
    {
        "id": "8f67de602d89aaaf",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "2c4fd2f10189163c",
        "name": "ThrottleLeverIn_MQTT",
        "topic": "train/VCU/system/ThrottleLever",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 3060,
        "wires": [
            [
                "3084be6cae895cf0"
            ]
        ]
    },
    {
        "id": "3084be6cae895cf0",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "2c4fd2f10189163c",
        "name": "RabbitdecryptThrottleLever",
        "algorithm": "Rabbit",
        "key": "secretThrottleLever",
        "x": 440,
        "y": 3060,
        "wires": [
            [
                "3354e1d867805456"
            ]
        ]
    },
    {
        "id": "c2d5734c2a51be96",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkVCUIn",
        "links": [
            "1f28eb4f0d139824",
            "ecaa8e1cf0e0d200",
            "992d3ec32cdf0f84"
        ],
        "x": 3645,
        "y": 4260,
        "wires": [
            [
                "012d388af234874e",
                "c620abcecfe8b16b"
            ]
        ]
    },
    {
        "id": "c620abcecfe8b16b",
        "type": "ui_gauge",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Electric Braking Overview",
        "group": "6691048acf6a3919",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Electric Braking Overview",
        "label": "%",
        "format": "{{value}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#000cb3",
            "#000cb3",
            "#000cb3"
        ],
        "seg1": "0",
        "seg2": "0",
        "diff": false,
        "className": "",
        "x": 3830,
        "y": 4300,
        "wires": []
    },
    {
        "id": "012d388af234874e",
        "type": "ui_gauge",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Power Traction Overview",
        "group": "6691048acf6a3919",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Power Traction Overview",
        "label": "%",
        "format": "{{value}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#ca3838",
            "#ca3838",
            "#ca3838"
        ],
        "seg1": "0",
        "seg2": "0",
        "diff": false,
        "className": "",
        "x": 3830,
        "y": 4220,
        "wires": []
    },
    {
        "id": "39afc1b7407668c5",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "2c4fd2f10189163c",
        "name": "VCUPositiveSliderOut_MQTT",
        "topic": "train/VCU/system/PositiveSlider",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 1510,
        "y": 3020,
        "wires": []
    },
    {
        "id": "0c2c3678b6085885",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "2c4fd2f10189163c",
        "name": "RabbitencryptVCUPositiveSlider",
        "algorithm": "Rabbit",
        "key": "secretVCUPositiveSlider",
        "x": 1190,
        "y": 3020,
        "wires": [
            [
                "39afc1b7407668c5"
            ]
        ]
    },
    {
        "id": "bdd76147cb957da3",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "2c4fd2f10189163c",
        "name": "VCUNegativeSliderOut_MQTT",
        "topic": "train/VCU/system/NegativeSlider",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 1530,
        "y": 3100,
        "wires": []
    },
    {
        "id": "a54243f40d5ffb7d",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "2c4fd2f10189163c",
        "name": "RabbitencryptVCUNegativeSlider",
        "algorithm": "Rabbit",
        "key": "secretVCUNegativeSlider",
        "x": 1200,
        "y": 3100,
        "wires": [
            [
                "bdd76147cb957da3"
            ]
        ]
    },
    {
        "id": "b5fb764d54539491",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "VCUPositiveSliderIn_MQTT",
        "topic": "train/VCU/system/PositiveSlider",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3220,
        "y": 4220,
        "wires": [
            [
                "fc2269ca5b5670df"
            ]
        ]
    },
    {
        "id": "fc2269ca5b5670df",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitdecryptVCUPositiveSlider",
        "algorithm": "Rabbit",
        "key": "secretVCUPositiveSlider",
        "x": 3530,
        "y": 4220,
        "wires": [
            [
                "012d388af234874e"
            ]
        ]
    },
    {
        "id": "7b1b0a9498febf9d",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "VCUNegativeSliderIn_MQTT",
        "topic": "train/VCU/system/NegativeSlider",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3220,
        "y": 4300,
        "wires": [
            [
                "8a75cbb2d01797c1"
            ]
        ]
    },
    {
        "id": "8a75cbb2d01797c1",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitdecryptVCUNegativeSlider",
        "algorithm": "Rabbit",
        "key": "secretVCUNegativeSlider",
        "x": 3540,
        "y": 4300,
        "wires": [
            [
                "c620abcecfe8b16b"
            ]
        ]
    },
    {
        "id": "a8b8b5c5683bd365",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "PIS",
        "info": "",
        "x": 3150,
        "y": 4380,
        "wires": []
    },
    {
        "id": "b36a218d125ad567",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkPISIn",
        "links": [
            "d7ca9aa7144d69c6",
            "4570c3fad301711c",
            "eba7cf5447ba8613"
        ],
        "x": 3115,
        "y": 4560,
        "wires": [
            [
                "c50fd195ed23d865"
            ]
        ]
    },
    {
        "id": "c50fd195ed23d865",
        "type": "ui_template",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "group": "3630ee068fe34406",
        "name": "ViewTable",
        "order": 1,
        "width": 12,
        "height": 4,
        "format": "<style>\n    /* Set font family and color for table headers */\n    table th {\n        font-family: Arial, sans-serif;\n        color: rgb(33, 150, 156);\n        background-color: transparent;\n        border: 1px solid #ddd;\n        padding: 8px;\n    }\n\n    /* Set font family, color, and background color for table cells */\n    table td {\n        font-family: Arial, sans-serif;\n        color: white;\n        background-color: transparent;\n        border: 1px solid #ddd;\n        padding: 8px;\n    }\n\n    /* Style the table header row */\n    table tr.header-row th {\n        background-color: transparent;\n        color: white;\n    }\n\n    /* Style the table body rows alternatingly for better readability */\n    table tr:nth-child(even) {\n        background-color: transparent;\n    }\n\n    /* Set the table width to 100% of the parent container */\n    table {\n        width: 100%;\n        border-collapse: collapse;\n    }\n\n    /* Set the font size and text alignment for table cells and headers */\n    table td,\n    table th {\n        font-size: 16px;\n        text-align: center;\n    }\n\n    /* Set the height of the table container and enable overflow scrolling */\n    .table-container {\n        height: 400px;\n        overflow: auto;\n    }\n\n    /* Set the height of the HTML and body elements to 100% and remove margins and padding */\n    html,\n    body {\n        height: 100%;\n        margin: 0;\n        padding: 0;\n    }\n</style>\n\n<div class=\"table-container\">\n    <table>\n        <tr>\n            <th style=\"padding-right: 20px;\">Destination</th>\n            <th style=\"padding-right: 20px;\">Departure time</th>\n            <th style=\"padding-right: 20px;\">Arrival time</th>\n            <th style=\"padding-right: 20px;\">Distance [Km]</th>\n            <th>Seats available</th>\n        </tr>\n        <tr ng-repeat=\"train in msg.payload\">\n            <td>{{train.destination}}</td>\n            <td>{{train.departure_time}}</td>\n            <td>{{train.arrival_time}}</td>\n            <td>{{train.distance_in_km}}</td>\n            <td>{{train.seats_available}}</td>\n        </tr>\n    </table>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3250,
        "y": 4460,
        "wires": [
            []
        ]
    },
    {
        "id": "0311036c3547f7de",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkDBIn",
        "links": [
            "b6a14f2b51b13c1b",
            "d635ec9b98e7c84a"
        ],
        "x": 3115,
        "y": 4440,
        "wires": [
            [
                "c50fd195ed23d865"
            ]
        ]
    },
    {
        "id": "a20d527ee50e772f",
        "type": "ui_text_input",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Current Kilometer",
        "label": "Insert Current Kilometer",
        "tooltip": "",
        "group": "3630ee068fe34406",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": "3000",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 3280,
        "y": 4520,
        "wires": [
            [
                "d7db1309b43752d8"
            ]
        ]
    },
    {
        "id": "ac256ba765121fb3",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkPISIn",
        "links": [
            "d7ca9aa7144d69c6",
            "4570c3fad301711c",
            "eba7cf5447ba8613"
        ],
        "x": 3115,
        "y": 4520,
        "wires": [
            [
                "a20d527ee50e772f"
            ]
        ]
    },
    {
        "id": "d7db1309b43752d8",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "NumberToString",
        "func": "//Convert the payload to a string\nmsg.payload = msg.payload.toString();\n\n//Return the modified message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3520,
        "y": 4520,
        "wires": [
            [
                "7ed9abb02e3f0e0c"
            ]
        ]
    },
    {
        "id": "7ed9abb02e3f0e0c",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitencryptPISKilometer",
        "algorithm": "Rabbit",
        "key": "secretPISKilometer",
        "x": 3780,
        "y": 4520,
        "wires": [
            [
                "351f41cd1501587d"
            ]
        ]
    },
    {
        "id": "351f41cd1501587d",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "PISKilometerOut_MQTT",
        "topic": "train/PIS/system/currentKilometer",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 4050,
        "y": 4520,
        "wires": []
    },
    {
        "id": "b6a14f2b51b13c1b",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "LinkDBOut",
        "mode": "link",
        "links": [
            "0311036c3547f7de",
            "99365c330a542c18"
        ],
        "x": 755,
        "y": 3660,
        "wires": []
    },
    {
        "id": "0dca18e5b81f514d",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "PISKilometerIn_MQTT",
        "topic": "train/PIS/system/currentKilometer",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 4220,
        "wires": [
            [
                "6e0126cf0b72eafe"
            ]
        ]
    },
    {
        "id": "6e0126cf0b72eafe",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "RabbitdecryptPISKilometer",
        "algorithm": "Rabbit",
        "key": "secretPISKilometer",
        "x": 460,
        "y": 4220,
        "wires": [
            [
                "6ef60241e32ab392"
            ]
        ]
    },
    {
        "id": "a18fcd23f7fb86a6",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "LinkNextDestinationDashboardOut",
        "mode": "link",
        "links": [
            "37fab4f4880a7989",
            "6576f13f279f6a86"
        ],
        "x": 975,
        "y": 4280,
        "wires": []
    },
    {
        "id": "37fab4f4880a7989",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkNextDestinationDashboardIn",
        "links": [
            "a18fcd23f7fb86a6",
            "d2fc37ba110625ef"
        ],
        "x": 3115,
        "y": 4620,
        "wires": [
            [
                "f29a90ded5325ed1",
                "397562cdeeeef760"
            ]
        ]
    },
    {
        "id": "f29a90ded5325ed1",
        "type": "ui_audio",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Announcement",
        "group": "3630ee068fe34406",
        "voice": "Microsoft Zira Desktop - English (United States)",
        "always": "",
        "x": 3260,
        "y": 4580,
        "wires": []
    },
    {
        "id": "397562cdeeeef760",
        "type": "ui_toast",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "position": "top right",
        "displayTime": "8",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "ANNOUNCEMENT",
        "name": "Announcement Notification",
        "x": 3300,
        "y": 4660,
        "wires": []
    },
    {
        "id": "3149cf86906533c0",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "PISToCCTVOut_MQTT",
        "topic": "train/PIS/system/CCTV",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 1350,
        "y": 4220,
        "wires": []
    },
    {
        "id": "3c96f5a8a89c7827",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "RabbitencryptPISToCCTV",
        "algorithm": "Rabbit",
        "key": "secretPISToCCTV",
        "x": 1070,
        "y": 4220,
        "wires": [
            [
                "3149cf86906533c0"
            ]
        ]
    },
    {
        "id": "e5ba29111deace63",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "PISToCCTVIn_MQTT",
        "topic": "train/PIS/system/CCTV",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 4620,
        "wires": [
            [
                "1fd252162cd21482"
            ]
        ]
    },
    {
        "id": "1fd252162cd21482",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "RabbitdecryptPISToCCTV",
        "algorithm": "Rabbit",
        "key": "secretPISToCCTV",
        "x": 430,
        "y": 4620,
        "wires": [
            [
                "5db6988f59f3f049"
            ]
        ]
    },
    {
        "id": "cb7bfe58f10d77f4",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "RabbitencryptOccupiedNapoli",
        "algorithm": "Rabbit",
        "key": "secretOccupiedNapoli",
        "x": 1430,
        "y": 4480,
        "wires": [
            [
                "1678c30adc1c742e"
            ]
        ]
    },
    {
        "id": "1678c30adc1c742e",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "occupiedNapoliOut_MQTT",
        "topic": "train/CCTV/location/Napoli",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 1740,
        "y": 4480,
        "wires": []
    },
    {
        "id": "26a559fb9c16180e",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "occupiedNapoliIn_MQTT",
        "topic": "train/CCTV/location/Napoli",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 4080,
        "wires": [
            [
                "807b63d769eee068"
            ]
        ]
    },
    {
        "id": "807b63d769eee068",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "RabbitdecryptOccupiedNapoli",
        "algorithm": "Rabbit",
        "key": "secretOccupiedNapoli",
        "x": 470,
        "y": 4080,
        "wires": [
            [
                "cc921cafce48d2f7"
            ]
        ]
    },
    {
        "id": "fc726dac6e4b1e41",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "RabbitencryptOccupiedMilano",
        "algorithm": "Rabbit",
        "key": "secretOccupiedMilano",
        "x": 1790,
        "y": 4540,
        "wires": [
            [
                "7b75c6e245ec60ad"
            ]
        ]
    },
    {
        "id": "7b75c6e245ec60ad",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "occupiedMilanoOut_MQTT",
        "topic": "train/CCTV/location/Milano",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 2100,
        "y": 4540,
        "wires": []
    },
    {
        "id": "8fba17ea881af01e",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "occupiedMilanoIn_MQTT",
        "topic": "train/CCTV/location/Milano",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 3760,
        "wires": [
            [
                "c213cd0f172c4bdf"
            ]
        ]
    },
    {
        "id": "c213cd0f172c4bdf",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "RabbitdecryptOccupiedMilano",
        "algorithm": "Rabbit",
        "key": "secretOccupiedMilano",
        "x": 470,
        "y": 3760,
        "wires": [
            [
                "b18357d64f5991a9"
            ]
        ]
    },
    {
        "id": "e7aa8347e88543a9",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "RabbitencryptOccupiedBologna",
        "algorithm": "Rabbit",
        "key": "secretOccupiedBologna",
        "x": 1790,
        "y": 4640,
        "wires": [
            [
                "a6973bc2b65d7905"
            ]
        ]
    },
    {
        "id": "a6973bc2b65d7905",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "occupiedBolognaOut_MQTT",
        "topic": "train/CCTV/location/Bologna",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 2100,
        "y": 4640,
        "wires": []
    },
    {
        "id": "aa74913ff81da371",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "occupiedBolognaIn_MQTT",
        "topic": "train/CCTV/location/Bologna",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 3860,
        "wires": [
            [
                "7f7c55c3fc8c5b2a"
            ]
        ]
    },
    {
        "id": "7f7c55c3fc8c5b2a",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "RabbitdecryptOccupiedBologna",
        "algorithm": "Rabbit",
        "key": "secretOccupiedBologna",
        "x": 470,
        "y": 3860,
        "wires": [
            [
                "0e5c775ca8e3479b"
            ]
        ]
    },
    {
        "id": "08e36de9db41f63a",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "RabbitencryptOccupiedRoma",
        "algorithm": "Rabbit",
        "key": "secretOccupiedRoma",
        "x": 1780,
        "y": 4740,
        "wires": [
            [
                "2b4878b1355f41e5"
            ]
        ]
    },
    {
        "id": "2b4878b1355f41e5",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "occupiedRomaOut_MQTT",
        "topic": "train/CCTV/location/Roma",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 2070,
        "y": 4740,
        "wires": []
    },
    {
        "id": "c00a680a02aa4e94",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "occupiedRomaIn_MQTT",
        "topic": "train/CCTV/location/Roma",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 3980,
        "wires": [
            [
                "1353b095a4ac7c27"
            ]
        ]
    },
    {
        "id": "1353b095a4ac7c27",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "db162c2f42040dd8",
        "name": "RabbitdecryptOccupiedRoma",
        "algorithm": "Rabbit",
        "key": "secretOccupiedRoma",
        "x": 460,
        "y": 3980,
        "wires": [
            [
                "54245d13a6853f0c"
            ]
        ]
    },
    {
        "id": "2c732aac52b67eb7",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Wi-fi",
        "info": "",
        "x": 3150,
        "y": 4740,
        "wires": []
    },
    {
        "id": "c3ce183b7c417d4c",
        "type": "ui_dropdown",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "bac6ca666f5e3653",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "Server 2000",
                "value": "2000",
                "type": "str"
            },
            {
                "label": "Server 2001",
                "value": "2001",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 3240,
        "y": 4800,
        "wires": [
            [
                "c6ded6b49ba36925"
            ]
        ]
    },
    {
        "id": "a5f8568f25662390",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkWi-fiIn",
        "links": [
            "7b01e457fd08a07a",
            "7f43ab57f2ab1d16",
            "e5a3cbf78b08e024"
        ],
        "x": 3115,
        "y": 4800,
        "wires": [
            [
                "c3ce183b7c417d4c"
            ]
        ]
    },
    {
        "id": "c6ded6b49ba36925",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitencryptWi-fiServer",
        "algorithm": "Rabbit",
        "key": "secretWi-fiServer",
        "x": 3470,
        "y": 4800,
        "wires": [
            [
                "6d89b85518e9b683"
            ]
        ]
    },
    {
        "id": "6d89b85518e9b683",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Wi-fiServerOut_MQTT",
        "topic": "train/Wi-fi/server",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 3720,
        "y": 4800,
        "wires": []
    },
    {
        "id": "48bbd7f4d7c2c32d",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "651f9027a2a99147",
        "name": "Wi-fiServerIn_MQTT",
        "topic": "train/Wi-fi/server",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 5040,
        "wires": [
            [
                "73d421bf660a7922"
            ]
        ]
    },
    {
        "id": "73d421bf660a7922",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "651f9027a2a99147",
        "name": "RabbitdecryptWi-fiServer",
        "algorithm": "Rabbit",
        "key": "secretWi-fiServer",
        "x": 430,
        "y": 5040,
        "wires": [
            [
                "47a966ed770e9738"
            ]
        ]
    },
    {
        "id": "4d3186df0e6a3d5d",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkWi-fiIn",
        "links": [
            "7b01e457fd08a07a",
            "7f43ab57f2ab1d16",
            "e5a3cbf78b08e024"
        ],
        "x": 3525,
        "y": 4920,
        "wires": [
            [
                "75b27f4430b8b954"
            ]
        ]
    },
    {
        "id": "75b27f4430b8b954",
        "type": "ui_text",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "group": "c828b9b019b02772",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "TCP responce",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 3680,
        "y": 4860,
        "wires": []
    },
    {
        "id": "077aa75b64fdadcb",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "651f9027a2a99147",
        "name": "RabbitencryptWi-fiClient",
        "algorithm": "Rabbit",
        "key": "secretWi-fiClient",
        "x": 1090,
        "y": 5040,
        "wires": [
            [
                "57162f19f5a1856d"
            ]
        ]
    },
    {
        "id": "57162f19f5a1856d",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "651f9027a2a99147",
        "name": "Wi-fiClientOut_MQTT",
        "topic": "train/Wi-fi/client",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 1360,
        "y": 5040,
        "wires": []
    },
    {
        "id": "70227f888d637af7",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Wi-fiClientIn_MQTT",
        "topic": "train/Wi-fi/client",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3190,
        "y": 4860,
        "wires": [
            [
                "73113a6ee465048b"
            ]
        ]
    },
    {
        "id": "73113a6ee465048b",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitdecryptWi-fiClient",
        "algorithm": "Rabbit",
        "key": "secretWi-fiClient",
        "x": 3450,
        "y": 4860,
        "wires": [
            [
                "75b27f4430b8b954"
            ]
        ]
    },
    {
        "id": "1152011f3851e057",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Power electronics",
        "info": "",
        "x": 3180,
        "y": 5000,
        "wires": []
    },
    {
        "id": "6349b7c9d50ce2d9",
        "type": "ui_dropdown",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "",
        "label": "Wi-fi",
        "tooltip": "",
        "place": "ON",
        "group": "11b187cbd12b964a",
        "order": 14,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "ON",
                "value": "ON",
                "type": "str"
            },
            {
                "label": "OFF",
                "value": "OFF",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "payload",
        "topicType": "msg",
        "className": "",
        "x": 3150,
        "y": 5220,
        "wires": [
            [
                "340f503cc3662068"
            ]
        ]
    },
    {
        "id": "340f503cc3662068",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitencryptPowerWi-fi",
        "algorithm": "Rabbit",
        "key": "secretPowerWi-fi",
        "x": 3370,
        "y": 5220,
        "wires": [
            [
                "652633c34e356645"
            ]
        ]
    },
    {
        "id": "652633c34e356645",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "powerWi-fiOut_MQTT",
        "topic": "train/PowerElectronics/Wi-fi",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 3620,
        "y": 5220,
        "wires": []
    },
    {
        "id": "527beea1a99315df",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "powerWi-fiIn_MQTT",
        "topic": "train/PowerElectronics/Wi-fi",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 5840,
        "wires": [
            [
                "c414ddffdc2d0132"
            ]
        ]
    },
    {
        "id": "c414ddffdc2d0132",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "RabbitdecryptPowerWi-fi",
        "algorithm": "Rabbit",
        "key": "secretPowerWi-fi",
        "x": 410,
        "y": 5840,
        "wires": [
            [
                "deeaf0c570c00ad5"
            ]
        ]
    },
    {
        "id": "c1268527a92de9ca",
        "type": "ui_dropdown",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "",
        "label": "PIS",
        "tooltip": "",
        "place": "ON",
        "group": "11b187cbd12b964a",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "ON",
                "value": "ON",
                "type": "str"
            },
            {
                "label": "OFF",
                "value": "OFF",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "payload",
        "topicType": "msg",
        "className": "",
        "x": 3150,
        "y": 5180,
        "wires": [
            [
                "39b90e9679250602"
            ]
        ]
    },
    {
        "id": "39b90e9679250602",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitencryptPowerPIS",
        "algorithm": "Rabbit",
        "key": "secretPowerPIS",
        "x": 3370,
        "y": 5180,
        "wires": [
            [
                "9cc850e161fd1c2f"
            ]
        ]
    },
    {
        "id": "9cc850e161fd1c2f",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "powerPISOut_MQTT",
        "topic": "train/PowerElectronics/PIS",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 3620,
        "y": 5180,
        "wires": []
    },
    {
        "id": "ce767273b18ac962",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "RabbitdecryptPowerPIS",
        "algorithm": "Rabbit",
        "key": "secretPowerPIS",
        "x": 410,
        "y": 5780,
        "wires": [
            [
                "c7f506437e053bb8"
            ]
        ]
    },
    {
        "id": "fe462acddafa0fd1",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "powerPISIn_MQTT",
        "topic": "train/PowerElectronics/PIS",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 5780,
        "wires": [
            [
                "ce767273b18ac962"
            ]
        ]
    },
    {
        "id": "51ae5d9e0904dfe9",
        "type": "ui_dropdown",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "",
        "label": "VCU",
        "tooltip": "",
        "place": "ON",
        "group": "11b187cbd12b964a",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "ON",
                "value": "ON",
                "type": "str"
            },
            {
                "label": "OFF",
                "value": "OFF",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 3150,
        "y": 5140,
        "wires": [
            [
                "639e05e27432193e"
            ]
        ]
    },
    {
        "id": "639e05e27432193e",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitencryptPowerVCU",
        "algorithm": "Rabbit",
        "key": "secretPowerVCU",
        "x": 3370,
        "y": 5140,
        "wires": [
            [
                "9c75d10089f42659"
            ]
        ]
    },
    {
        "id": "9c75d10089f42659",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "powerVCUOut_MQTT",
        "topic": "train/PowerElectronics/VCU",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 3620,
        "y": 5140,
        "wires": []
    },
    {
        "id": "1160a0274dd8c14c",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "powerVCUIn_MQTT",
        "topic": "train/PowerElectronics/VCU",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 5720,
        "wires": [
            [
                "74900b4fd913654e"
            ]
        ]
    },
    {
        "id": "74900b4fd913654e",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "RabbitdecryptPowerVCU",
        "algorithm": "Rabbit",
        "key": "secretPowerVCU",
        "x": 410,
        "y": 5720,
        "wires": [
            [
                "2e56dabfdbbb0e90"
            ]
        ]
    },
    {
        "id": "12aa2d07ca2488c8",
        "type": "ui_dropdown",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Pneumatic Braking System",
        "label": "PBS",
        "tooltip": "",
        "place": "ON",
        "group": "11b187cbd12b964a",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "ON",
                "value": "ON",
                "type": "str"
            },
            {
                "label": "OFF",
                "value": "OFF",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "payload",
        "topicType": "msg",
        "className": "",
        "x": 3220,
        "y": 5100,
        "wires": [
            [
                "7d3ccb899c7b75e5"
            ]
        ]
    },
    {
        "id": "7d3ccb899c7b75e5",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitencryptPowerPBS",
        "algorithm": "Rabbit",
        "key": "secretPowerPBS",
        "x": 3510,
        "y": 5100,
        "wires": [
            [
                "7be645fa6f7724fc"
            ]
        ]
    },
    {
        "id": "7be645fa6f7724fc",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "powerPBSOut_MQTT",
        "topic": "train/PowerElectronics/PBS",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 3760,
        "y": 5100,
        "wires": []
    },
    {
        "id": "146e0219e0f67937",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "powerPBSIn_MQTT",
        "topic": "train/PowerElectronics/PBS",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 5660,
        "wires": [
            [
                "cd0ab8c5542af92b"
            ]
        ]
    },
    {
        "id": "cd0ab8c5542af92b",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "RabbitdecryptPowerPBS",
        "algorithm": "Rabbit",
        "key": "secretPowerPBS",
        "x": 410,
        "y": 5660,
        "wires": [
            [
                "b9d36ddff2f21f7d"
            ]
        ]
    },
    {
        "id": "49861c163b73ae78",
        "type": "ui_dropdown",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "",
        "label": "Doors",
        "tooltip": "",
        "place": "ON",
        "group": "11b187cbd12b964a",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "ON",
                "value": "ON",
                "type": "str"
            },
            {
                "label": "OFF",
                "value": "OFF",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "payload",
        "topicType": "msg",
        "className": "",
        "x": 3150,
        "y": 5060,
        "wires": [
            [
                "f98545c0480cb347"
            ]
        ]
    },
    {
        "id": "f98545c0480cb347",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitencryptPowerDoors",
        "algorithm": "Rabbit",
        "key": "secretPowerDoors",
        "x": 3370,
        "y": 5060,
        "wires": [
            [
                "36fc556b538c69ae"
            ]
        ]
    },
    {
        "id": "36fc556b538c69ae",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "powerDoorsOut_MQTT",
        "topic": "train/PowerElectronics/Doors",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 3650,
        "y": 5060,
        "wires": []
    },
    {
        "id": "fa8daa89ab3b63b7",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "powerDoorsIn_MQTT",
        "topic": "train/PowerElectronics/Doors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 5600,
        "wires": [
            [
                "3fbfa945f84d4978"
            ]
        ]
    },
    {
        "id": "3fbfa945f84d4978",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "RabbitdecryptPowerDoors",
        "algorithm": "Rabbit",
        "key": "secretPowerDoors",
        "x": 430,
        "y": 5600,
        "wires": [
            [
                "5dce76f005afa789"
            ]
        ]
    },
    {
        "id": "ae38ef5ac1a98063",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "powerHVACIn_MQTT",
        "topic": "train/PowerElectronics/HVAC",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 5540,
        "wires": [
            [
                "188e52fd9a0f998b"
            ]
        ]
    },
    {
        "id": "188e52fd9a0f998b",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "RabbitdecryptPowerHVAC",
        "algorithm": "Rabbit",
        "key": "secretPowerHVAC",
        "x": 440,
        "y": 5540,
        "wires": [
            [
                "34355e46a1b2ae69"
            ]
        ]
    },
    {
        "id": "244f8d7eb20d2c27",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitencryptPowerHVAC",
        "algorithm": "Rabbit",
        "key": "secretPowerHVAC",
        "x": 3820,
        "y": 5320,
        "wires": [
            [
                "570f22a86713166f"
            ]
        ]
    },
    {
        "id": "570f22a86713166f",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "powerHVACOut_MQTT",
        "topic": "train/PowerElectronics/HVAC",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 4090,
        "y": 5320,
        "wires": []
    },
    {
        "id": "7bec86aeb8400dc8",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "name": "Gateway",
        "info": "",
        "x": 120,
        "y": 6220,
        "wires": []
    },
    {
        "id": "0b86e50fa487844b",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "RandomPresenceDeparture",
        "func": "//Generate a random number between 1 and 80 to simulate the number of people present\nvar numPresence = Math.floor(Math.random() * 80) + 1; \n\n//Generate a random number between 1 and half of the number of people present to simulate departures\nvar numDepartures = Math.floor(Math.random() * Math.floor(numPresence / 2)) + 1; \n\n//Array to hold the simulated presence and departure data\nvar simulatedData = [];\n\n//Simulate presence by adding objects with 'presenceDetected' set to true to the array\nfor (var i = 0; i < numPresence; i++) {\n    simulatedData.push({ presenceDetected: true });\n}\n\n//Simulate departures by adding objects with 'presenceDetected' set to false to the array\nfor (var j = 0; j < numDepartures; j++) {\n    simulatedData.push({ presenceDetected: false });\n}\n\n//Set the payload of the message to the simulated data\nmsg.payload = simulatedData;\n\n//Return the modified message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 4720,
        "wires": [
            [
                "297299bf61d8bc3a"
            ]
        ]
    },
    {
        "id": "297299bf61d8bc3a",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "PresenceDetector",
        "func": "//Initialize a variable to count the number of people detected\nvar personCount = 0;\n\n//Iterate through each data object in the payload array\nmsg.payload.forEach(function (data) {\n    //If presence is detected in the current data object\n    if (data.presenceDetected) {\n        //Increment the person count by 1, limiting it to a maximum of 100\n        personCount = Math.min(personCount + 1, 100);\n    } else {\n        //If no presence is detected, decrement the person count by 1, but not less than 0\n        personCount = Math.max(personCount - 1, 0);\n    }\n});\n\n//Convert the person count to a string\nvar personCountString = personCount.toString();\n\n//Create a new message object containing the updated person count\nvar newMsg = { payload: personCountString };\n\n//Return the new message object\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 4720,
        "wires": [
            [
                "0308bc6d541c8efa",
                "99cd72b58eb9243d"
            ]
        ]
    },
    {
        "id": "48354775c418f8ad",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Set",
        "payloadType": "str",
        "x": 190,
        "y": 6320,
        "wires": [
            [
                "df843f263211a6f2"
            ]
        ]
    },
    {
        "id": "df843f263211a6f2",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Create Table_train_Temperature",
        "query": "CREATE TABLE train_Temperature (\n    temperature DECIMAL\n);",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 690,
        "y": 6320,
        "wires": [
            [
                "5ae67fa14f73378a"
            ]
        ]
    },
    {
        "id": "1ebae996d1ed214a",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Drop Table_train_Temperature",
        "query": "DROP TABLE train_Temperature;",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 690,
        "y": 6400,
        "wires": [
            [
                "5ae67fa14f73378a"
            ]
        ]
    },
    {
        "id": "39131e14b75d9d2a",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Remove",
        "payloadType": "str",
        "x": 180,
        "y": 6400,
        "wires": [
            [
                "1ebae996d1ed214a"
            ]
        ]
    },
    {
        "id": "eeca4a776e10895d",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Delete Table Manually",
        "info": "",
        "x": 400,
        "y": 6380,
        "wires": []
    },
    {
        "id": "16db3765874058e1",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Create Table Manually",
        "info": "",
        "x": 400,
        "y": 6300,
        "wires": []
    },
    {
        "id": "5ae67fa14f73378a",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "g": "b813916fb46904a1",
        "name": "OutTable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 6360,
        "wires": []
    },
    {
        "id": "7a9ab4fc018b996f",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Insert Row_train_Temperature",
        "query": "INSERT INTO train_Temperature (temperature) VALUES ({{msg.payload.temp}});",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 850,
        "y": 7020,
        "wires": [
            []
        ]
    },
    {
        "id": "83912f9ff36f4226",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "tempIn_MQTT",
        "topic": "train/HVAC/sensors/temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 7020,
        "wires": [
            [
                "01eb51588076f380"
            ]
        ]
    },
    {
        "id": "01eb51588076f380",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "RabbitdecryptTemp",
        "algorithm": "Rabbit",
        "key": "secretTemp",
        "x": 350,
        "y": 7020,
        "wires": [
            [
                "ac7ef0783d722b9f"
            ]
        ]
    },
    {
        "id": "ac7ef0783d722b9f",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "StringToNumber",
        "func": "// Estrai il valore del payload dal messaggio in ingresso\nvar numero = parseFloat(msg.payload);\n\n// Crea un nuovo oggetto messaggio con il payload analizzato\nvar msg = {\n    payload: {\n        temp:numero\n    }\n};\n\n// Restituisci il nuovo oggetto messaggio\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 7020,
        "wires": [
            [
                "7a9ab4fc018b996f"
            ]
        ]
    },
    {
        "id": "d8ade4e1c9f36651",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "humIn_MQTT",
        "topic": "train/HVAC/sensors/humidity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 7100,
        "wires": [
            [
                "305b170dea065a88"
            ]
        ]
    },
    {
        "id": "305b170dea065a88",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "RabbitdecryptHum",
        "algorithm": "Rabbit",
        "key": "secretHum",
        "x": 350,
        "y": 7100,
        "wires": [
            [
                "fa4ea7b5859f17d2"
            ]
        ]
    },
    {
        "id": "fa4ea7b5859f17d2",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "StringToNumber",
        "func": "// Estrai il valore del payload dal messaggio in ingresso\nvar numero = parseFloat(msg.payload);\n\n// Crea un nuovo oggetto messaggio con il payload analizzato\nvar msg = {\n    payload: {\n        hum:numero\n    }\n};\n\n// Restituisci il nuovo oggetto messaggio\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 7100,
        "wires": [
            [
                "33cf3bc20f44ccef"
            ]
        ]
    },
    {
        "id": "33cf3bc20f44ccef",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Insert Row_train_Humidity",
        "query": "INSERT INTO train_Humidity (humidity) VALUES ({{msg.payload.hum}});",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 840,
        "y": 7100,
        "wires": [
            []
        ]
    },
    {
        "id": "97f859fd4d3f7188",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Set",
        "payloadType": "str",
        "x": 190,
        "y": 6500,
        "wires": [
            [
                "8014c80fb511d1cf"
            ]
        ]
    },
    {
        "id": "8014c80fb511d1cf",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Create Table_train_Humidity",
        "query": "CREATE TABLE train_Humidity (\n    humidity DECIMAL\n);",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 6500,
        "wires": [
            [
                "ea8c9c84b5d230a2"
            ]
        ]
    },
    {
        "id": "5233ca40aedc0954",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Drop Table_train_Humidity",
        "query": "DROP TABLE train_Humidity;",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 6580,
        "wires": [
            [
                "ea8c9c84b5d230a2"
            ]
        ]
    },
    {
        "id": "929de6e50f2bd574",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Remove",
        "payloadType": "str",
        "x": 180,
        "y": 6580,
        "wires": [
            [
                "5233ca40aedc0954"
            ]
        ]
    },
    {
        "id": "abe07087c832712b",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Delete Table Manually",
        "info": "",
        "x": 400,
        "y": 6560,
        "wires": []
    },
    {
        "id": "7dc9f32dbf8c7b25",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Create Table Manually",
        "info": "",
        "x": 400,
        "y": 6480,
        "wires": []
    },
    {
        "id": "ea8c9c84b5d230a2",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "g": "b813916fb46904a1",
        "name": "OutTable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 6540,
        "wires": []
    },
    {
        "id": "b7546e8c6084406a",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Read All Data_train_Temperature",
        "query": "SELECT * FROM train_Temperature;",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 440,
        "y": 7580,
        "wires": [
            [
                "7a1d52d9949d11e1",
                "22a396786f48485c"
            ]
        ]
    },
    {
        "id": "61eaf301dc665c0f",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Set",
        "payloadType": "str",
        "x": 190,
        "y": 7580,
        "wires": [
            [
                "b7546e8c6084406a"
            ]
        ]
    },
    {
        "id": "7a1d52d9949d11e1",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "g": "b813916fb46904a1",
        "name": "OutTable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 7640,
        "wires": []
    },
    {
        "id": "6a06d80bf877bea8",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Read All Data_train_Humidity",
        "query": "SELECT * FROM train_Humidity;",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 420,
        "y": 7700,
        "wires": [
            [
                "3a99b5fb97bb87f8",
                "f5cc0c219499b989"
            ]
        ]
    },
    {
        "id": "bf4b1c1f69965355",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Set",
        "payloadType": "str",
        "x": 190,
        "y": 7700,
        "wires": [
            [
                "6a06d80bf877bea8"
            ]
        ]
    },
    {
        "id": "3a99b5fb97bb87f8",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "g": "b813916fb46904a1",
        "name": "OutTable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 7760,
        "wires": []
    },
    {
        "id": "371bd5dc303e7da4",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "airPressure1In_MQTT",
        "topic": "train/airProduction/system/airPressureGenerator1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 7180,
        "wires": [
            [
                "77a09a61701db29b"
            ]
        ]
    },
    {
        "id": "77a09a61701db29b",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "RabbitdecryptAirPressure1",
        "algorithm": "Rabbit",
        "key": "secretAirPressure1",
        "x": 440,
        "y": 7180,
        "wires": [
            [
                "6cbc7c2f0ed9ad97"
            ]
        ]
    },
    {
        "id": "6cbc7c2f0ed9ad97",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "StringToNumber",
        "func": "// Estrai il valore del payload dal messaggio in ingresso\nvar numero = parseFloat(msg.payload);\n\n// Crea un nuovo oggetto messaggio con il payload analizzato\nvar msg = {\n    payload: {\n        pres:numero\n    }\n};\n\n// Restituisci il nuovo oggetto messaggio\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 7180,
        "wires": [
            [
                "7e6d2888a329d397"
            ]
        ]
    },
    {
        "id": "7e6d2888a329d397",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Insert Row_train_Pressure",
        "query": "INSERT INTO train_Pressure (pressure) VALUES ({{msg.payload.pres}});",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 960,
        "y": 7180,
        "wires": [
            []
        ]
    },
    {
        "id": "f2173e474364da56",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Set",
        "payloadType": "str",
        "x": 190,
        "y": 6680,
        "wires": [
            [
                "65937d94bc037134"
            ]
        ]
    },
    {
        "id": "65937d94bc037134",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Create Table_train_Pressure",
        "query": "CREATE TABLE train_Pressure (\n    pressure DECIMAL\n);",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 6680,
        "wires": [
            [
                "ce2959e661d76f5b"
            ]
        ]
    },
    {
        "id": "d53b28595671895a",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Drop Table_train_Pressure",
        "query": "DROP TABLE train_Pressure;",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 6760,
        "wires": [
            [
                "ce2959e661d76f5b"
            ]
        ]
    },
    {
        "id": "4c22962514220ecf",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Remove",
        "payloadType": "str",
        "x": 180,
        "y": 6760,
        "wires": [
            [
                "d53b28595671895a"
            ]
        ]
    },
    {
        "id": "2c7e65075a478947",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Delete Table Manually",
        "info": "",
        "x": 400,
        "y": 6740,
        "wires": []
    },
    {
        "id": "62f453f973b844ce",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Create Table Manually",
        "info": "",
        "x": 400,
        "y": 6660,
        "wires": []
    },
    {
        "id": "ce2959e661d76f5b",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "g": "b813916fb46904a1",
        "name": "OutTable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 6720,
        "wires": []
    },
    {
        "id": "51ce34f8d9d417a0",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Read All Data_train_Pressure",
        "query": "SELECT * FROM train_Pressure;",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 430,
        "y": 7840,
        "wires": [
            [
                "dfa0298ebc641e56",
                "b17286d72fb401a2"
            ]
        ]
    },
    {
        "id": "908edde8b1257d61",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Set",
        "payloadType": "str",
        "x": 190,
        "y": 7840,
        "wires": [
            [
                "51ce34f8d9d417a0"
            ]
        ]
    },
    {
        "id": "dfa0298ebc641e56",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "g": "b813916fb46904a1",
        "name": "OutTable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 7900,
        "wires": []
    },
    {
        "id": "2623ac87d8a27868",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Set",
        "payloadType": "str",
        "x": 1190,
        "y": 6320,
        "wires": [
            [
                "add67000faeaa899"
            ]
        ]
    },
    {
        "id": "add67000faeaa899",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Create Table_braking_speed",
        "query": "CREATE TABLE braking_speed (\n    speed NUMERIC\n);",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1680,
        "y": 6320,
        "wires": [
            [
                "96eb54c117596cbe"
            ]
        ]
    },
    {
        "id": "c01aed3cb8635423",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Drop Table_braking_speed",
        "query": "DROP TABLE braking_speed;",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1680,
        "y": 6400,
        "wires": [
            [
                "96eb54c117596cbe"
            ]
        ]
    },
    {
        "id": "9eb2b8eaa7b4f0a3",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Remove",
        "payloadType": "str",
        "x": 1180,
        "y": 6400,
        "wires": [
            [
                "c01aed3cb8635423"
            ]
        ]
    },
    {
        "id": "c0349b1c41217963",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Delete Table Manually",
        "info": "",
        "x": 1400,
        "y": 6380,
        "wires": []
    },
    {
        "id": "245eb9bb3684d235",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Create Table Manually",
        "info": "",
        "x": 1400,
        "y": 6300,
        "wires": []
    },
    {
        "id": "96eb54c117596cbe",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "g": "b813916fb46904a1",
        "name": "OutTable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1920,
        "y": 6360,
        "wires": []
    },
    {
        "id": "71d345c251d64248",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Set",
        "payloadType": "str",
        "x": 1190,
        "y": 6500,
        "wires": [
            [
                "1a538fe285aed03d"
            ]
        ]
    },
    {
        "id": "1a538fe285aed03d",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Create Table_braking_temp",
        "query": "CREATE TABLE braking_temp (\n    temp NUMERIC\n);",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1680,
        "y": 6500,
        "wires": [
            [
                "4998bb9467bea216"
            ]
        ]
    },
    {
        "id": "bc0a20141fe54bd3",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Drop Table_braking_temp",
        "query": "DROP TABLE braking_temp;",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1670,
        "y": 6580,
        "wires": [
            [
                "4998bb9467bea216"
            ]
        ]
    },
    {
        "id": "cc397c06286d5937",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Remove",
        "payloadType": "str",
        "x": 1180,
        "y": 6580,
        "wires": [
            [
                "bc0a20141fe54bd3"
            ]
        ]
    },
    {
        "id": "11f441964e029833",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Delete Table Manually",
        "info": "",
        "x": 1400,
        "y": 6560,
        "wires": []
    },
    {
        "id": "c6249a0946c492ce",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Create Table Manually",
        "info": "",
        "x": 1400,
        "y": 6480,
        "wires": []
    },
    {
        "id": "4998bb9467bea216",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "g": "b813916fb46904a1",
        "name": "OutTable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1920,
        "y": 6540,
        "wires": []
    },
    {
        "id": "16090ed78e544684",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Set",
        "payloadType": "str",
        "x": 1190,
        "y": 6680,
        "wires": [
            [
                "974d7351ca44c752"
            ]
        ]
    },
    {
        "id": "974d7351ca44c752",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Create Table_braking_pres",
        "query": "CREATE TABLE braking_pres (\n    pres DECIMAL\n);",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1680,
        "y": 6680,
        "wires": [
            [
                "8c0c047caf921dc3"
            ]
        ]
    },
    {
        "id": "6d99de8d7b168cb9",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Drop Table_braking_pres",
        "query": "DROP TABLE braking_pres;",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1670,
        "y": 6760,
        "wires": [
            [
                "8c0c047caf921dc3"
            ]
        ]
    },
    {
        "id": "bc38ecc364ae9f54",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Remove",
        "payloadType": "str",
        "x": 1180,
        "y": 6760,
        "wires": [
            [
                "6d99de8d7b168cb9"
            ]
        ]
    },
    {
        "id": "f96962b4a8e0655b",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Delete Table Manually",
        "info": "",
        "x": 1400,
        "y": 6740,
        "wires": []
    },
    {
        "id": "279db857d50e0764",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Create Table Manually",
        "info": "",
        "x": 1400,
        "y": 6660,
        "wires": []
    },
    {
        "id": "8c0c047caf921dc3",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "g": "b813916fb46904a1",
        "name": "OutTable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1920,
        "y": 6720,
        "wires": []
    },
    {
        "id": "1326d5ba9fe8c7f8",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "RabbitdecryptSpeedRPM",
        "algorithm": "Rabbit",
        "key": "secretSpeedRPM",
        "x": 1470,
        "y": 7020,
        "wires": [
            [
                "1c1d16f46701e56d"
            ]
        ]
    },
    {
        "id": "25ea8be05e9a8ef0",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "speedRPMIn_MQTT",
        "topic": "train/PBS/sensors/speed",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1210,
        "y": 7020,
        "wires": [
            [
                "1326d5ba9fe8c7f8"
            ]
        ]
    },
    {
        "id": "8a09f4958e29dceb",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "temperatureIn_MQTT",
        "topic": "train/PBS/sensors/temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1220,
        "y": 7100,
        "wires": [
            [
                "58c7b22c392c23f4"
            ]
        ]
    },
    {
        "id": "655ca2d6b54a563a",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "pressureIn_MQTT",
        "topic": "train/PBS/sensors/pressure",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1210,
        "y": 7180,
        "wires": [
            [
                "f8d1e14bc3058882"
            ]
        ]
    },
    {
        "id": "58c7b22c392c23f4",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "RabbitdecryptTemperature",
        "algorithm": "Rabbit",
        "key": "secretTemperature",
        "x": 1500,
        "y": 7100,
        "wires": [
            [
                "2302036ee699f8c5"
            ]
        ]
    },
    {
        "id": "f8d1e14bc3058882",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "RabbitdecryptPressure",
        "algorithm": "Rabbit",
        "key": "secretPressure",
        "x": 1460,
        "y": 7180,
        "wires": [
            [
                "f79655dd0b6cdf1c"
            ]
        ]
    },
    {
        "id": "1c1d16f46701e56d",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "StringToNumber",
        "func": "// Estrai il valore del payload dal messaggio in ingresso\nvar numero = parseFloat(msg.payload);\n\n// Crea un nuovo oggetto messaggio con il payload analizzato\nvar msg = {\n    payload: {\n        bSpeed:numero\n    }\n};\n\n// Restituisci il nuovo oggetto messaggio\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 7020,
        "wires": [
            [
                "a25536058d3a01f8"
            ]
        ]
    },
    {
        "id": "2302036ee699f8c5",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "StringToNumber",
        "func": "// Estrai il valore del payload dal messaggio in ingresso\nvar numero = parseFloat(msg.payload);\n\n// Crea un nuovo oggetto messaggio con il payload analizzato\nvar msg = {\n    payload: {\n        bTemp:numero\n    }\n};\n\n// Restituisci il nuovo oggetto messaggio\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 7100,
        "wires": [
            [
                "95d62011428f47bc"
            ]
        ]
    },
    {
        "id": "f79655dd0b6cdf1c",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "StringToNumber",
        "func": "// Estrai il valore del payload dal messaggio in ingresso\nvar numero = parseFloat(msg.payload);\n\n// Crea un nuovo oggetto messaggio con il payload analizzato\nvar msg = {\n    payload: {\n        bPres:numero\n    }\n};\n\n// Restituisci il nuovo oggetto messaggio\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 7180,
        "wires": [
            [
                "3d54ad1c5ecfde7d"
            ]
        ]
    },
    {
        "id": "a25536058d3a01f8",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Insert Row_braking_speed",
        "query": "INSERT INTO braking_speed (speed) VALUES ({{msg.payload.bSpeed}});",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1980,
        "y": 7020,
        "wires": [
            []
        ]
    },
    {
        "id": "95d62011428f47bc",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Insert Row_braking_temp",
        "query": "INSERT INTO braking_temp (temp) VALUES ({{msg.payload.bTemp}});",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2010,
        "y": 7100,
        "wires": [
            []
        ]
    },
    {
        "id": "3d54ad1c5ecfde7d",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Insert Row_braking_pres",
        "query": "INSERT INTO braking_pres (pres) VALUES ({{msg.payload.bPres}});",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1950,
        "y": 7180,
        "wires": [
            []
        ]
    },
    {
        "id": "924b4135a10a72c5",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Read All Data_braking_speed",
        "query": "SELECT * FROM braking_speed;",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1290,
        "y": 7580,
        "wires": [
            [
                "fc0a4d51a1603a00",
                "7fe7dcabceb45e59"
            ]
        ]
    },
    {
        "id": "ec318f16f67d357f",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Set",
        "payloadType": "str",
        "x": 1050,
        "y": 7580,
        "wires": [
            [
                "924b4135a10a72c5"
            ]
        ]
    },
    {
        "id": "fc0a4d51a1603a00",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "g": "b813916fb46904a1",
        "name": "OutTable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1540,
        "y": 7640,
        "wires": []
    },
    {
        "id": "aed5a3a9347d1a92",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Read All Data_braking_temp",
        "query": "SELECT * FROM braking_temp;",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1280,
        "y": 7700,
        "wires": [
            [
                "204e3750463fa12f",
                "2f9a11ebc3872525"
            ]
        ]
    },
    {
        "id": "984c6abed82f78c5",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Set",
        "payloadType": "str",
        "x": 1050,
        "y": 7700,
        "wires": [
            [
                "aed5a3a9347d1a92"
            ]
        ]
    },
    {
        "id": "204e3750463fa12f",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "g": "b813916fb46904a1",
        "name": "OutTable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1540,
        "y": 7760,
        "wires": []
    },
    {
        "id": "4eb550272dc40b0d",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Read All Data_braking_pres",
        "query": "SELECT * FROM braking_pres;",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1280,
        "y": 7840,
        "wires": [
            [
                "f066d558d62c799c",
                "60303fee445a5b41"
            ]
        ]
    },
    {
        "id": "444b75d027f7c40a",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Set",
        "payloadType": "str",
        "x": 1050,
        "y": 7840,
        "wires": [
            [
                "4eb550272dc40b0d"
            ]
        ]
    },
    {
        "id": "f066d558d62c799c",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "g": "b813916fb46904a1",
        "name": "OutTable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1540,
        "y": 7900,
        "wires": []
    },
    {
        "id": "dcb224741effe07b",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "LinkAirProductionOut",
        "mode": "link",
        "links": [
            "5b8a8d6ac5ac91f4",
            "670fb3056433401d",
            "f3877a2e25d8022c",
            "8c194bfe5caf37f8",
            "985b7b7c76462ef1",
            "5c99776ebf48b9da"
        ],
        "x": 1335,
        "y": 6060,
        "wires": []
    },
    {
        "id": "f3877a2e25d8022c",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "78be386e3e43be7c",
        "name": "LinkAirProductionIn",
        "links": [
            "dcb224741effe07b",
            "568dc79a35ac3ddb"
        ],
        "x": 2495,
        "y": 760,
        "wires": [
            [
                "b437502f3630029d"
            ]
        ]
    },
    {
        "id": "1979d9fe60fa5423",
        "type": "switch",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "switchHVAC",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 910,
        "y": 5540,
        "wires": [
            [
                "5e2aa25e615049c1"
            ],
            [
                "f6d1bf2acf29b91c"
            ]
        ]
    },
    {
        "id": "a303bda4d1dac189",
        "type": "ui_switch",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "",
        "label": "HVAC",
        "tooltip": "",
        "group": "11b187cbd12b964a",
        "order": 21,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 3370,
        "y": 5320,
        "wires": [
            [
                "0edd458cb9bfb906"
            ]
        ]
    },
    {
        "id": "aaee660759854b90",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3190,
        "y": 5320,
        "wires": [
            [
                "a303bda4d1dac189"
            ]
        ]
    },
    {
        "id": "f6d1bf2acf29b91c",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "setOFF",
        "func": "msg.payload = \"\";\nmsg.enabled = false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 5560,
        "wires": [
            [
                "d8dd5bb40cfb6dd5"
            ]
        ]
    },
    {
        "id": "67da756b986ca567",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "LinkPowerHVACOut",
        "mode": "link",
        "links": [
            "9fbd660d07c48fd0",
            "d0204ae8212888bb",
            "6be17540066a89b7",
            "3a806ab04bbd9b52",
            "a1516c11e4e78c0f",
            "ead2eded99095fdb",
            "612562330320a15a"
        ],
        "x": 1215,
        "y": 5520,
        "wires": []
    },
    {
        "id": "9fbd660d07c48fd0",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7765436fbbe8a965",
        "name": "LinkPowerHVACIn",
        "links": [
            "67da756b986ca567",
            "f364ca8f56c9b36d"
        ],
        "x": 75,
        "y": 160,
        "wires": [
            [
                "cc9ca46e7c81045e"
            ]
        ]
    },
    {
        "id": "0edd458cb9bfb906",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "BooleanToString",
        "func": "//Convert the payload to a string\nmsg.payload = msg.payload.toString();\n\n//Return the modified message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3560,
        "y": 5320,
        "wires": [
            [
                "244f8d7eb20d2c27"
            ]
        ]
    },
    {
        "id": "34355e46a1b2ae69",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "StringToBoolean",
        "func": "if (msg.payload === \"true\") {\n        msg.payload = true;\n    } else {\n        msg.payload = false;\n    }\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 5540,
        "wires": [
            [
                "1979d9fe60fa5423"
            ]
        ]
    },
    {
        "id": "624b6a5248d34dd9",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3190,
        "y": 5380,
        "wires": [
            [
                "36e562eec0b59e7c"
            ]
        ]
    },
    {
        "id": "36e562eec0b59e7c",
        "type": "ui_switch",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "",
        "label": "Auto-coupler",
        "tooltip": "",
        "group": "11b187cbd12b964a",
        "order": 22,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 3390,
        "y": 5380,
        "wires": [
            [
                "c58aa712007a9a25"
            ]
        ]
    },
    {
        "id": "c58aa712007a9a25",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "BooleanToString",
        "func": "//Convert the payload to a string\nmsg.payload = msg.payload.toString();\n\n//Return the modified message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3600,
        "y": 5380,
        "wires": [
            [
                "01f2105f680398a9"
            ]
        ]
    },
    {
        "id": "01f2105f680398a9",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitencryptPowerAuto-coupler",
        "algorithm": "Rabbit",
        "key": "secretPowerAuto-coupler",
        "x": 3880,
        "y": 5380,
        "wires": [
            [
                "79d6b59d0eef2fe3"
            ]
        ]
    },
    {
        "id": "79d6b59d0eef2fe3",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "powerAuto-couplerOut_MQTT",
        "topic": "train/PowerElectronics/Auto-coupler",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 4190,
        "y": 5380,
        "wires": []
    },
    {
        "id": "34019a06239ee52e",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "powerAuto-couplerIn_MQTT",
        "topic": "train/PowerElectronics/Auto-coupler",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 6000,
        "wires": [
            [
                "0ced6b5e7ef310f6"
            ]
        ]
    },
    {
        "id": "0ced6b5e7ef310f6",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "RabbitdecryptPowerAuto-coupler",
        "algorithm": "Rabbit",
        "key": "secretPowerAuto-coupler",
        "x": 500,
        "y": 6000,
        "wires": [
            [
                "ef5c9d5b22074d85"
            ]
        ]
    },
    {
        "id": "ef5c9d5b22074d85",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "StringToBoolean",
        "func": "if (msg.payload === \"true\") {\n        msg.payload = true;\n    } else {\n        msg.payload = false;\n    }\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 6000,
        "wires": [
            [
                "8a037a34c5b85144"
            ]
        ]
    },
    {
        "id": "8a037a34c5b85144",
        "type": "switch",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "switchAuto-coupler",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1010,
        "y": 6000,
        "wires": [
            [
                "46bc416045d96cac"
            ],
            [
                "06a8dd31a90898b8"
            ]
        ]
    },
    {
        "id": "ddcd20bc0c40ac75",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "LinkPowerAuto-couplerOut",
        "mode": "link",
        "links": [
            "2eba36d924e8c6ce",
            "fa3ba08dbdb15f3e",
            "30d2a34dd315f660",
            "92ed175a4953fc2f",
            "288795bb037c2691"
        ],
        "x": 1335,
        "y": 5980,
        "wires": []
    },
    {
        "id": "2eba36d924e8c6ce",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "954cba7529ac09c6",
        "name": "LinkPowerAuto-couplerIn",
        "links": [
            "ddcd20bc0c40ac75",
            "19923468e3933ba3"
        ],
        "x": 75,
        "y": 1680,
        "wires": [
            [
                "5875c0c9cd67d92f"
            ]
        ]
    },
    {
        "id": "06a8dd31a90898b8",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "setOFF",
        "func": "msg.payload = \"\";\nmsg.enabled = false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 6020,
        "wires": [
            [
                "984bb8992ed170e6"
            ]
        ]
    },
    {
        "id": "984bb8992ed170e6",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "LinkAuto-couplerOut",
        "mode": "link",
        "links": [
            "220f1967cfd3438b",
            "9f0ec6dad8dc345f",
            "c483d3b259aaddd3",
            "b9fc0b37baf8acc2",
            "f8cdf697e54ff542",
            "3f398a8f5323254c"
        ],
        "x": 1355,
        "y": 6020,
        "wires": []
    },
    {
        "id": "c483d3b259aaddd3",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkAuto-couplerIn",
        "links": [
            "984bb8992ed170e6",
            "c8016b0be80c67a0"
        ],
        "x": 3565,
        "y": 2960,
        "wires": [
            [
                "78b035a0c3940802"
            ]
        ]
    },
    {
        "id": "9f0ec6dad8dc345f",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkAuto-couplerIn",
        "links": [
            "984bb8992ed170e6",
            "c8016b0be80c67a0"
        ],
        "x": 3705,
        "y": 2840,
        "wires": [
            [
                "572f47517004d6c0"
            ]
        ]
    },
    {
        "id": "220f1967cfd3438b",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkAuto-couplerIn",
        "links": [
            "984bb8992ed170e6",
            "c8016b0be80c67a0"
        ],
        "x": 3195,
        "y": 2900,
        "wires": [
            [
                "b1bcb701a505ad27",
                "5962021a6a26480d"
            ]
        ]
    },
    {
        "id": "46bc416045d96cac",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "setON",
        "func": "msg.enabled = true;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 5980,
        "wires": [
            [
                "ddcd20bc0c40ac75"
            ]
        ]
    },
    {
        "id": "30d2a34dd315f660",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkPowerAuto-couplerIn",
        "links": [
            "ddcd20bc0c40ac75",
            "19923468e3933ba3"
        ],
        "x": 3955,
        "y": 2900,
        "wires": [
            [
                "15c0762e997d2760"
            ]
        ]
    },
    {
        "id": "15c0762e997d2760",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "deletePayload",
        "func": "delete msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4100,
        "y": 2900,
        "wires": [
            [
                "78b035a0c3940802",
                "572f47517004d6c0"
            ]
        ]
    },
    {
        "id": "d0204ae8212888bb",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkPowerHVACIn",
        "links": [
            "67da756b986ca567",
            "f364ca8f56c9b36d"
        ],
        "x": 3775,
        "y": 1600,
        "wires": [
            [
                "5ad7703e4f33e528"
            ]
        ]
    },
    {
        "id": "5e2aa25e615049c1",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "setON",
        "func": "msg.enabled = true;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 5520,
        "wires": [
            [
                "67da756b986ca567"
            ]
        ]
    },
    {
        "id": "41ec75701fb29729",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkHVACIn",
        "links": [
            "d8dd5bb40cfb6dd5",
            "dd087b67f2b2098f",
            "d56b5d0c6d352c24"
        ],
        "x": 3785,
        "y": 1460,
        "wires": [
            [
                "6ed3242d8b160163",
                "e7d2d35b04a1649e"
            ]
        ]
    },
    {
        "id": "3a806ab04bbd9b52",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkPowerHVACIn",
        "links": [
            "67da756b986ca567",
            "f364ca8f56c9b36d"
        ],
        "x": 3525,
        "y": 1980,
        "wires": [
            [
                "b1a434aa04ef9ca5",
                "5a9eca83a5364153",
                "401e2366c1655a11",
                "cf00577cfd95e014"
            ]
        ]
    },
    {
        "id": "5ad7703e4f33e528",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "deletePayload",
        "func": "delete msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3920,
        "y": 1600,
        "wires": [
            [
                "e7d2d35b04a1649e",
                "6ed3242d8b160163",
                "558189b0012e5475"
            ]
        ]
    },
    {
        "id": "c3c3be33c28c6a4d",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3190,
        "y": 5440,
        "wires": [
            [
                "748f87f24e67e3e8"
            ]
        ]
    },
    {
        "id": "748f87f24e67e3e8",
        "type": "ui_switch",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "",
        "label": "Air production",
        "tooltip": "",
        "group": "11b187cbd12b964a",
        "order": 23,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 3400,
        "y": 5440,
        "wires": [
            [
                "3e56d4134320d2c4"
            ]
        ]
    },
    {
        "id": "3e56d4134320d2c4",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "BooleanToString",
        "func": "//Convert the payload to a string\nmsg.payload = msg.payload.toString();\n\n//Return the modified message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3620,
        "y": 5440,
        "wires": [
            [
                "3bd894f2bd407773"
            ]
        ]
    },
    {
        "id": "3bd894f2bd407773",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitencryptPowerAirProduction",
        "algorithm": "Rabbit",
        "key": "secretPowerAirProduction",
        "x": 3900,
        "y": 5440,
        "wires": [
            [
                "ae2ba489ea6170f7"
            ]
        ]
    },
    {
        "id": "ae2ba489ea6170f7",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "powerAirProductionOut_MQTT",
        "topic": "train/PowerElectronics/AirProduction",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 4210,
        "y": 5440,
        "wires": []
    },
    {
        "id": "e542ea8e2d765681",
        "type": "switch",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "switchAirProduction",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1010,
        "y": 6080,
        "wires": [
            [
                "fd9a5d2e9b5afe66"
            ],
            [
                "58bdcbd1e7d2f40b"
            ]
        ]
    },
    {
        "id": "827226f23f002288",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "powerAirProductionIn_MQTT",
        "topic": "train/PowerElectronics/AirProduction",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 6080,
        "wires": [
            [
                "da35981283abd5ca"
            ]
        ]
    },
    {
        "id": "da35981283abd5ca",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "RabbitdecryptPowerAirProduction",
        "algorithm": "Rabbit",
        "key": "secretPowerAirProduction",
        "x": 500,
        "y": 6080,
        "wires": [
            [
                "01474cfe783ed03a"
            ]
        ]
    },
    {
        "id": "01474cfe783ed03a",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "StringToBoolean",
        "func": "if (msg.payload === \"true\") {\n        msg.payload = true;\n    } else {\n        msg.payload = false;\n    }\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 6080,
        "wires": [
            [
                "e542ea8e2d765681"
            ]
        ]
    },
    {
        "id": "fd9a5d2e9b5afe66",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "setON",
        "func": "msg.enabled = true;\ndelete msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 6060,
        "wires": [
            [
                "dcb224741effe07b"
            ]
        ]
    },
    {
        "id": "58bdcbd1e7d2f40b",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "setOFF",
        "func": "msg.payload = \"\";\nmsg.enabled = false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 6100,
        "wires": [
            [
                "ebfd46a637126295"
            ]
        ]
    },
    {
        "id": "ebfd46a637126295",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "LinkAirProductionsetOFFOut",
        "mode": "link",
        "links": [
            "5b8a8d6ac5ac91f4",
            "670fb3056433401d",
            "8f0b8cdda9a35191",
            "a20ecb8624109985"
        ],
        "x": 1355,
        "y": 6100,
        "wires": []
    },
    {
        "id": "a20ecb8624109985",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkAirProductionsetOFFOIn",
        "links": [
            "ebfd46a637126295",
            "39daec7fa2939f7d"
        ],
        "x": 3525,
        "y": 3900,
        "wires": [
            [
                "542d4fdbbe886f52",
                "162dfa04a697ee92",
                "b660e702e20c9f6d",
                "ce1ad9f6b7c52d45"
            ]
        ]
    },
    {
        "id": "53e3c1caacfadb03",
        "type": "switch",
        "z": "5e7f2b6f6bb048a1",
        "g": "78be386e3e43be7c",
        "name": "switchAirPressure",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "10",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3730,
        "y": 820,
        "wires": [
            [
                "3b1c1aafff787e4c"
            ],
            [
                "aa5f68abb9b7d4e7"
            ]
        ]
    },
    {
        "id": "aa5f68abb9b7d4e7",
        "type": "change",
        "z": "5e7f2b6f6bb048a1",
        "g": "78be386e3e43be7c",
        "name": "pressToString\"\"",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3980,
        "y": 840,
        "wires": [
            [
                "4c9141add671e16e"
            ]
        ]
    },
    {
        "id": "8c194bfe5caf37f8",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkAirProductionIn",
        "links": [
            "dcb224741effe07b",
            "568dc79a35ac3ddb"
        ],
        "x": 3375,
        "y": 3900,
        "wires": [
            [
                "542d4fdbbe886f52",
                "162dfa04a697ee92",
                "b660e702e20c9f6d",
                "ce1ad9f6b7c52d45"
            ]
        ]
    },
    {
        "id": "595e8b14f111f2e5",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "airPressure2In_MQTT",
        "topic": "train/airProduction/system/airPressureGenerator2",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 7260,
        "wires": [
            [
                "7e6ac3731ac7f21e"
            ]
        ]
    },
    {
        "id": "7e6ac3731ac7f21e",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "RabbitdecryptAirPressure2",
        "algorithm": "Rabbit",
        "key": "secretAirPressure2",
        "x": 440,
        "y": 7260,
        "wires": [
            [
                "c7cfb168a45493d2"
            ]
        ]
    },
    {
        "id": "c7cfb168a45493d2",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "StringToNumber",
        "func": "// Estrai il valore del payload dal messaggio in ingresso\nvar numero = parseFloat(msg.payload);\n\nif (isNaN(numero)){\n    numero = -1\n}\n\n// Crea un nuovo oggetto messaggio con il payload analizzato\nvar msg = {\n    payload: {\n        bPres_sup:numero\n    }\n};\n\n// Restituisci il nuovo oggetto messaggio\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 7260,
        "wires": [
            [
                "05b72d5c3542617c"
            ]
        ]
    },
    {
        "id": "05b72d5c3542617c",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Insert Row_train_Pressure_supportLine",
        "query": "INSERT INTO train_Pressure_supportLine (pressure_support) VALUES ({{msg.payload.bPres_sup}});",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1000,
        "y": 7260,
        "wires": [
            []
        ]
    },
    {
        "id": "b9254eb40dc5d969",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Set",
        "payloadType": "str",
        "x": 190,
        "y": 6860,
        "wires": [
            [
                "378d247445ab12c0"
            ]
        ]
    },
    {
        "id": "378d247445ab12c0",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Create Table_train_Pressure_supportLine",
        "query": "CREATE TABLE train_Pressure_supportLine (\n    pressure_support DECIMAL\n);",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 720,
        "y": 6860,
        "wires": [
            [
                "f72e3ebdcc38bd28"
            ]
        ]
    },
    {
        "id": "7154f1d33e6f7d6b",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Drop Table_train_Pressure_supportLine",
        "query": "DROP TABLE train_Pressure_supportLine;",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 720,
        "y": 6940,
        "wires": [
            [
                "f72e3ebdcc38bd28"
            ]
        ]
    },
    {
        "id": "5828436bde7a3329",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Remove",
        "payloadType": "str",
        "x": 180,
        "y": 6940,
        "wires": [
            [
                "7154f1d33e6f7d6b"
            ]
        ]
    },
    {
        "id": "5193c298a3e9c065",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Delete Table Manually",
        "info": "",
        "x": 400,
        "y": 6920,
        "wires": []
    },
    {
        "id": "52cf694e5bccbd14",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Create Table Manually",
        "info": "",
        "x": 400,
        "y": 6840,
        "wires": []
    },
    {
        "id": "f72e3ebdcc38bd28",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "g": "b813916fb46904a1",
        "name": "OutTable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 6900,
        "wires": []
    },
    {
        "id": "d8d1f7af9ee09300",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Read All Data_train_Pressure_supportLine",
        "query": "SELECT * FROM train_Pressure_supportLine;",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2130,
        "y": 7580,
        "wires": [
            [
                "fed8cad1deed8a97",
                "693ce1e372d40ff9"
            ]
        ]
    },
    {
        "id": "c5af1380fe21e54f",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Set",
        "payloadType": "str",
        "x": 1850,
        "y": 7580,
        "wires": [
            [
                "d8d1f7af9ee09300"
            ]
        ]
    },
    {
        "id": "fed8cad1deed8a97",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "g": "b813916fb46904a1",
        "name": "OutTable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2420,
        "y": 7640,
        "wires": []
    },
    {
        "id": "eeece0f3b70823b3",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "Gateway",
        "info": "",
        "x": 3160,
        "y": 5520,
        "wires": []
    },
    {
        "id": "22a396786f48485c",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "LinkReadTemperatureOut",
        "mode": "link",
        "links": [
            "1e215b33f6386c76",
            "6eef843b3fadf51d"
        ],
        "x": 655,
        "y": 7580,
        "wires": []
    },
    {
        "id": "1e215b33f6386c76",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkReadTemperatureIn",
        "links": [
            "22a396786f48485c",
            "d0afc83384d821ea"
        ],
        "x": 3115,
        "y": 5580,
        "wires": [
            [
                "79f197394d1c30cb"
            ]
        ]
    },
    {
        "id": "79f197394d1c30cb",
        "type": "ui_template",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "group": "4ad79a99c47cbbaf",
        "name": "ViewTable_train_Temperature",
        "order": 1,
        "width": 5,
        "height": 5,
        "format": "<style>\n    /* Stile per gli header della tabella */\n    table th {\n        font-family: Arial, sans-serif;\n        color: rgb(33, 150, 156);\n        background-color: transparent;\n        border: 1px solid #ddd;\n        padding: 8px;\n    }\n\n    /* Stile per le celle della tabella */\n    table td {\n        font-family: Arial, sans-serif;\n        color: white;\n        background-color: transparent;\n        border: 1px solid #ddd;\n        padding: 8px;\n    }\n\n    /* Stile per le righe pari della tabella */\n    table tr:nth-child(even) {\n        background-color: transparent;\n    }\n\n    /* Setta la larghezza della tabella al 100% del contenitore genitore */\n    table {\n        width: 100%;\n        border-collapse: collapse;\n    }\n\n    /* Setta la grandezza del contenitore della tabella e abilita lo scrolling */\n    .table-container {\n        height: 600px;\n        overflow: auto;\n    }\n\n    /* Setta l'altezza dell'HTML e del body al 100% e rimuovi margini e padding */\n    html,\n    body {\n        height: 100%;\n        margin: 0;\n        padding: 0;\n    }\n</style>\n\n<div class=\"table-container\">\n    <table>\n        <tr>\n            <th>Temperature [°C]</th>\n        </tr>\n        <tr ng-repeat=\"row in msg.payload\">\n            <td>{{row.temperature}}</td>\n        </tr>\n    </table>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3310,
        "y": 5620,
        "wires": [
            []
        ]
    },
    {
        "id": "212e58795e77524b",
        "type": "ui_dropdown",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "",
        "label": "Gateway",
        "tooltip": "",
        "place": "ON",
        "group": "11b187cbd12b964a",
        "order": 15,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "ON",
                "value": "ON",
                "type": "str"
            },
            {
                "label": "OFF",
                "value": "OFF",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "payload",
        "topicType": "msg",
        "className": "",
        "x": 3160,
        "y": 5260,
        "wires": [
            [
                "b089042b3f8b2104"
            ]
        ]
    },
    {
        "id": "b089042b3f8b2104",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "RabbitencryptPowerGateway",
        "algorithm": "Rabbit",
        "key": "secretPowerGateway",
        "x": 3400,
        "y": 5260,
        "wires": [
            [
                "3ea38f0c5cd4c5e1"
            ]
        ]
    },
    {
        "id": "3ea38f0c5cd4c5e1",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "powerGatewayOut_MQTT",
        "topic": "train/PowerElectronics/Gateway",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 3690,
        "y": 5260,
        "wires": []
    },
    {
        "id": "f2edcd562512dfd3",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "RabbitdecryptPowerGateway",
        "algorithm": "Rabbit",
        "key": "secretPowerGateway",
        "x": 460,
        "y": 5920,
        "wires": [
            [
                "5bfb7ad30dcf1aec"
            ]
        ]
    },
    {
        "id": "244e8a968ac70d41",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "powerGatewayIn_MQTT",
        "topic": "train/PowerElectronics/Gateway",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 5920,
        "wires": [
            [
                "f2edcd562512dfd3"
            ]
        ]
    },
    {
        "id": "5bfb7ad30dcf1aec",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "checkON/OFF",
        "func": "if (msg.payload === \"OFF\") {\n    msg.enabled = false;\n    msg.payload = \"\";\n} \n\nelse if(msg.payload === \"ON\"){\n    msg.enabled = true;\n    msg.payload = \"\";\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 5920,
        "wires": [
            [
                "84ce423e500c52ac"
            ]
        ]
    },
    {
        "id": "84ce423e500c52ac",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "LinkGatewayOut",
        "mode": "link",
        "links": [
            "5b8a8d6ac5ac91f4",
            "670fb3056433401d",
            "1f414f2318187144",
            "37dee64d030b9996",
            "86b65248a2aca3b7",
            "a0be0526d215622e",
            "19e6487778d23585",
            "bf82e9d9ffed31d6",
            "0c63d37c1b3140b2",
            "7fdb0b63ca3852f3",
            "bfdfa407e7886748",
            "06de2c5a167161f8",
            "2060418be108c968",
            "d43e3a1a438598ba",
            "4d9abb35ba141ea7",
            "7bee266bfbbda3e7",
            "b31aa96bd33fc768",
            "7f87a3ffcd4fa836"
        ],
        "x": 875,
        "y": 5920,
        "wires": []
    },
    {
        "id": "1f414f2318187144",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkGatewayIn",
        "links": [
            "84ce423e500c52ac",
            "cd4bceaad705301e"
        ],
        "x": 3115,
        "y": 5660,
        "wires": [
            [
                "79f197394d1c30cb"
            ]
        ]
    },
    {
        "id": "f5cc0c219499b989",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "LinkReadHumidityOut",
        "mode": "link",
        "links": [
            "065d25e8aa331a19",
            "2d8cf10c739db190"
        ],
        "x": 615,
        "y": 7700,
        "wires": []
    },
    {
        "id": "065d25e8aa331a19",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkReadHumidityIn",
        "links": [
            "f5cc0c219499b989",
            "1e2e2e27bba39749"
        ],
        "x": 3115,
        "y": 5720,
        "wires": [
            [
                "46c37a6e43e9eb3f"
            ]
        ]
    },
    {
        "id": "46c37a6e43e9eb3f",
        "type": "ui_template",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "group": "4ad79a99c47cbbaf",
        "name": "ViewTable_train_Humidity",
        "order": 2,
        "width": 5,
        "height": 5,
        "format": "<style>\n    /* Stile per gli header della tabella */\n    table th {\n        font-family: Arial, sans-serif;\n        color: rgb(33, 150, 156);\n        background-color: transparent;\n        border: 1px solid #ddd;\n        padding: 8px;\n    }\n\n    /* Stile per le celle della tabella */\n    table td {\n        font-family: Arial, sans-serif;\n        color: white;\n        background-color: transparent;\n        border: 1px solid #ddd;\n        padding: 8px;\n    }\n\n    /* Stile per le righe pari della tabella */\n    table tr:nth-child(even) {\n        background-color: transparent;\n    }\n\n    /* Setta la larghezza della tabella al 100% del contenitore genitore */\n    table {\n        width: 100%;\n        border-collapse: collapse;\n    }\n\n    /* Setta la grandezza del contenitore della tabella e abilita lo scrolling */\n    .table-container {\n        height: 400px;\n        overflow: auto;\n    }\n\n    /* Setta l'altezza dell'HTML e del body al 100% e rimuovi margini e padding */\n    html, body {\n        height: 100%;\n        margin: 0;\n        padding: 0;\n    }\n</style>\n\n<div class=\"table-container\">\n    <table>\n        <tr>\n            <th>Humidity [%]</th>\n        </tr>\n        <tr ng-repeat=\"row in msg.payload\">\n            <td>{{row.humidity}}</td>\n        </tr>\n    </table>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3290,
        "y": 5760,
        "wires": [
            []
        ]
    },
    {
        "id": "37dee64d030b9996",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkGatewayIn",
        "links": [
            "84ce423e500c52ac",
            "cd4bceaad705301e"
        ],
        "x": 3115,
        "y": 5800,
        "wires": [
            [
                "46c37a6e43e9eb3f"
            ]
        ]
    },
    {
        "id": "b17286d72fb401a2",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "LinkReadPressureOut",
        "mode": "link",
        "links": [
            "e4184983db84fb83",
            "7b018a97a0c8d1c9"
        ],
        "x": 635,
        "y": 7840,
        "wires": []
    },
    {
        "id": "e4184983db84fb83",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkReadPressureIn",
        "links": [
            "b17286d72fb401a2",
            "eb2c63e4d5ac181a"
        ],
        "x": 3115,
        "y": 5860,
        "wires": [
            [
                "d0b88366a2e29c11"
            ]
        ]
    },
    {
        "id": "d0b88366a2e29c11",
        "type": "ui_template",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "group": "91b579e883a9a9f5",
        "name": "ViewTable_train_Pressure",
        "order": 1,
        "width": 5,
        "height": 5,
        "format": "<style>\n    /* Stile per gli header della tabella */\n    table th {\n        font-family: Arial, sans-serif;\n        color: rgb(33, 150, 156);\n        background-color: transparent;\n        border: 1px solid #ddd;\n        padding: 8px;\n    }\n\n    /* Stile per le celle della tabella */\n    table td {\n        font-family: Arial, sans-serif;\n        color: white;\n        background-color: transparent;\n        border: 1px solid #ddd;\n        padding: 8px;\n    }\n\n    /* Stile per le righe pari della tabella */\n    table tr:nth-child(even) {\n        background-color: transparent;\n    }\n\n    /* Setta la larghezza della tabella al 100% del contenitore genitore */\n    table {\n        width: 100%;\n        border-collapse: collapse;\n    }\n\n    /* Setta la grandezza del contenitore della tabella e abilita lo scrolling */\n    .table-container {\n        height: 400px;\n        overflow: auto;\n    }\n\n    /* Setta l'altezza dell'HTML e del body al 100% e rimuovi margini e padding */\n    html, body {\n        height: 100%;\n        margin: 0;\n        padding: 0;\n    }\n</style>\n\n<div class=\"table-container\">\n    <table>\n        <tr>\n            <th>Pressure [bar]</th>\n        </tr>\n        <tr ng-repeat=\"row in msg.payload\">\n            <td>{{row.pressure}}</td>\n        </tr>\n    </table>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3290,
        "y": 5900,
        "wires": [
            []
        ]
    },
    {
        "id": "86b65248a2aca3b7",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkGatewayIn",
        "links": [
            "84ce423e500c52ac",
            "cd4bceaad705301e"
        ],
        "x": 3115,
        "y": 5940,
        "wires": [
            [
                "d0b88366a2e29c11"
            ]
        ]
    },
    {
        "id": "7fe7dcabceb45e59",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "LinkReadSpeedOut",
        "mode": "link",
        "links": [
            "946cafbc412a76e3",
            "7ef46f006e6740a6"
        ],
        "x": 1495,
        "y": 7580,
        "wires": []
    },
    {
        "id": "98ebf8b004f4819d",
        "type": "ui_template",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "group": "83dcd5883c77cd62",
        "name": "ViewTable_braking_speed",
        "order": 1,
        "width": 5,
        "height": 5,
        "format": "<style>\n    /* Stile per gli header della tabella */\n    table th {\n        font-family: Arial, sans-serif;\n        color: rgb(33, 150, 156);\n        background-color: transparent;\n        border: 1px solid #ddd;\n        padding: 8px;\n    }\n\n    /* Stile per le celle della tabella */\n    table td {\n        font-family: Arial, sans-serif;\n        color: white;\n        background-color: transparent;\n        border: 1px solid #ddd;\n        padding: 8px;\n    }\n\n    /* Stile per le righe pari della tabella */\n    table tr:nth-child(even) {\n        background-color: transparent;\n    }\n\n    /* Setta la larghezza della tabella al 100% del contenitore genitore */\n    table {\n        width: 100%;\n        border-collapse: collapse;\n    }\n\n    /* Setta la grandezza del contenitore della tabella e abilita lo scrolling */\n    .table-container {\n        height: 400px;\n        overflow: auto;\n    }\n\n    /* Setta l'altezza dell'HTML e del body al 100% e rimuovi margini e padding */\n    html, body {\n        height: 100%;\n        margin: 0;\n        padding: 0;\n    }\n</style>\n\n<div class=\"table-container\">\n    <table>\n        <tr>\n            <th>Wheel Speed [RPM]</th>\n        </tr>\n        <tr ng-repeat=\"row in msg.payload\">\n            <td>{{row.speed}}</td>\n        </tr>\n    </table>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3710,
        "y": 5620,
        "wires": [
            []
        ]
    },
    {
        "id": "946cafbc412a76e3",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkReadSpeedIn",
        "links": [
            "7fe7dcabceb45e59",
            "f7733b32eff65869"
        ],
        "x": 3535,
        "y": 5580,
        "wires": [
            [
                "98ebf8b004f4819d"
            ]
        ]
    },
    {
        "id": "a0be0526d215622e",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkGatewayIn",
        "links": [
            "84ce423e500c52ac",
            "cd4bceaad705301e"
        ],
        "x": 3535,
        "y": 5660,
        "wires": [
            [
                "98ebf8b004f4819d"
            ]
        ]
    },
    {
        "id": "2f9a11ebc3872525",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "LinkReadTempOut",
        "mode": "link",
        "links": [
            "d4c00b7e86d47dbe",
            "c9d8bd4d8942b445"
        ],
        "x": 1495,
        "y": 7700,
        "wires": []
    },
    {
        "id": "3985cf389df375a5",
        "type": "ui_template",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "group": "83dcd5883c77cd62",
        "name": "ViewTable_braking_temp",
        "order": 2,
        "width": 5,
        "height": 5,
        "format": "<style>\n    /* Stile per gli header della tabella */\n    table th {\n        font-family: Arial, sans-serif;\n        color: rgb(33, 150, 156);\n        background-color: transparent;\n        border: 1px solid #ddd;\n        padding: 8px;\n    }\n\n    /* Stile per le celle della tabella */\n    table td {\n        font-family: Arial, sans-serif;\n        color: white;\n        background-color: transparent;\n        border: 1px solid #ddd;\n        padding: 8px;\n    }\n\n    /* Stile per le righe pari della tabella */\n    table tr:nth-child(even) {\n        background-color: transparent;\n    }\n\n    /* Setta la larghezza della tabella al 100% del contenitore genitore */\n    table {\n        width: 100%;\n        border-collapse: collapse;\n    }\n\n    /* Setta la grandezza del contenitore della tabella e abilita lo scrolling */\n    .table-container {\n        height: 400px;\n        overflow: auto;\n    }\n\n    /* Setta l'altezza dell'HTML e del body al 100% e rimuovi margini e padding */\n    html, body {\n        height: 100%;\n        margin: 0;\n        padding: 0;\n    }\n</style>\n\n<div class=\"table-container\">\n    <table>\n        <tr>\n            <th>Brake Temperature [°C]</th>\n        </tr>\n        <tr ng-repeat=\"row in msg.payload\">\n            <td>{{row.temp}}</td>\n        </tr>\n    </table>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3710,
        "y": 5760,
        "wires": [
            []
        ]
    },
    {
        "id": "d4c00b7e86d47dbe",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkReadTempIn",
        "links": [
            "2f9a11ebc3872525",
            "57b81333238fdbf6"
        ],
        "x": 3535,
        "y": 5720,
        "wires": [
            [
                "3985cf389df375a5"
            ]
        ]
    },
    {
        "id": "19e6487778d23585",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkGatewayIn",
        "links": [
            "84ce423e500c52ac",
            "cd4bceaad705301e"
        ],
        "x": 3535,
        "y": 5800,
        "wires": [
            [
                "3985cf389df375a5"
            ]
        ]
    },
    {
        "id": "60303fee445a5b41",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "LinkReadPresOut",
        "mode": "link",
        "links": [
            "1b2572506ec444b6",
            "05145d5d5c17419a"
        ],
        "x": 1495,
        "y": 7840,
        "wires": []
    },
    {
        "id": "6198ed142e62b4f4",
        "type": "ui_template",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "group": "83dcd5883c77cd62",
        "name": "ViewTable_braking_pres",
        "order": 3,
        "width": 5,
        "height": 5,
        "format": "<style>\n    /* Stile per gli header della tabella */\n    table th {\n        font-family: Arial, sans-serif;\n        color: rgb(33, 150, 156);\n        background-color: transparent;\n        border: 1px solid #ddd;\n        padding: 8px;\n    }\n\n    /* Stile per le celle della tabella */\n    table td {\n        font-family: Arial, sans-serif;\n        color: white;\n        background-color: transparent;\n        border: 1px solid #ddd;\n        padding: 8px;\n    }\n\n    /* Stile per le righe pari della tabella */\n    table tr:nth-child(even) {\n        background-color: transparent;\n    }\n\n    /* Setta la larghezza della tabella al 100% del contenitore genitore */\n    table {\n        width: 100%;\n        border-collapse: collapse;\n    }\n\n    /* Setta la grandezza del contenitore della tabella e abilita lo scrolling */\n    .table-container {\n        height: 400px;\n        overflow: auto;\n    }\n\n    /* Setta l'altezza dell'HTML e del body al 100% e rimuovi margini e padding */\n    html, body {\n        height: 100%;\n        margin: 0;\n        padding: 0;\n    }\n</style>\n\n<div class=\"table-container\">\n    <table>\n        <tr>\n            <th>Brake Pressure [bar]</th>\n        </tr>\n        <tr ng-repeat=\"row in msg.payload\">\n            <td>{{row.pres}}</td>\n        </tr>\n    </table>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3710,
        "y": 5900,
        "wires": [
            []
        ]
    },
    {
        "id": "1b2572506ec444b6",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkReadPresIn",
        "links": [
            "60303fee445a5b41",
            "7ce51bcda3b71bf1"
        ],
        "x": 3535,
        "y": 5860,
        "wires": [
            [
                "6198ed142e62b4f4"
            ]
        ]
    },
    {
        "id": "bf82e9d9ffed31d6",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkGatewayIn",
        "links": [
            "84ce423e500c52ac",
            "cd4bceaad705301e"
        ],
        "x": 3535,
        "y": 5940,
        "wires": [
            [
                "6198ed142e62b4f4"
            ]
        ]
    },
    {
        "id": "693ce1e372d40ff9",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "LinkReadPressureSupportOut",
        "mode": "link",
        "links": [
            "ea12976b4682d615",
            "39e0891658523e63"
        ],
        "x": 2375,
        "y": 7580,
        "wires": []
    },
    {
        "id": "ea12976b4682d615",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkReadPressureSupportIn",
        "links": [
            "693ce1e372d40ff9",
            "a64baf4d491a8256",
            "bde59747bcf4c9d3"
        ],
        "x": 3915,
        "y": 5580,
        "wires": [
            [
                "9c4e3bd07b19053f"
            ]
        ]
    },
    {
        "id": "9c4e3bd07b19053f",
        "type": "ui_template",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "group": "91b579e883a9a9f5",
        "name": "ViewTable_train_Pressure_supportLine",
        "order": 2,
        "width": 5,
        "height": 5,
        "format": "<style>\n    /* Stile per gli header della tabella */\n    table th {\n        font-family: Arial, sans-serif;\n        color: rgb(33, 150, 156);\n        background-color: transparent;\n        border: 1px solid #ddd;\n        padding: 8px;\n    }\n\n    /* Stile per le celle della tabella */\n    table td {\n        font-family: Arial, sans-serif;\n        color: white;\n        background-color: transparent;\n        border: 1px solid #ddd;\n        padding: 8px;\n    }\n\n    /* Stile per le righe pari della tabella */\n    table tr:nth-child(even) {\n        background-color: transparent;\n    }\n\n    /* Setta la larghezza della tabella al 100% del contenitore genitore */\n    table {\n        width: 100%;\n        border-collapse: collapse;\n    }\n\n    /* Setta la grandezza del contenitore della tabella e abilita lo scrolling */\n    .table-container {\n        height: 400px;\n        overflow: auto;\n    }\n\n    /* Setta l'altezza dell'HTML e del body al 100% e rimuovi margini e padding */\n    html, body {\n        height: 100%;\n        margin: 0;\n        padding: 0;\n    }\n</style>\n\n<div class=\"table-container\">\n    <table>\n        <tr>\n            <th>Pressure [bar]</th>\n        </tr>\n        <tr ng-repeat=\"row in msg.payload\">\n            <td>{{row.pressure_support}}</td>\n        </tr>\n    </table>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 4130,
        "y": 5620,
        "wires": [
            []
        ]
    },
    {
        "id": "0c63d37c1b3140b2",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkGatewayIn",
        "links": [
            "84ce423e500c52ac",
            "cd4bceaad705301e"
        ],
        "x": 3915,
        "y": 5660,
        "wires": [
            [
                "9c4e3bd07b19053f"
            ]
        ]
    },
    {
        "id": "2481723a4469a342",
        "type": "mqtt out",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "occupiedCCTVOut_MQTT",
        "topic": "train/CCTV/system",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbef09f611251efb",
        "x": 1500,
        "y": 4780,
        "wires": []
    },
    {
        "id": "0308bc6d541c8efa",
        "type": "encrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "RabbitencryptOccupiedCCTV",
        "algorithm": "Rabbit",
        "key": "secretOccupiedCCTV",
        "x": 1190,
        "y": 4780,
        "wires": [
            [
                "2481723a4469a342"
            ]
        ]
    },
    {
        "id": "fd3b7c8939a86053",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "occupiedCCTVIn_MQTT",
        "topic": "train/CCTV/system",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1290,
        "y": 7260,
        "wires": [
            [
                "e78b11353dc91f2e"
            ]
        ]
    },
    {
        "id": "e78b11353dc91f2e",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "RabbitdecryptOccupiedCCTV",
        "algorithm": "Rabbit",
        "key": "secretOccupiedCCTV",
        "x": 1590,
        "y": 7260,
        "wires": [
            [
                "bdadb497325b9959"
            ]
        ]
    },
    {
        "id": "bdadb497325b9959",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "StringToNumber",
        "func": "// Estrai il valore del payload dal messaggio in ingresso\nvar numero = parseFloat(msg.payload);\n\n// Crea un nuovo oggetto messaggio con il payload analizzato\nvar msg = {\n    payload: {\n        presence:numero\n    }\n};\n\n// Restituisci il nuovo oggetto messaggio\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 7260,
        "wires": [
            [
                "a3851533162c1d21"
            ]
        ]
    },
    {
        "id": "a3851533162c1d21",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Insert Row_braking_pres",
        "query": "INSERT INTO CCTV_presence (presence) VALUES ({{msg.payload.presence}});",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2110,
        "y": 7260,
        "wires": [
            []
        ]
    },
    {
        "id": "3afa4d18acfab899",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Set",
        "payloadType": "str",
        "x": 1190,
        "y": 6860,
        "wires": [
            [
                "91edd3e23a126ade"
            ]
        ]
    },
    {
        "id": "91edd3e23a126ade",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Create Table_CCTV_presence",
        "query": "CREATE TABLE CCTV_presence (\n    presence DECIMAL\n);",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1690,
        "y": 6860,
        "wires": [
            [
                "8c88d61c0e6671cc"
            ]
        ]
    },
    {
        "id": "eb39f5a62d6b3c7a",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Drop Table_CCTV_presence",
        "query": "DROP TABLE CCTV_presence;",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1680,
        "y": 6940,
        "wires": [
            [
                "8c88d61c0e6671cc"
            ]
        ]
    },
    {
        "id": "c21d5aa219ead551",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Remove",
        "payloadType": "str",
        "x": 1180,
        "y": 6940,
        "wires": [
            [
                "eb39f5a62d6b3c7a"
            ]
        ]
    },
    {
        "id": "90e7f8c1e6e5c9bc",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Delete Table Manually",
        "info": "",
        "x": 1400,
        "y": 6920,
        "wires": []
    },
    {
        "id": "11c5dc03fc8821a5",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Create Table Manually",
        "info": "",
        "x": 1400,
        "y": 6840,
        "wires": []
    },
    {
        "id": "8c88d61c0e6671cc",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "g": "b813916fb46904a1",
        "name": "OutTable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1940,
        "y": 6900,
        "wires": []
    },
    {
        "id": "2a6647606a91be3b",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "Read All Data_CCTV_presence",
        "query": "SELECT * FROM CCTV_presence;",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2090,
        "y": 7700,
        "wires": [
            [
                "7c509a07fe4b9164",
                "ce5465f6100ca48f"
            ]
        ]
    },
    {
        "id": "721e7dd35756e708",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Set",
        "payloadType": "str",
        "x": 1850,
        "y": 7700,
        "wires": [
            [
                "2a6647606a91be3b"
            ]
        ]
    },
    {
        "id": "7c509a07fe4b9164",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "d": true,
        "g": "b813916fb46904a1",
        "name": "OutTable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2340,
        "y": 7760,
        "wires": []
    },
    {
        "id": "ce5465f6100ca48f",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "LinkCCTVpresenceOut",
        "mode": "link",
        "links": [
            "84b8edc99991c936",
            "e2977b068950e5a6"
        ],
        "x": 2295,
        "y": 7700,
        "wires": []
    },
    {
        "id": "84b8edc99991c936",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkCCTVpresenceIn",
        "links": [
            "ce5465f6100ca48f",
            "42527932163f25d4"
        ],
        "x": 3915,
        "y": 5720,
        "wires": [
            [
                "ea00fbe0ba0a7e64"
            ]
        ]
    },
    {
        "id": "7fdb0b63ca3852f3",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkGatewayIn",
        "links": [
            "84ce423e500c52ac",
            "cd4bceaad705301e"
        ],
        "x": 3915,
        "y": 5800,
        "wires": [
            [
                "ea00fbe0ba0a7e64"
            ]
        ]
    },
    {
        "id": "ea00fbe0ba0a7e64",
        "type": "ui_template",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "group": "6c896ecd924d01ba",
        "name": "ViewTable_train_Pressure_supportLine",
        "order": 1,
        "width": 5,
        "height": 5,
        "format": "<style>\n    /* Stile per gli header della tabella */\n    table th {\n        font-family: Arial, sans-serif;\n        color: rgb(33, 150, 156);\n        background-color: transparent;\n        border: 1px solid #ddd;\n        padding: 8px;\n    }\n\n    /* Stile per le celle della tabella */\n    table td {\n        font-family: Arial, sans-serif;\n        color: white;\n        background-color: transparent;\n        border: 1px solid #ddd;\n        padding: 8px;\n    }\n\n    /* Stile per le righe pari della tabella */\n    table tr:nth-child(even) {\n        background-color: transparent;\n    }\n\n    /* Setta la larghezza della tabella al 100% del contenitore genitore */\n    table {\n        width: 100%;\n        border-collapse: collapse;\n    }\n\n    /* Setta la grandezza del contenitore della tabella e abilita lo scrolling */\n    .table-container {\n        height: 400px;\n        overflow: auto;\n    }\n\n    /* Setta l'altezza dell'HTML e del body al 100% e rimuovi margini e padding */\n    html, body {\n        height: 100%;\n        margin: 0;\n        padding: 0;\n    }\n</style>\n\n<div class=\"table-container\">\n    <table>\n        <tr>\n            <th>Detected presence</th>\n        </tr>\n        <tr ng-repeat=\"row in msg.payload\">\n            <td>{{row.presence}}</td>\n        </tr>\n    </table>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 4130,
        "y": 5760,
        "wires": [
            []
        ]
    },
    {
        "id": "99cd72b58eb9243d",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "7342c789d8a8e2ed",
        "name": "OutPresence",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 4780,
        "wires": []
    },
    {
        "id": "6970eeba506dfd60",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "occupiedMilanoIn_MQTT",
        "topic": "train/CCTV/location/Milano",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1290,
        "y": 7320,
        "wires": [
            [
                "fe969a70bfdc5565"
            ]
        ]
    },
    {
        "id": "fe969a70bfdc5565",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "RabbitdecryptOccupiedMilano",
        "algorithm": "Rabbit",
        "key": "secretOccupiedMilano",
        "x": 1590,
        "y": 7320,
        "wires": [
            [
                "bdadb497325b9959"
            ]
        ]
    },
    {
        "id": "b464d6dc825f460a",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "occupiedBolognaIn_MQTT",
        "topic": "train/CCTV/location/Bologna",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1290,
        "y": 7380,
        "wires": [
            [
                "5ae663cb56a1e082"
            ]
        ]
    },
    {
        "id": "5ae663cb56a1e082",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "RabbitdecryptOccupiedBologna",
        "algorithm": "Rabbit",
        "key": "secretOccupiedBologna",
        "x": 1590,
        "y": 7380,
        "wires": [
            [
                "bdadb497325b9959"
            ]
        ]
    },
    {
        "id": "cd26c7334a95ee24",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "occupiedRomaIn_MQTT",
        "topic": "train/CCTV/location/Roma",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1290,
        "y": 7440,
        "wires": [
            [
                "aca192b7abecf889"
            ]
        ]
    },
    {
        "id": "aca192b7abecf889",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "RabbitdecryptOccupiedRoma",
        "algorithm": "Rabbit",
        "key": "secretOccupiedRoma",
        "x": 1580,
        "y": 7440,
        "wires": [
            [
                "bdadb497325b9959"
            ]
        ]
    },
    {
        "id": "9b4cedbd673d69e3",
        "type": "mqtt in",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "occupiedNapoliIn_MQTT",
        "topic": "train/CCTV/location/Napoli",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "bbef09f611251efb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1290,
        "y": 7500,
        "wires": [
            [
                "3cfeac9962a2384c"
            ]
        ]
    },
    {
        "id": "3cfeac9962a2384c",
        "type": "decrypt",
        "z": "5e7f2b6f6bb048a1",
        "g": "b813916fb46904a1",
        "name": "RabbitdecryptOccupiedNapoli",
        "algorithm": "Rabbit",
        "key": "secretOccupiedNapoli",
        "x": 1590,
        "y": 7500,
        "wires": [
            [
                "bdadb497325b9959"
            ]
        ]
    },
    {
        "id": "308d9070f6f1f31f",
        "type": "delay",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3500,
        "y": 2600,
        "wires": [
            [
                "dbffa5609ea8c041"
            ]
        ]
    },
    {
        "id": "c690d54ba9df5c68",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "LinkPBS2Out",
        "mode": "link",
        "links": [
            "42b224a610e51650",
            "57f8e32d488cceaa",
            "7ca756cbd0ef1063",
            "bd3a16bc3cb762d7"
        ],
        "x": 895,
        "y": 5660,
        "wires": []
    },
    {
        "id": "bd3a16bc3cb762d7",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkPBS2In",
        "links": [
            "c690d54ba9df5c68",
            "57c2e3c322d9d0eb"
        ],
        "x": 3375,
        "y": 2640,
        "wires": [
            [
                "1356e21a122388c2"
            ]
        ]
    },
    {
        "id": "0ec0e2978323a79c",
        "type": "link out",
        "z": "5e7f2b6f6bb048a1",
        "g": "9eff0cd9243fc0dc",
        "name": "LinkPBS3Out",
        "mode": "link",
        "links": [
            "c33bf8a15f199a2a",
            "c52377729fd8e8f8"
        ],
        "x": 815,
        "y": 5680,
        "wires": []
    },
    {
        "id": "c33bf8a15f199a2a",
        "type": "link in",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "LinkPBS3In",
        "links": [
            "0ec0e2978323a79c",
            "9a35736953569e4e"
        ],
        "x": 3375,
        "y": 2680,
        "wires": [
            [
                "72932f8e66a52549"
            ]
        ]
    },
    {
        "id": "1356e21a122388c2",
        "type": "delay",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3500,
        "y": 2640,
        "wires": [
            [
                "178790d634025ad3",
                "b6fe7bd2349cec36"
            ]
        ]
    },
    {
        "id": "72932f8e66a52549",
        "type": "delay",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3500,
        "y": 2680,
        "wires": [
            [
                "dbffa5609ea8c041"
            ]
        ]
    },
    {
        "id": "b6fe7bd2349cec36",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "7e4f3f6309849cff",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3650,
        "y": 2700,
        "wires": []
    },
    {
        "id": "c7c8dbb16f1f5b2c",
        "type": "file in",
        "z": "5e7f2b6f6bb048a1",
        "g": "cf0c9798be082d1a",
        "name": "Load clusters from file",
        "filename": "/data/clusters.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": true,
        "x": 2860,
        "y": 7400,
        "wires": [
            [
                "a872ba83b45e33f3"
            ]
        ],
        "info": "Load clusters from a csv file"
    },
    {
        "id": "d9430381471aac8e",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "cf0c9798be082d1a",
        "name": "Auto trigger with repeat",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "Set",
        "payloadType": "str",
        "x": 2710,
        "y": 7280,
        "wires": [
            [
                "4e137e6a47cd98ea"
            ]
        ],
        "info": "Auto starts the clusters loading."
    },
    {
        "id": "26718c96190b28c8",
        "type": "delay",
        "z": "5e7f2b6f6bb048a1",
        "g": "cf0c9798be082d1a",
        "name": "Message delay",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3480,
        "y": 7280,
        "wires": [
            [
                "0341ea0557ae9337"
            ]
        ],
        "info": "Delay the message according to the random Weibull value in the **msg.delay** field."
    },
    {
        "id": "a872ba83b45e33f3",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "cf0c9798be082d1a",
        "name": "Group clusters",
        "func": "// Get the events from the payload\nvar payload = msg.payload + '';\nvar entries = payload.split('\\n')\n\nvar clusters = {};\nvar events = [];\n\n/*\nThe event_index variable can be global because we consume same-cluster tuples in bulk fashion, i.e.\nwe consume all the cluster's tuples before consuming another cluster...\n*/\nvar event_index = 0;\n\n// Iterate on the event\nfor (let raw_row of entries){\n\n\t// split the event by ; (to obtaine the different fileds)\n\tlet row = raw_row.split(';')\n\n\t// Get the cluster_id, and check if it is already in the dict\n\tif (row[0] in clusters){ // if yes\n\n\t\t/* calculate the delay for this event \n\t\tFirst: we divide the total time occupied by the cluster by the number of events\n\t\tin the cluster, to get the cluster interarrival time.\n\n\t\tSecond: we multiply such interarrival time times the current event index to compute \n\t\tthe time offset of this very event. This is the tuple-specific delay that nodeRED is\n\t\tlater going to enforce to our generative module.\n\t\t*/\n\t\tevent_index = event_index + 1\n\t\trow[6] = (parseFloat(row[6])/parseFloat(row[5])) * event_index\n\n\t\t// get the clusters events, and add the new event to the cluster\n\t\tevents = clusters[row[0]]\n\t\tevents.push(row)\n\t\tclusters[row[0]] = events\n\n\t} else{ // if no\n\n\t\t// Create a new entry in the dict\n\t\tevents = []\n\t\tevent_index = 0\n\t\trow[6] = 0\n\t\tevents.push(row)\n\t\tclusters[row[0]] = events\n\t}\n\t\n}\n\n// Put the clusters in the global scope\nglobal.set(\"clusters\", clusters)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 7400,
        "wires": [
            []
        ],
        "info": "- Create a dictionary where the events within the same cluster belong to the same dict key\n- Set the delay to use for event of a cluster"
    },
    {
        "id": "4e137e6a47cd98ea",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "cf0c9798be082d1a",
        "name": "Weibull_generator",
        "func": "// Load the weibull library\nvar weibull_array = global.get(\"weibull_array\")\n\nvar initial_rand_values = 100\n\n\nconsole.log(\"[WEIBULL LOG] Generating a weibull vector with \" + initial_rand_values + \" elements\")\n\n// Generate \"initial_rand_values\" random values according to a Weibull distribution with k = 0.92 and lambda = 1000000\nvar out = weibull_array( initial_rand_values, 0.92, 1000000 )\n\nconsole.log(\"[WEIBULL LOG] Sorting the vector\")\n\t\n// Sorting the random values\nout.sort()\n\n// Save the timestamp in the global scope\nglobal.set(\"timestamps\", out)\n\n// Put the weibull random values in the message payload\nmsg.payload = out\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2930,
        "y": 7280,
        "wires": [
            [
                "1b71f73988f24db3"
            ]
        ],
        "info": "Generate a given number of random values that fit \na **Weibull distribution** with specific parameters,\ni.e., **k** and **lambda**.\n"
    },
    {
        "id": "1b71f73988f24db3",
        "type": "split",
        "z": "5e7f2b6f6bb048a1",
        "g": "cf0c9798be082d1a",
        "name": "Split weibull timestamp",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": "2",
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 3140,
        "y": 7280,
        "wires": [
            [
                "4a537b2694b1cc3a"
            ]
        ],
        "info": "Generate a new message for each random weibull number\nin the payload of the received message."
    },
    {
        "id": "4fa80c9d15e60839",
        "type": "debug",
        "z": "5e7f2b6f6bb048a1",
        "g": "cf0c9798be082d1a",
        "name": "Debug generated event",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4570,
        "y": 7280,
        "wires": [],
        "info": "Allow debugging the generated events, which are in the message payload."
    },
    {
        "id": "4a537b2694b1cc3a",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "cf0c9798be082d1a",
        "name": "Set delay",
        "func": "// Set the delay\nmsg.delay = msg.payload\n\nconsole.log(\"[WEIBULL LOG] Weibull time: \" + msg.delay)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3320,
        "y": 7280,
        "wires": [
            [
                "26718c96190b28c8"
            ]
        ],
        "info": "Set the **msg.delay** field of the message with the weibull random value in the payload of the received message.\nThis field will be used to delay the diagnostic event generation."
    },
    {
        "id": "0341ea0557ae9337",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "cf0c9798be082d1a",
        "name": "cluster_random_selection",
        "func": "// Get the loaded clusters of events (dict) from the global scope\nvar clusters = global.get(\"clusters\")\n\n// Get the keys of clusters\nvar keys = Object.keys(clusters)\n\n// Get a random key, i.e., a random cluster of events\nvar rand_value = Math.floor(Math.random() * (keys.length))\nvar events = clusters[keys[rand_value]]\n\n// Put the events of the cluster in the payload of the message\nconsole.log(\"[WEIBULL LOG] Reproducing cluster \" + events[0][0])\nmsg.payload = events\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3690,
        "y": 7280,
        "wires": [
            [
                "9f7475e1dbf82be4"
            ]
        ]
    },
    {
        "id": "9f7475e1dbf82be4",
        "type": "split",
        "z": "5e7f2b6f6bb048a1",
        "g": "cf0c9798be082d1a",
        "name": "Split events",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "payload[0]",
        "property": "payload",
        "x": 3890,
        "y": 7280,
        "wires": [
            [
                "90b669b808e71ead"
            ]
        ]
    },
    {
        "id": "fcb3fae59d9f7a2d",
        "type": "delay",
        "z": "5e7f2b6f6bb048a1",
        "g": "cf0c9798be082d1a",
        "name": "Event delay",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 4330,
        "y": 7280,
        "wires": [
            [
                "4fa80c9d15e60839",
                "8941647a53c361e5",
                "438a83da7987b399"
            ]
        ]
    },
    {
        "id": "90b669b808e71ead",
        "type": "function",
        "z": "5e7f2b6f6bb048a1",
        "g": "cf0c9798be082d1a",
        "name": "Set delay and query parameters",
        "func": "/* Set the delay:\nOriginal value is in seconds. \nWe transform it to ms.\n*/\nmsg.delay = msg.payload[6]*1000\n\n/* \nPrepare the parameter, i.e., event_code, \nevent_name, component, event_description, \nand cluster_id for the INSERT \ninto the diagnostics table*/\n\nmsg.params = [\n    msg.payload[1], \n    msg.payload[2], \n    msg.payload[3],\n    msg.payload[4],\n    msg.payload[0]]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4110,
        "y": 7280,
        "wires": [
            [
                "fcb3fae59d9f7a2d"
            ]
        ],
        "info": " - Set the **msg.delay** field of the message with the expexted delay of each event (indicated in the field 6 of the payload) in the cluster. This field will be used to delay the diagnostic event generation.\n - Prepare the parameter, // Prepare the parameter, i.e., event_code, event_name, component, event_description, and cluster_id for the INSERT into the diagnostics table, for the INSERT into the diagnostics table\n\n"
    },
    {
        "id": "8941647a53c361e5",
        "type": "file",
        "z": "5e7f2b6f6bb048a1",
        "g": "cf0c9798be082d1a",
        "name": "Save diagnostic event on file",
        "filename": "/data/output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 4580,
        "y": 7400,
        "wires": [
            []
        ],
        "info": "Save the diagnostic event in a csv file"
    },
    {
        "id": "be5748077cb7583c",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "cf0c9798be082d1a",
        "name": "Create diagnostic Table",
        "query": "CREATE TABLE diagnostics (\n    event_id SERIAL PRIMARY KEY,\n    train_id VARCHAR(30) NOT NULL,\n    event_timestamp TIMESTAMP NOT NULL,\n    event_code VARCHAR(30) NOT NULL,\n    event_name VARCHAR(30) NOT NULL,\n    component VARCHAR(30),\n    event_description VARCHAR (150),\n    cluster_id NUMERIC\n);",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2830,
        "y": 7520,
        "wires": [
            []
        ]
    },
    {
        "id": "e1a3e8a7c04edc08",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "cf0c9798be082d1a",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Set",
        "payloadType": "str",
        "x": 2650,
        "y": 7520,
        "wires": [
            [
                "be5748077cb7583c"
            ]
        ]
    },
    {
        "id": "438a83da7987b399",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "cf0c9798be082d1a",
        "name": "Insert generated event in diagnostic",
        "query": "INSERT INTO diagnostics (\n    train_id, \n    event_timestamp, \n    event_code, \n    event_name, \n    component, \n    event_description, \n    cluster_id) \nVALUES (\n    'T456', \n    current_timestamp, $1, $2, $3, $4, $5);\n",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 4600,
        "y": 7340,
        "wires": [
            []
        ],
        "info": "Insert the generated event in the diagnostic table"
    },
    {
        "id": "b1de2768eb2742ce",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "cf0c9798be082d1a",
        "name": "Auto trigger",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Set",
        "payloadType": "str",
        "x": 2670,
        "y": 7400,
        "wires": [
            [
                "c7c8dbb16f1f5b2c"
            ]
        ],
        "info": "Auto starts the clusters loading."
    },
    {
        "id": "0e31eccba55081e6",
        "type": "comment",
        "z": "5e7f2b6f6bb048a1",
        "name": "Diagnostics",
        "info": "Emulates diagnostics events taken fron real-world observed cluster of events\nThe timing between clusters is selected randomly by using a Weibull distribution, while the timing between the events of a cluster is selected according to the cluster mean duration",
        "x": 2650,
        "y": 7200,
        "wires": []
    },
    {
        "id": "4948a5407b280ba5",
        "type": "postgresql",
        "z": "5e7f2b6f6bb048a1",
        "g": "cf0c9798be082d1a",
        "name": "Dump Diagnostics table",
        "query": "COPY diagnostics TO '/data/postgres_db_dir/generated_clusters.csv' WITH CSV HEADER;",
        "postgreSQLConfig": "71249e75214acc0b",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 3410,
        "y": 7520,
        "wires": [
            []
        ]
    },
    {
        "id": "cd8abd674b42fae7",
        "type": "inject",
        "z": "5e7f2b6f6bb048a1",
        "g": "cf0c9798be082d1a",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Set",
        "payloadType": "str",
        "x": 3200,
        "y": 7520,
        "wires": [
            [
                "4948a5407b280ba5"
            ]
        ]
    }
]